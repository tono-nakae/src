.\"	$NetBSD: fdisk.8,v 1.9 1997/08/11 23:31:41 phil Exp $
.\"
.Dd April 4, 1993
.Dt FDISK 8
.\" .Os BSD 4
.Sh NAME
.Nm fdisk
.Nd DOS partition maintenance program
.Sh SYNOPSIS
.Nm
.Op Fl aiufS
.Op Fl 0 | 1 | 2 | 3
.Op Fl s Ar id offset size
.Op Ar device
.Sh PROLOGUE
In order for the BIOS to boot the kernel, certain conventions must be
adhered to.
Sector 0 of the disk must contain boot code, a partition table, and a
magic number.
Newer BIOS want the entire first track reserved.
BIOS partitions can be used to break the disk up into several pieces.
The BIOS brings in sector 0, verifies the magic number, and begins
executing the code at the first byte.
This code is turn searches the DOS partition table for an `active'
partition.
If one is found, the boot block from that partition is loaded and replaces
the original boot block.
Under DOS, you could have one or more partitions with one active.
The DOS
.Nm
program can be used to divide space on the disk into partitions and set
one active.
.Pp
The NetBSD program
.Nm
serves a similar purpose to the DOS program.
When called with no arguments, it prints the sector 0 partition table.
An example follows:
.Bd -literal
	******* Working on device /dev/rwd0d *******
	Warning: BIOS sector numbering starts with sector 1
	parameters extracted from in-core disklabel are:
	cylinders=769 heads=15 sectors/track=33 (495 sectors/cylinder)

	parameters to be used for BIOS calculations are:
	cylinders=769 heads=15 sectors/track=33 (495 sectors/cylinder)
		
	Information from DOS bootblock is:
	The data for partition 0 is:
	0: sysid 165 (NetBSD)
    	    start 495, size 380160 (185 MB), flag 0
		beg: cylinder    1, head   0, sector  1
		end: cylinder  768, head  14, sector 33
	1: sysid 164 (unknown)
    	    start 378180, size 2475 (1 MB), flag 0
		beg: cylinder  764, head   0, sector  1
		end: cylinder  768, head  14, sector 33
	2: <UNUSED>
	3: sysid 99 (ISC UNIX, other System V/386, GNU HURD or Mach)
    	    start 380656, size 224234 (109 MB), flag 80
		beg: cylinder  769, head   0, sector  2
		end: cylinder  197, head  14, sector 33
.Ed
.Pp
The disk is divided into three partitions that happen to fill the disk.
The second partition overlaps the end of the first.
(Used for debugging purposes)
.Bl -tag -width "cyl, sector and head"
.It Em "sysid"
is used to label the partition.  NetBSD reserves the
magic number 165 decimal (A5 in hex).
.It Em "start and size"
fields provide the start address
and size of a partition in sectors.
.It Em "flag 80"
specifies that this is the active partition.
.It Em "cyl, sector and head"
fields are used to specify the beginning address
and end address for the partition.
.It Em "Note:"
these numbers are calculated using BIOS's understanding of the disk geometry
and saved in the bootblock.
.El
.Pp
The flags
.Fl a ,
.Fl i 
or
.Fl u
are used to indicate that the partition data is to be updated.
The
.Nm
program will enter a conversational mode.
This mode is designed not to change any data unless you explicitly tell it to;
.Nm
selects defaults for its questions to guarantee that behavior.
.Pp
If the 
.Fl u
flag is used, it displays each partition and asks if you want to edit it.
If you reply affirmatively,
it will step through each field showing the old value
and asking for a new one.
When you are done with a partition,
.Nm
will display the information again and ask if it is correct.
.Nm
will then procede to the next entry.
.Pp
Getting the
.Em cyl, sector,
and
.Em head
fields correct is tricky.
So by default,
they will be calculated for you;
you can specify them if you choose.
.Pp
After all the partitions are processed,
if the 
.Fl a
flag was given, you are given the option to change the
.Em active
partition.
To change only the
.Em active
partition, you can use only the
.Fl a .
.Pp
Finally,
when the all the data for the first sector has been accumulated,
.Nm
will ask if you really want to rewrite sector 0.
Only if you reply affirmatively to this question will
.Nm
write anything to the disk.
.Pp
The
.Fl i
initializes the partition table.  This initialization is done
before any work is done for the
.Fl a
or
.Fl u
flags.
The
.Fl i
flag instructs
.Nm
to start by making the first 3 partitions empty, setting the last partition
to use the whole disk for NetBSD, and marking the last partition active.
.Pp
The flags
.Fl 0 ,
.Fl 1 ,
.Fl 2 and
.Fl 3
allow the user to selectively update or set to active a specific
partition.
.Pp
The
.Fl s
flag allows the user to specify the partition type, offset and
size from the command line.  This flag requires the use of the
partition selection flag.
.Pp
The
.Fl f
flag makes
.Nm
work in a non-interactive mode.  You can not change the disk parameters
in this mode.  This is provided only so scripts or other programs may
use fdisk as part of an automatic installation process.  Using the
.Fl f
flag with the
.Fl u
makes it impossible to specify 
.Em cylinder, head
and 
.Em sector
fields.
.Pp
The
.Fl S
flag used with no other flags prints a series of 
.Nm /bin/sh
commands for setting variables to the partition information.  This
is used for the install script.
.Sh NOTES
The automatic calculation of starting cylinder etc. uses
a set of figures that represent what the BIOS thinks is the
geometry of the drive.
These figures are by default taken from the incore disklabel, but
.Nm
gives you an opportunity to change them.
This allows the user to create a bootblock that can work with drives
that use geometry translation under the BIOS.
.Pp
If you hand craft your disk layout,
please make sure that the NetBSD partition starts on a cylinder boundary.
(This restriction may be changed in the future.)
.Pp
Editing an existing partition is risky, and may cause you to
lose all the data in that partition.
.Pp
You should run this program interactively once or twice to see how it works.
This is completely safe as long as you answer the last question in the negative.
.Sh SEE ALSO
.Xr disklabel 8
.Sh BUGS
There are subtleties that the program detects that are not explained in
this manual page.
