$NetBSD: am-utils.info-4,v 1.1.1.3 1998/08/08 22:05:40 christos Exp $
This is Info file am-utils.info, produced by Makeinfo version 1.68 from
the input file am-utils.texi.

START-INFO-DIR-ENTRY
* Am-utils: (am-utils).          The Amd automounter suite of utilities
END-INFO-DIR-ENTRY


File: am-utils.info,  Node: Amq -M-option,  Next: Amq -p option,  Prev: Amq -m option,  Up: Controlling Amd

Amq `-M' option
---------------

   The `-M' option passes a new map entry to Amd and waits for it to be
evaluated, possibly causing a mount.  For example, the following
command would cause `/home/toytown' on host `toytown' to be mounted
locally on `/mnt/toytown'.

     amq -M '/mnt/toytown type:=nfs;rfs:=/home/toytown;rhost:=toytown;fs:=${key}'

   Amd applies some simple security checks before allowing this
operation.  The check tests whether the incoming request is from a
privileged UDP port on the local machine.  "Permission denied" is
returned if the check fails.

   This option is very insecure as it is vulnerable to attacks such as
IP Spoofing.  In other words, it is relatively easy for an attacker who
really wants to, to make your Amd process mount any filesystem from the
Internet!  Therefore, the *complete* code which supports the `-M'
option in Amd and Amq is turned off by default.  To turn it on, you
have to reconfigure am-utils with `configure --enable-amq-mount'.
Think twice before doing so, and use this option only if you absolutely
need to.

   A future release of Amd will include code to allow the mount(8)
command to mount automount points:

     mount -t amd /vol hesiod.vol

   This will then allow Amd to be controlled from the standard system
filesystem mount list.


File: am-utils.info,  Node: Amq -p option,  Next: Amq -P-option,  Prev: Amq -M-option,  Up: Controlling Amd

Amq `-p' option
---------------

   Return the process ID of the remote or locally running Amd.  Useful
when you need to send a signal to the local Amd process, and would
rather not have to search through the process table.  This option is
used in the `ctl-amd' script.


File: am-utils.info,  Node: Amq -P-option,  Next: Amq -s option,  Prev: Amq -p option,  Up: Controlling Amd

Amq `-P' option
---------------

   Contact an alternate running Amd that had registered itself on a
different RPC PROGRAM_NUMBER and apply all other operations to that
instance of the automounter.  This is useful when you run multiple
copies of Amd, and need to manage each one separately.  If not
specified, Amq will use the default program number for Amd, 300019.
For security reasons, the only alternate program numbers Amd can use
range from 300019 to 300029, inclusive.

   For example, to kill an alternate running Amd:

     kill `amq -p -P 300020`


File: am-utils.info,  Node: Amq -s option,  Next: Amq -T option,  Prev: Amq -P-option,  Up: Controlling Amd

Amq `-s' option
---------------

   The `-s' option displays global statistics.  If any other options
are specified or any filesystems named then this option is ignored.
For example:

     requests  stale     mount     mount     unmount
     deferred  fhandles  ok        failed    failed
     1054      1         487       290       7017

`Deferred requests'
     are those for which an immediate reply could not be constructed.
     For example, this would happen if a background mount was required.

`Stale filehandles'
     counts the number of times the kernel passes a stale filehandle to
     Amd.  Large numbers indicate problems.

`Mount ok'
     counts the number of automounts which were successful.

`Mount failed'
     counts the number of automounts which failed.

`Unmount failed'
     counts the number of times a filesystem could not be unmounted.
     Very large numbers here indicate that the time between unmount
     attempts should be increased.


File: am-utils.info,  Node: Amq -T option,  Next: Amq -U-option,  Prev: Amq -s option,  Up: Controlling Amd

Amq `-T' option
---------------

   The `-T' option causes the Amq to contact Amd using the TCP
transport only (connection oriented).  Normally, Amq will use TCP
first, and if that failed, will try UDP.


File: am-utils.info,  Node: Amq -U-option,  Next: Amq -u option,  Prev: Amq -T option,  Up: Controlling Amd

Amq `-U' option
---------------

   The `-U' option causes the Amq to contact Amd using the UDP
transport only (connectionless).  Normally, Amq will use TCP first, and
if that failed, will try UDP.


File: am-utils.info,  Node: Amq -u option,  Next: Amq -v option,  Prev: Amq -U-option,  Up: Controlling Amd

Amq `-u' option
---------------

   The `-u' option causes the time-to-live interval of the named mount
points to be expired, thus causing an unmount attempt.  This is the only
safe way to unmount an automounted filesystem.  It is not possible to
unmount a filesystem which has been mounted with the `nounmount' flag.


File: am-utils.info,  Node: Amq -v option,  Next: Other Amq options,  Prev: Amq -u option,  Up: Controlling Amd

Amq `-v' option
---------------

   The `-v' option displays the version of Amd in a similar way to
Amd's `-v' option.


File: am-utils.info,  Node: Other Amq options,  Prev: Amq -v option,  Up: Controlling Amd

Other Amq options
-----------------

   Two other operations are implemented.  These modify the state of Amd
as a whole, rather than any particular filesystem.  The `-x' and `-D'
options have exactly the same effect as Amd's corresponding command
line options.

   When Amd receives a `-x' flag it limits the log options being
modified to those which were not enabled at startup.  This prevents a
user turning *off* any logging option which was specified at startup,
though any which have been turned on since then can still be turned
off.  The `-D' option has a similar behavior.


File: am-utils.info,  Node: FSinfo,  Next: Hlfsd,  Prev: Run-time Administration,  Up: Top

FSinfo
******

   XXX: this chapter should be reviewed by someone knowledgeable with
fsinfo.

* Menu:

* FSinfo Overview::                 Introduction to FSinfo.
* Using FSinfo::                    Basic concepts.
* FSinfo Grammar::                  Language syntax, semantics and examples.
* FSinfo host definitions::         Defining a new host.
* FSinfo host attributes::          Definable host attributes.
* FSinfo filesystems::              Defining locally attached filesystems.
* FSinfo static mounts::            Defining additional static mounts.
* FSinfo automount definitions::
* FSinfo Command Line Options::
* FSinfo errors::


File: am-utils.info,  Node: FSinfo Overview,  Next: Using FSinfo,  Prev: FSinfo,  Up: FSinfo

FSinfo overview
===============

   FSinfo is a filesystem management tool.  It has been designed to
work with Amd to help system administrators keep track of the ever
increasing filesystem namespace under their control.

   The purpose of FSinfo is to generate all the important standard
filesystem data files from a single set of input data.  Starting with a
single data source guarantees that all the generated files are
self-consistent.  One of the possible output data formats is a set of
Amd maps which can be used amongst the set of hosts described in the
input data.

   FSinfo implements a declarative language.  This language is
specifically designed for describing filesystem namespace and physical
layouts.  The basic declaration defines a mounted filesystem including
its device name, mount point, and all the volumes and access
permissions.  FSinfo reads this information and builds an internal map
of the entire network of hosts.  Using this map, many different data
formats can be produced including `/etc/fstab', `/etc/exports', Amd
mount maps and `/etc/bootparams'.


File: am-utils.info,  Node: Using FSinfo,  Next: FSinfo Grammar,  Prev: FSinfo Overview,  Up: FSinfo

Using FSinfo
============

   The basic strategy when using FSinfo is to gather all the
information about all disks on all machines into one set of
declarations.  For each machine being managed, the following data is
required:

   * Hostname

   * List of all filesystems and, optionally, their mount points.

   * Names of volumes stored on each filesystem.

   * NFS export information for each volume.

   * The list of static filesystem mounts.

   The following information can also be entered into the same
configuration files so that all data can be kept in one place.

   * List of network interfaces

   * IP address of each interface

   * Hardware address of each interface

   * Dumpset to which each filesystem belongs

   * and more ...

   To generate Amd mount maps, the automount tree must also be defined
(*note FSinfo automount definitions::.).  This will have been designed
at the time the volume names were allocated.  Some volume names will
not be automounted, so FSinfo needs an explicit list of which volumes
should be automounted.

   Hostnames are required at several places in the FSinfo language.  It
is important to stick to either fully qualified names or unqualified
names.  Using a mixture of the two will inevitably result in confusion.

   Sometimes volumes need to be referenced which are not defined in the
set of hosts being managed with FSinfo.  The required action is to add a
dummy set of definitions for the host and volume names required.  Since
the files generated for those particular hosts will not be used on them,
the exact values used is not critical.


File: am-utils.info,  Node: FSinfo Grammar,  Next: FSinfo host definitions,  Prev: Using FSinfo,  Up: FSinfo

FSinfo grammar
==============

   FSinfo has a relatively simple grammar.  Distinct syntactic
constructs exist for each of the different types of data, though they
share a common flavor.  Several conventions are used in the grammar
fragments below.

   The notation, list(xxx), indicates a list of zero or more xxx's.
The notation, opt(xxx), indicates zero or one xxx.  Items in double
quotes, eg "host", represent input tokens.  Items in angle brackets, eg
<HOSTNAME>, represent strings in the input.  Strings need not be in
double quotes, except to differentiate them from reserved words.
Quoted strings may include the usual set of C "\" escape sequences with
one exception: a backslash-newline-whitespace sequence is squashed into
a single space character.  To defeat this feature, put a further
backslash at the start of the second line.

   At the outermost level of the grammar, the input consists of a
sequence of host and automount declarations.  These declarations are
all parsed before they are analyzed.  This means they can appear in any
order and cyclic host references are possible.

     fsinfo      : list(fsinfo_attr) ;
     
     fsinfo_attr : host | automount ;

* Menu:

* FSinfo host definitions::
* FSinfo automount definitions::


File: am-utils.info,  Node: FSinfo host definitions,  Next: FSinfo host attributes,  Prev: FSinfo Grammar,  Up: FSinfo

FSinfo host definitions
=======================

   A host declaration consists of three parts: a set of machine
attribute data, a list of filesystems physically attached to the
machine, and a list of additional statically mounted filesystems.

     host        : "host" host_data list(filesystem) list(mount) ;

   Each host must be declared in this way exactly once.  Such things as
the hardware address, the architecture and operating system types and
the cluster name are all specified within the "host data".

   All the disks the machine has should then be described in the "list
of filesystems".  When describing disks, you can specify what "volname"
the disk/partition should have and all such entries are built up into a
dictionary which can then be used for building the automounter maps.

   The "list of mounts" specifies all the filesystems that should be
statically mounted on the machine.

* Menu:

* FSinfo host attributes::
* FSinfo filesystems::
* FSinfo static mounts::


File: am-utils.info,  Node: FSinfo host attributes,  Next: FSinfo filesystems,  Prev: FSinfo host definitions,  Up: FSinfo host definitions

FSinfo host attributes
======================

   The host data, "host_data", always includes the "hostname".  In
addition, several other host attributes can be given.

     host_data   : <HOSTNAME>
                 | "{" list(host_attrs) "}" <HOSTNAME>
                 ;
     
     host_attrs  : host_attr "=" <STRING>
                 | netif
                 ;
     
     host_attr   : "config"
                 | "arch"
                 | "os"
                 | "cluster"
                 ;

   The "hostname" is, typically, the fully qualified hostname of the
machine.

   Examples:

     host dylan.doc.ic.ac.uk
     
     host {
         os = hpux
         arch = hp300
     } dougal.doc.ic.ac.uk

   The options that can be given as host attributes are shown below.

* Menu:

* netif Option:         FSinfo host netif:
* config Option:        FSinfo host config:
* arch Option:          FSinfo host arch:
* os Option:            FSinfo host os:
* cluster Option:       FSinfo host cluster:


File: am-utils.info,  Node: FSinfo host netif,  Next: FSinfo host config,  Up: FSinfo host attributes

netif Option
------------

   This defines the set of network interfaces configured on the machine.
The interface attributes collected by FSinfo are the IP address, subnet
mask and hardware address.  Multiple interfaces may be defined for
hosts with several interfaces by an entry for each interface.  The
values given are sanity checked, but are currently unused for anything
else.

     netif       : "netif" <STRING> "{" list(netif_attrs) "}" ;
     
     netif_attrs : netif_attr "=" <STRING> ;
     
     netif_attr  : "inaddr" | "netmask" | "hwaddr" ;

   Examples:

     netif ie0 {
         inaddr  = 129.31.81.37
         netmask = 0xfffffe00
         hwaddr  = "08:00:20:01:a6:a5"
     }
     
     netif ec0 { }


File: am-utils.info,  Node: FSinfo host config,  Next: FSinfo host arch,  Prev: FSinfo host netif,  Up: FSinfo host attributes

config Option
-------------

   This option allows you to specify configuration variables for the
startup scripts (`rc' scripts).  A simple string should immediately
follow the keyword.

   Example:

     config "NFS_SERVER=true"
     config "ZEPHYR=true"

   This option is currently unsupported.


File: am-utils.info,  Node: FSinfo host arch,  Next: FSinfo host os,  Prev: FSinfo host config,  Up: FSinfo host attributes

arch Option
-----------

   This defines the architecture of the machine.  For example:

     arch = hp300

   This is intended to be of use when building architecture specific
mountmaps, however, the option is currently unsupported.


File: am-utils.info,  Node: FSinfo host os,  Next: FSinfo host cluster,  Prev: FSinfo host arch,  Up: FSinfo host attributes

os Option
---------

   This defines the operating system type of the host.  For example:

     os = hpux

   This information is used when creating the `fstab' files, for
example in choosing which format to use for the `fstab' entries within
the file.


File: am-utils.info,  Node: FSinfo host cluster,  Prev: FSinfo host os,  Up: FSinfo host attributes

cluster Option
--------------

   This is used for specifying in which cluster the machine belongs.
For example:

     cluster = "theory"

   The cluster is intended to be used when generating the automount
maps, although it is currently unsupported.


File: am-utils.info,  Node: FSinfo filesystems,  Next: FSinfo static mounts,  Prev: FSinfo host attributes,  Up: FSinfo host definitions

FSinfo filesystems
==================

   The list of physically attached filesystems follows the machine
attributes.  These should define all the filesystems available from this
machine, whether exported or not.  In addition to the device name,
filesystems have several attributes, such as filesystem type, mount
options, and `fsck' pass number which are needed to generate `fstab'
entries.

     filesystem  : "fs" <DEVICE> "{" list(fs_data) "}" ;
     
     fs_data     : fs_data_attr "=" <STRING>
                 | mount
                 ;
     
     fs_data_attr
                 : "fstype" | "opts" | "passno"
                 | "freq" | "dumpset" | "log"
                 ;

   Here, <DEVICE> is the device name of the disk (for example,
`/dev/dsk/2s0').  The device name is used for building the mount maps
and for the `fstab' file.  The attributes that can be specified are
shown in the following section.

   The FSinfo configuration file for `dylan.doc.ic.ac.uk' is listed
below.

     host dylan.doc.ic.ac.uk
     
     fs /dev/dsk/0s0 {
             fstype = swap
     }
     
     fs /dev/dsk/0s0 {
             fstype = hfs
             opts = rw,noquota,grpid
             passno = 0;
             freq = 1;
             mount / { }
     }
     
     fs /dev/dsk/1s0 {
             fstype = hfs
             opts = defaults
             passno = 1;
             freq = 1;
             mount /usr {
                     local {
                             exportfs "dougal eden dylan zebedee brian"
                             volname /nfs/hp300/local
                     }
             }
     }
     
     fs /dev/dsk/2s0 {
             fstype = hfs
             opts = defaults
             passno = 1;
             freq = 1;
             mount default {
                     exportfs "toytown_clients hangers_on"
                     volname /home/dylan/dk2
             }
     }
     
     fs /dev/dsk/3s0 {
             fstype = hfs
             opts = defaults
             passno = 1;
             freq = 1;
             mount default {
                     exportfs "toytown_clients hangers_on"
                     volname /home/dylan/dk3
             }
     }
     
     fs /dev/dsk/5s0 {
             fstype = hfs
             opts = defaults
             passno = 1;
             freq = 1;
             mount default {
                     exportfs "toytown_clients hangers_on"
                     volname /home/dylan/dk5
             }
     }

* Menu:

* fstype Option:        FSinfo filesystems fstype:
* opts Option:          FSinfo filesystems opts:
* passno Option:        FSinfo filesystems passno:
* freq Option:          FSinfo filesystems freq:
* mount Option:         FSinfo filesystems mount:
* dumpset Option:       FSinfo filesystems dumpset:
* log Option:           FSinfo filesystems log:


File: am-utils.info,  Node: FSinfo filesystems fstype,  Next: FSinfo filesystems opts,  Up: FSinfo filesystems

fstype Option
-------------

   This specifies the type of filesystem being declared and will be
placed into the `fstab' file as is.  The value of this option will be
handed to `mount' as the filesystem type--it should have such values as
`4.2', `nfs' or `swap'.  The value is not examined for correctness.

   There is one special case.  If the filesystem type is specified as
`export' then the filesystem information will not be added to the
host's `fstab' information, but it will still be visible on the
network.  This is useful for defining hosts which contain referenced
volumes but which are not under full control of FSinfo.

   Example:

     fstype = swap


File: am-utils.info,  Node: FSinfo filesystems opts,  Next: FSinfo filesystems passno,  Prev: FSinfo filesystems fstype,  Up: FSinfo filesystems

opts Option
-----------

   This defines any options that should be given to mount(8) in the
`fstab' file.  For example:

     opts = rw,nosuid,grpid


File: am-utils.info,  Node: FSinfo filesystems passno,  Next: FSinfo filesystems freq,  Prev: FSinfo filesystems opts,  Up: FSinfo filesystems

passno Option
-------------

   This defines the fsck(8) pass number in which to check the
filesystem.  This value will be placed into the `fstab' file.

   Example:

     passno = 1


File: am-utils.info,  Node: FSinfo filesystems freq,  Next: FSinfo filesystems mount,  Prev: FSinfo filesystems passno,  Up: FSinfo filesystems

freq Option
-----------

   This defines the interval (in days) between dumps.  The value is
placed as is into the `fstab' file.

   Example:

     freq = 3


File: am-utils.info,  Node: FSinfo filesystems mount,  Next: FSinfo filesystems dumpset,  Prev: FSinfo filesystems freq,  Up: FSinfo filesystems

mount Option
------------

   This defines the mountpoint at which to place the filesystem.  If the
mountpoint of the filesystem is specified as `default', then the
filesystem will be mounted in the automounter's tree under its volume
name and the mount will automatically be inherited by the automounter.

   Following the mountpoint, namespace information for the filesystem
may be described.  The options that can be given here are `exportfs',
`volname' and `sel'.

   The format is:

     mount       : "mount" vol_tree ;
     
     vol_tree    : list(vol_tree_attr) ;
     
     vol_tree_attr
                 :  <STRING> "{" list(vol_tree_info) vol_tree "}" ;
     
     vol_tree_info
                 : "exportfs" <EXPORT-DATA>
                 | "volname" <VOLNAME>
                 | "sel" <SELECTOR-LIST>
                 ;

   Example:

     mount default {
         exportfs "dylan dougal florence zebedee"
         volname /vol/andrew
     }

   In the above example, the filesystem currently being declared will
have an entry placed into the `exports' file allowing the filesystem to
be exported to the machines `dylan', `dougal', `florence' and
`zebedee'.  The volume name by which the filesystem will be referred to
remotely, is `/vol/andrew'.  By declaring the mountpoint to be
`default', the filesystem will be mounted on the local machine in the
automounter tree, where Amd will automatically inherit the mount as
`/vol/andrew'.

`exportfs'
     a string defining which machines the filesystem may be exported to.
     This is copied, as is, into the `exports' file--no sanity checking
     is performed on this string.

`volname'
     a string which declares the remote name by which to reference the
     filesystem.  The string is entered into a dictionary and allows
     you to refer to this filesystem in other places by this volume
     name.

`sel'
     a string which is placed into the automounter maps as a selector
     for the filesystem.


File: am-utils.info,  Node: FSinfo filesystems dumpset,  Next: FSinfo filesystems log,  Prev: FSinfo filesystems mount,  Up: FSinfo filesystems

dumpset Option
--------------

   This provides support for Imperial College's local file backup tools
and is not documented further here.


File: am-utils.info,  Node: FSinfo filesystems log,  Prev: FSinfo filesystems dumpset,  Up: FSinfo filesystems

log Option
----------

   Specifies the log device for the current filesystem. This is ignored
if not required by the particular filesystem type.


File: am-utils.info,  Node: FSinfo static mounts,  Next: FSinfo automount definitions,  Prev: FSinfo filesystems,  Up: FSinfo host definitions

FSinfo static mounts
====================

   Each host may also have a number of statically mounted filesystems.
For example, the host may be a diskless workstation in which case it
will have no `fs' declarations.  In this case the `mount' declaration
is used to determine from where its filesystems will be mounted.  In
addition to being added to the `fstab' file, this information can also
be used to generate a suitable `bootparams' file.

     mount       : "mount" <VOLNAME> list(localinfo) ;
     
     localinfo   : localinfo_attr <STRING> ;
     
     localinfo_attr
                 : "as"
                 | "from"
                 | "fstype"
                 | "opts"
                 ;

   The filesystem specified to be mounted will be searched for in the
dictionary of volume names built when scanning the list of hosts'
definitions.

   The attributes have the following semantics:
`from MACHINE'
     mount the filesystem from the machine with the hostname of
     "machine".

`as MOUNTPOINT'
     mount the filesystem locally as the name given, in case this is
     different from the advertised volume name of the filesystem.

`opts OPTIONS'
     native mount(8) options.

`fstype TYPE'
     type of filesystem to be mounted.

   An example:

     mount /export/exec/hp300/local as /usr/local

   If the mountpoint specified is either `/' or `swap', the machine
will be considered to be booting off the net and this will be noted for
use in generating a `bootparams' file for the host which owns the
filesystems.


File: am-utils.info,  Node: FSinfo automount definitions,  Next: FSinfo Command Line Options,  Prev: FSinfo static mounts,  Up: FSinfo

Defining an Amd Mount Map in FSinfo
===================================

   The maps used by Amd can be constructed from FSinfo by defining all
the automount trees.  FSinfo takes all the definitions found and builds
one map for each top level tree.

   The automount tree is usually defined last.  A single automount
configuration will usually apply to an entire management domain.  One
`automount' declaration is needed for each Amd automount point.  FSinfo
determines whether the automount point is "direct" (*note Direct
Automount Filesystem::.) or "indirect" (*note Top-level Filesystem::.).
Direct automount points are distinguished by the fact that there is no
underlying "automount_tree".

     automount   : "automount" opt(auto_opts) automount_tree ;
     
     auto_opts   : "opts" <MOUNT-OPTIONS> ;
     
     automount_tree
                 : list(automount_attr)
                 ;
     
     automount_attr
                 : <STRING> "=" <VOLNAME>
                 | <STRING> "->" <SYMLINK>
                 | <STRING> "{" automount_tree "}"
                 ;

   If <MOUNT-OPTIONS> is given, then it is the string to be placed in
the maps for Amd for the `opts' option.

   A "map" is typically a tree of filesystems, for example `home'
normally contains a tree of filesystems representing other machines in
the network.

   A map can either be given as a name representing an already defined
volume name, or it can be a tree.  A tree is represented by placing
braces after the name.  For example, to define a tree `/vol', the
following map would be defined:

     automount /vol { }

   Within a tree, the only items that can appear are more maps.  For
example:

     automount /vol {
         andrew { }
         X11 { }
     }

   In this case, FSinfo will look for volumes named `/vol/andrew' and
`/vol/X11' and a map entry will be generated for each.  If the volumes
are defined more than once, then FSinfo will generate a series of
alternate entries for them in the maps.

   Instead of a tree, either a link (NAME `->' DESTINATION) or a
reference can be specified (NAME `=' DESTINATION).  A link creates a
symbolic link to the string specified, without further processing the
entry.  A reference will examine the destination filesystem and
optimize the reference.  For example, to create an entry for `njw' in
the `/homes' map, either of the two forms can be used:

     automount /homes {
         njw -> /home/dylan/njw
     }

   or

     automount /homes {
         njw = /home/dylan/njw
     }

   In the first example, when `/homes/njw' is referenced from Amd, a
link will be created leading to `/home/dylan/njw' and the automounter
will be referenced a second time to resolve this filename.  The map
entry would be:

     njw type:=link;fs:=/home/dylan/njw

   In the second example, the destination directory is analyzed and
found to be in the filesystem `/home/dylan' which has previously been
defined in the maps. Hence the map entry will look like:

     njw rhost:=dylan;rfs:=/home/dylan;sublink:=njw

   Creating only one symbolic link, and one access to Amd.


File: am-utils.info,  Node: FSinfo Command Line Options,  Next: FSinfo errors,  Prev: FSinfo automount definitions,  Up: FSinfo

FSinfo Command Line Options
===========================

   FSinfo is started from the command line by using the command:

     fsinfo [options] files ...

   The input to FSinfo is a single set of definitions of machines and
automount maps.  If multiple files are given on the command-line, then
the files are concatenated together to form the input source.  The files
are passed individually through the C pre-processor before being parsed.

   Several options define a prefix for the name of an output file.  If
the prefix is not specified no output of that type is produced.  The
suffix used will correspond either to the hostname to which a file
belongs, or to the type of output if only one file is produced.
Dumpsets and the `bootparams' file are in the latter class.  To put the
output into a subdirectory simply put a `/' at the end of the prefix,
making sure that the directory has already been made before running
Fsinfo.

* Menu:

* -a FSinfo Option::    Amd automount directory:
* -b FSinfo Option::    Prefix for bootparams files.
* -d FSinfo Option::    Prefix for dumpset data files.
* -e FSinfo Option::    Prefix for exports files.
* -f FSinfo Option::    Prefix for fstab files.
* -h FSinfo Option::    Local hostname.
* -m FSinfo Option::    Prefix for automount maps.
* -q FSinfo Option::    Ultra quiet mode.
* -v FSinfo Option::    Verbose mode.
* -I FSinfo Option::    Define new #include directory.
* -D-FSinfo Option::    Define macro.
* -U FSinfo Option::    Undefine macro.


File: am-utils.info,  Node: -a FSinfo Option,  Next: -b FSinfo Option,  Prev: FSinfo Command Line Options,  Up: FSinfo Command Line Options

`-a' AUTODIR
------------

   Specifies the directory name in which to place the automounter's
mountpoints.  This defaults to `/a'.  Some sites have the autodir set
to be `/amd', and this would be achieved by:

     fsinfo -a /amd ...


File: am-utils.info,  Node: -b FSinfo Option,  Next: -d FSinfo Option,  Prev: -a FSinfo Option,  Up: FSinfo Command Line Options

`-b' BOOTPARAMS
---------------

   This specifies the prefix for the `bootparams' filename.  If it is
not given, then the file will not be generated.  The `bootparams' file
will be constructed for the destination machine and will be placed into
a file named `bootparams' and prefixed by this string.  The file
generated contains a list of entries describing each diskless client
that can boot from the destination machine.

   As an example, to create a `bootparams' file in the directory
`generic', the following would be used:

     fsinfo -b generic/ ...


File: am-utils.info,  Node: -d FSinfo Option,  Next: -e FSinfo Option,  Prev: -b FSinfo Option,  Up: FSinfo Command Line Options

`-d' DUMPSETS
-------------

   This specifies the prefix for the `dumpsets' file.  If it is not
specified, then the file will not be generated.  The file will be for
the destination machine and will be placed into a filename `dumpsets',
prefixed by this string.  The `dumpsets' file is for use by Imperial
College's local backup system.

   For example, to create a `dumpsets' file in the directory `generic',
then you would use the following:

     fsinfo -d generic/ ...


File: am-utils.info,  Node: -e FSinfo Option,  Next: -f FSinfo Option,  Prev: -d FSinfo Option,  Up: FSinfo Command Line Options

`-e' EXPORTFS
-------------

   Defines the prefix for the `exports' files.  If it is not given,
then the file will not be generated.  For each machine defined in the
configuration files as having disks, an `exports' file is constructed
and given a filename determined by the name of the machine, prefixed
with this string.  If a machine is defined as diskless, then no
`exports' file will be created for it.  The files contain entries for
directories on the machine that may be exported to clients.

   Example: To create the `exports' files for each diskfull machine and
place them into the directory `exports':

     fsinfo -e exports/ ...


File: am-utils.info,  Node: -f FSinfo Option,  Next: -h FSinfo Option,  Prev: -e FSinfo Option,  Up: FSinfo Command Line Options

`-f' FSTAB
----------

   This defines the prefix for the `fstab' files.  The files will only
be created if this prefix is defined.  For each machine defined in the
configuration files, a `fstab' file is created with the filename
determined by prefixing this string with the name of the machine.  These
files contain entries for filesystems and partitions to mount at boot
time.

   Example, to create the files in the directory `fstabs':

     fsinfo -f fstabs/ ...


File: am-utils.info,  Node: -h FSinfo Option,  Next: -m FSinfo Option,  Prev: -f FSinfo Option,  Up: FSinfo Command Line Options

`-h' HOSTNAME
-------------

   Defines the hostname of the destination machine to process for.  If
this is not specified, it defaults to the local machine name, as
returned by gethostname(2).

   Example:

     fsinfo -h dylan.doc.ic.ac.uk ...


File: am-utils.info,  Node: -m FSinfo Option,  Next: -q FSinfo Option,  Prev: -h FSinfo Option,  Up: FSinfo Command Line Options

`-m' MOUNT-MAPS
---------------

   Defines the prefix for the automounter files.  The maps will only be
produced if this prefix is defined.  The mount maps suitable for the
network defined by the configuration files will be placed into files
with names calculated by prefixing this string to the name of each map.

   For example, to create the automounter maps and place them in the
directory `automaps':

     fsinfo -m automaps/ ...


File: am-utils.info,  Node: -q FSinfo Option,  Next: -v FSinfo Option,  Prev: -m FSinfo Option,  Up: FSinfo Command Line Options

`-q'
----

   Selects quiet mode.  FSinfo suppress the "running commentary" and
only outputs any error messages which are generated.


File: am-utils.info,  Node: -v FSinfo Option,  Next: -D-FSinfo Option,  Prev: -q FSinfo Option,  Up: FSinfo Command Line Options

`-v'
----

   Selects verbose mode.  When this is activated, the program will
display more messages, and display all the information discovered when
performing the semantic analysis phase.  Each verbose message is output
to `stdout' on a line starting with a `#' character.


File: am-utils.info,  Node: -D-FSinfo Option,  Next: -I FSinfo Option,  Prev: -v FSinfo Option,  Up: FSinfo Command Line Options

`-D' NAME[=DEFN]
----------------

   Defines a symbol "name" for the preprocessor when reading the
configuration files.  Equivalent to `#define' directive.


File: am-utils.info,  Node: -I FSinfo Option,  Next: -U FSinfo Option,  Prev: -D-FSinfo Option,  Up: FSinfo Command Line Options

`-I' DIRECTORY
--------------

   This option is passed into the preprocessor for the configuration
files.  It specifies directories in which to find include files


File: am-utils.info,  Node: -U FSinfo Option,  Prev: -I FSinfo Option,  Up: FSinfo Command Line Options

`-U' NAME
---------

   Removes any initial definition of the symbol "name".  Inverse of the
`-D' option.


File: am-utils.info,  Node: FSinfo errors,  Prev: FSinfo Command Line Options,  Up: FSinfo

Errors produced by FSinfo
=========================

   The following table documents the errors and warnings which FSinfo
may produce.

" expected
     Occurs if an unescaped newline is found in a quoted string.

ambiguous mount: VOLUME is a replicated filesystem
     If several filesystems are declared as having the same volume
     name, they will be considered replicated filesystems.  To mount a
     replicated filesystem statically, a specific host will need to be
     named, to say which particular copy to try and mount, else this
     error will result.

can't open FILENAME for writing
     Occurs if any errors are encountered when opening an output file.

cannot determine localname since volname VOLUME is not uniquely defined
     If a volume is replicated and an attempt is made to mount the
     filesystem statically without specifying a local mountpoint,
     FSinfo cannot calculate a mountpoint, as the desired pathname
     would be ambiguous.

DEVICE has duplicate exportfs data
     Produced if the `exportfs' option is used multiple times within the
     same branch of a filesystem definition. For example, if you
     attempt to set the `exportfs' data at different levels of the
     mountpoint directory tree.

dump frequency for HOST:DEVICE is non-zero
     Occurs if DEVICE has its `fstype' declared to be `swap' or
     `export' and the `dump' option is set to a value greater than
     zero.  Swap devices should not be dumped.

duplicate host HOSTNAME!
     If a host has more than one definition.

end of file within comment
     A comment was unterminated before the end of one of the
     configuration files.

FILENAME: cannot open for reading
     If a file specified on the command line as containing
     configuration data could not be opened.

FILESYSTEM has a volname but no exportfs data
     Occurs when a volume name is declared for a file system, but the
     string specifying what machines the filesystem can be exported to
     is missing.

fs field "FIELD-NAME" already set
     Occurs when multiple definitions are given for one of the
     attributes of a host's filesystem.

host field "FIELD-NAME" already set
     If duplicate definitions are given for any of the fields with a
     host definition.

HOST:DEVICE has more than one mount point
     Occurs if the mount option for a host's filesystem specifies
     multiple trees at which to place the mountpoint.

HOST:DEVICE has no mount point
     Occurs if the `mount' option is not specified for a host's
     filesystem.

HOST:DEVICE needs field "FIELD-NAME"
     Occurs when a filesystem is missing a required field. FIELD-NAME
     could be one of `fstype', `opts', `passno' or `mount'.

HOST:mount field specified for swap partition
     Occurs if a mountpoint is given for a filesystem whose type is
     declared to be `swap'.

malformed IP dotted quad: ADDRESS
     If the Internet address of an interface is incorrectly specified.
     An Internet address definition is handled to inet_addr(3N) to see
     if it can cope.  If not, then this message will be displayed.

malformed netmask: NETMASK
     If the netmask cannot be decoded as though it were a hexadecimal
     number, then this message will be displayed.  It will typically be
     caused by incorrect characters in the NETMASK value.

mount field "FIELD-NAME" already set
     Occurs when a static mount has multiple definitions of the same
     field.

mount tree field "FIELD-NAME" already set
     Occurs when the FIELD-NAME is defined more than once during the
     definition of a filesystems mountpoint.

netif field FIELD-NAME already set
     Occurs if you attempt to define an attribute of an interface more
     than once.

network booting requires both root and swap areas
     Occurs if a machine has mount declarations for either the root
     partition or the swap area, but not both.  You cannot define a
     machine to only partially boot via the network.

no disk mounts on HOSTNAME
     If there are no static mounts, nor local disk mounts specified for
     a machine, this message will be displayed.

no volname given for HOST:DEVICE
     Occurs when a filesystem is defined to be mounted on `default', but
     no volume name is given for the file system, then the mountpoint
     cannot be determined.

not allowed '/' in a directory name
     Occurs when a pathname with multiple directory elements is
     specified as the name for an automounter tree.  A tree should only
     have one name at each level.

pass number for HOST:DEVICE is non-zero
     Occurs if DEVICE has its `fstype' declared to be `swap' or
     `export' and the fsck(8) pass number is set. Swap devices should
     not be fsck'd.  *Note FSinfo filesystems fstype::.

sub-directory DIRECTORY of DIRECTORY-TREE starts with '/'
     Within the filesystem specification for a host, if an element
     DIRECTORY of the mountpoint begins with a `/' and it is not the
     start of the tree.

sub-directory of DIRECTORY-TREE is named "default"
     `default' is a keyword used to specify if a mountpoint should be
     automatically calculated by FSinfo.  If you attempt to specify a
     directory name as this, it will use the filename of `default' but
     will produce this warning.

unknown \ sequence
     Occurs if an unknown escape sequence is found inside a string.
     Within a string, you can give the standard C escape sequences for
     strings, such as newlines and tab characters.

unknown directory attribute
     If an unknown keyword is found while reading the definition of a
     host's filesystem mount option.

unknown filesystem attribute
     Occurs if an unrecognized keyword is used when defining a host's
     filesystems.

unknown host attribute
     Occurs if an unrecognized keyword is used when defining a host.

unknown mount attribute
     Occurs if an unrecognized keyword is found while parsing the list
     of static mounts.

unknown volname VOLUME automounted [ on name ]
     Occurs if VOLUME is used in a definition of an automount map but
     the volume name has not been declared during the host filesystem
     definitions.

volname VOLUME is unknown
     Occurs if an attempt is made to mount or reference a volume name
     which has not been declared during the host filesystem definitions.

volname VOLUME not exported from MACHINE
     Occurs if you attempt to mount the volume VOLUME from a machine
     which has not declared itself to have such a filesystem available.


File: am-utils.info,  Node: Hlfsd,  Next: Assorted Tools,  Prev: FSinfo,  Up: Top

Hlfsd
*****

   Hlfsd is a daemon which implements a filesystem containing a
symbolic link to subdirectory within a user's home directory, depending
on the user which accessed that link.  It was primarily designed to
redirect incoming mail to users' home directories, so that it can be
read from anywhere.  It was designed and implemented by
Erez Zadok <ezk@cs.columbia.edu> and Alexander Dupuy <dupuy@cs.columbia.edu>, at the Computer Science Department
(http://www.cs.columbia.edu/) of Columbia University (http://www.columbia.edu/).  A
paper (http://www.cs.columbia.edu/~ezk/research/hlfsd/hlfsd.html) on
Hlfsd was presented at the Usenix LISA VII conference in 1993.

   Hlfsd operates by mounting itself as an NFS server for the directory
containing linkname, which defaults to `/hlfs/home'.  Lookups within
that directory are handled by Hlfsd, which uses the password map to
determine how to resolve the lookup.  The directory will be created if
it doesn't already exist.  The symbolic link will be to the accessing
user's home directory, with subdir appended to it.  If not specified,
subdir defaults to `.hlfsdir'.  This directory will also be created if
it does not already exist.

   A `SIGTERM' sent to Hlfsd will cause it to shutdown.  A `SIGHUP' will
flush the internal caches, and reload the password map.  It will also
close and reopen the log file, to enable the original log file to be
removed or rotated.  A `SIGUSR1' will cause it to dump its internal
table of user IDs and home directories to the file `/tmp/hlfsddump'.

* Menu:

* Introduction to Hlfsd::
* Background to Mail Delivery::
* Using Hlfsd::


File: am-utils.info,  Node: Introduction to Hlfsd,  Next: Background to Mail Delivery,  Prev: Hlfsd,  Up: Hlfsd

Introduction to Hlfsd
=====================

   Electronic mail has become one of the major applications for many
computer networks, and use of this service is expected to increase over
time, as networks proliferate and become faster.  Providing a convenient
environment for users to read, compose, and send electronic mail has
become a requirement for systems administrators (SAs).

   Widely used methods for handling mail usually require users to be
logged into a designated "home" machine, where their mailbox files
reside.  Only on that one machine can they read newly arrived mail.
Since users have to be logged into that system to read their mail, they
often find it convenient to run all of their other processes on that
system as well, including memory and CPU-intensive jobs.  For example,
in our department, we have allocated and configured several
multi-processor servers to handle such demanding CPU/memory
applications, but these were underutilized, in large part due to the
inconvenience of not being able to read mail on those machines.  (No
home directories were located on these designated CPU-servers, since we
did not want NFS service for users' home directories to have to compete
with CPU-intensive jobs.  At the same time, we discouraged users from
running demanding applications on their home machines.)

   Many different solutions have been proposed to allow users to read
their mail on any host.  However, all of these solutions fail in one or
more of several ways:

   * they introduce new single points of failure

   * they require using different mail transfer agents (MTAs) or user
     agents (UAs)

   * they do not solve the problem for all cases, i.e.  the solution is
     only partially successful for a particular environment.

   We have designed a simple filesystem, called the "Home-Link File
System", to provide the ability to deliver mail to users' home
directories, without modification to mail-related applications. We have
endeavored to make it as stable as possible.  Of great importance to us
was to make sure the HLFS daemon, `hlfsd' , would not hang under any
circumstances, and would take the next-best action when faced with
problems.  Compared to alternative methods, Hlfsd is a stable, more
general solution, and easier to install/use.  In fact, in some ways, we
have even managed to improve the reliability and security of mail
service.

   Our server implements a small filesystem containing a symbolic link
to a subdirectory of the invoking user's home directory, and named
symbolic links to users' mailbox files.

   The Hlfsd server finds out the UID of the process that is accessing
its mount point, and resolves the pathname component `home' as a
symbolic link to a subdirectory within the home directory given by the
UID's entry in the password file.  If the GID of the process that
attempts to access a mailbox file is a special one (called HLFS_GID),
then the server maps the name of the *next* pathname component directly
to the user's mailbox.  This is necessary so that access to a mailbox
file by users other than the owner can succeed.  The server has safety
features in case of failures such as hung filesystems or home directory
filesystems that are inaccessible or full.

   On most of our machines, mail gets delivered to the directory
`/var/spool/mail'. Many programs, including UAs, depend on that path.
Hlfsd creates a directory `/mail', and mounts itself on top of that
directory.  Hlfsd implements the path name component called `home',
pointing to a subdirectory of the user's home directory.  We have made
`/var/spool/mail' a symbolic link to `/mail/home', so that accessing
`/var/spool/mail' actually causes access to a subdirectory within a
user's home directory.

   The following table shows an example of how resolving the pathname
`/var/mail/NAME' to `/users/ezk/.mailspool/NAME' proceeds.

Resolving Component  Pathname left to resolve  Value if symbolic link  
/                    var/mail/NAME                                     
var/                 mail/NAME                                         
mail@                /mail/home/NAME           mail@ -> /mail/home     
/                    mail/home/NAME                                    
mail/                home/NAME                                         
home@                NAME                      home@ ->                
                                               /users/ezk/.mailspool   
/                    users/ezk/.mailspool/NAME                         
users/               ezk/.mailspool/NAME                               
ezk/                 .mailspool/NAME                                   
.mailspool/          NAME                                              
NAME                                                                   


File: am-utils.info,  Node: Background to Mail Delivery,  Next: Using Hlfsd,  Prev: Introduction to Hlfsd,  Up: Hlfsd

Background to Mail Delivery
===========================

   This section provides an in-depth discussion of why available methods
for delivering mail to home directories are not as good as the one used
by Hlfsd.

* Menu:

* Single-Host Mail Spool Directory::
* Centralized Mail Spool Directory::
* Distributed Mail Spool Service::
* Why Deliver Into the Home Directory?::


File: am-utils.info,  Node: Single-Host Mail Spool Directory,  Next: Centralized Mail Spool Directory,  Prev: Background to Mail Delivery,  Up: Background to Mail Delivery

Single-Host Mail Spool Directory
--------------------------------

   The most common method for mail delivery is for mail to be appended
to a mailbox file in a standard spool directory on the designated "mail
home" machine of the user. The greatest advantage of this method is
that it is the default method most vendors provide with their systems,
thus very little (if any) configuration is required on the SA's part.
All they need to set up are mail aliases directing mail to the host on
which the user's mailbox file is assigned.  (Otherwise, mail is
delivered locally, and users find mailboxes on many machines.)

   As users become more sophisticated, and aided by windowing systems,
they find themselves logging in on multiple hosts at once, performing
several tasks concurrently.  They ask to be able to read their mail on
any host on the network, not just the one designated as their "mail
home".

