.\"    $NetBSD: npf.conf.5,v 1.17 2012/09/28 18:36:02 spz Exp $
.\"
.\" Copyright (c) 2009-2012 The NetBSD Foundation, Inc.
.\" All rights reserved.
.\"
.\" This material is based upon work partially supported by The
.\" NetBSD Foundation under a contract with Mindaugas Rasiukevicius.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
.\" ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
.\" TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
.\" PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
.\" BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
.\" CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
.\" SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
.\" INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
.\" CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
.\" ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
.\" POSSIBILITY OF SUCH DAMAGE.
.\"
.Dd September 26, 2012
.Dt NPF.CONF 5
.Os
.Sh NAME
.Nm npf.conf
.Nd NPF packet filter configuration file
.\" -----
.Sh DESCRIPTION
.Nm
is the default configuration file for the NPF packet filter.
.Pp
The minimal
.Nm
consists of the mandatory
.Cd default group.
.Pp
.Nm
may also contain variable and
.Cd table
definitions (with or without content), packet filtering
.Cd rule
and address translation
.Cd map
instructions and
.Cd procedure
definitions to call with select packets.
.Pp
This man page is supposed to serve as a reference for editing npf.conf.
For in-depth information about the behaviour of NPF please
consult the documentation in /usr/share/doc/npf.
.Sh GRAMMAR
The following is a non-formal BNF-like definition of the grammar.
The definition is simplified and is intended to be human readable,
therefore it does not strictly represent the full syntax, which
is more flexible.
.Bd -literal
; Syntax of a single line.  Lines can be separated by LF (\n) or
; a semicolon.  Comments start with a hash (#) character.

syntax		= var-def | table-def | map | group | rproc | comment

; Variable definition.  Names can be alpha-numeric, including "_" character.

var-name	= "$" . string
interface	= interface-name | var-name
var-def		= var "=" ( var-value | "{" value *[ "," value ] "}" )

; Table definition.  Table ID shall be numeric.  Path is in the double quotes.

table-id	= \*[Lt]tid\*[Gt]
table-def	= "table" table-id "type" ( "hash" | "tree" )
		  ( "dynamic" | "file" path )

; Mapping for address translation.

map		= "map" interface ( "static" | "dynamic" )
		  net-seg ( "->" | "<-" | "<->" ) net-seg
		  [ "pass" filt-opts ]

; Rule procedure definition.  The name should be in the double quotes.
; 
; Each call can have its own options in a form of key-value pairs.
; Both key and values may be strings (either in double quotes or not)
; and numbers, depending on the extension.

proc		= "procedure" proc-name "{" *( proc-call [ new-line ] ) "}"
proc-opts	= key " " val [ "," proc-opts ]
proc-call	= call-name ":" proc-opts new-line

; Group definition and the ruleset.

group		= "group" "(" ( "default" | group-opts ) ")" "{" ruleset "}"
group-opts	= [ "name" string ] [ "interface" interface ] [ "in" | "out" ]
ruleset		= [ rule new-line ] [ ruleset ]

rule		= ( "block" [ block-opts ] | "pass" ) [ "stateful" ]
		  [ "in" | out" ] [ "final" ] [ "on" iface ]
		  [ "family" fam-opt ] [ "proto" protocol [ proto-opts ] ]
		  ( "all" | filt-opts ) [ "apply" proc-name ]

block-opts	= "return-rst" | "return-icmp" | "return"
fam-opt		= "inet" | "inet6"
proto-opts	= "flags" tcp-flags [ "/" tcp-flag-mask ] |
		  "icmp-type" type [ "code" icmp-code ]

addr-mask	= addr [ "/" mask ]
filt-opts	= "from" filt-addr [ port-opts ] "to" filt-addr [ port-opts ]
filt-addr	= [ interface | var-name | addr-mask | table-id | "any" ]
filt-port	= "port" ( port-num | port-from "-" port-to | var-name )
.Ed
.\" -----
.Sh FILES
.Bl -tag -width /dev/npf.conf -compact
.It Pa /dev/npf
control device
.It Pa /etc/npf.conf
default configuration file
.It Pa /usr/share/examples/npf
directory containing further examples
.El
.\" -----
.Sh EXAMPLES
.Bd -literal
$ext_if = "wm0"
$int_if = "wm1"

table <1> type hash file "/etc/npf_blacklist"
table <2> type tree dynamic

$services_tcp = { http, https, smtp, domain, 6000, 9022 }
$services_udp = { domain, ntp, 6000 }
$localnet = { 10.1.1.0/24 }

# Note: if $ext_if has multiple IP address (e.g. IPv6 as well),
# then the translation address has to be specified explicitly.
map $ext_if dynamic 10.1.1.0/24 -> $ext_if
map $ext_if dynamic 10.1.1.2 port 22 <- $ext_if 9022

procedure "log" {
	log: npflog0
}

group (name "external", interface $ext_if) {
	pass stateful out final from $ext_if

	block in final from \*[Lt]1\*[Gt]
	pass stateful in final family inet proto tcp to $ext_if port ssh apply "log"
	pass stateful in final proto tcp to $ext_if port $services_tcp
	pass stateful in final proto udp to $ext_if port $services_udp
	pass stateful in final proto tcp to $ext_if port 49151-65535	# Passive FTP
	pass stateful in final proto udp to $ext_if port 33434-33600	# Traceroute
}

group (name "internal", interface $int_if) {
	block in all
	pass in final from \*[Lt]2\*[Gt]
	pass out final all
}

group (default) {
	pass final on lo0 all
	block all
}
.Ed
.\" -----
.Sh SEE ALSO
.Xr npfctl 8 ,
.Xr npf_ncode 9
.Sh HISTORY
NPF first appeared in
.Nx 6.0 .
.Sh AUTHORS
NPF was designed and implemented by
.An Mindaugas Rasiukevicius .
