.\" $NetBSD: openpgpsdk.3,v 1.2 2009/01/31 14:16:34 wiz Exp $
.\"
.\" Copyright (c) 2009 The NetBSD Foundation, Inc.
.\" All rights reserved.
.\"
.\" This manual page is derived from software contributed to The
.\" NetBSD Foundation by Alistair Crooks (agc@NetBSD.org)
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
.\" ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
.\" TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
.\" PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
.\" BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
.\" CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
.\" SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
.\" INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
.\" CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
.\" ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
.\" POSSIBILITY OF SUCH DAMAGE.
.\"
.Dd January 30, 2009
.Dt LIBOPENPGPSDK 3
.Os
.Sh NAME
.Nm openpgpsdk
.Nd digital signing and verification, encryption and decryption
.Sh LIBRARY
.Lb libopenpgpsdk
.Sh SYNOPSIS
.In openpgpsdk/openpgpsdk.h
.Ft ops_boolean_t
.Fo ops_decrypt_file
.Fa "const char *input_filename" "const char *output_filename" "ops_keyring_t *keyring"
.Fa "const ops_boolean_t use_armour" "const ops_boolean_t allow_overwrite"
.Fa "ops_parse_cb_t *cb_get_passphrase"
.Fc
.Ft ops_secret_key_t *
.Fo ops_decrypt_secret_key_from_data
.Fa "const ops_keydata_t * key" "const char *pphrase"
.Fc
.Ft ops_boolean_t
.Fo ops_encrypt_file
.Fa "const char *input_filename" "const char *output_filename" "const ops_keydata_t * pub_key"
.Fa "const ops_boolean_t use_armour" "const ops_boolean_t allow_overwrite"
.Fc
.Ft int
.Fo ops_get_debug_level
.Fa "const char *f"
.Fc
.Ft unsigned
.Fo ops_get_keydata_content_type
.Fa "const ops_keydata_t * keydata"
.Fc
.Ft void
.Fo ops_keydata_free
.Fa "ops_keydata_t * keydata"
.Fc
.Ft const ops_keydata_t *
.Fo ops_keyring_find_key_by_id
.Fa "const ops_keyring_t *keyring" "const unsigned char keyid[OPS_KEY_ID_SIZE]"
.Fc
.Ft const ops_keydata_t *
.Fo ops_keyring_find_key_by_userid
.Fa "const ops_keyring_t * keyring" "const char *userid"
.Fc
.Ft void
.Fo ops_keyring_free
.Fa "ops_keyring_t * keyring"
.Fc
.Ft void
.Fo ops_keyring_list
.Fa "const ops_keyring_t * keyring"
.Fc
.Ft ops_boolean_t
.Fo ops_keyring_read_from_file
.Fa "ops_keyring_t *keyring" "const ops_boolean_t armour" "const char *filename"
.Fc
.Ft void
.Fo ops_list_packets
.Fa "char *filename" "ops_boolean_t armour" "ops_keyring_t *keyring" "ops_parse_cb_t *cb_get_passphrase"
.Fc
.Ft void *
.Fo ops_memory_get_data
.Fa "ops_memory_t *mem"
.Fc
.Ft void
.Fo ops_print_public_keydata
.Fa "const ops_keydata_t *key"
.Fc
.Ft ops_keydata_t  *
.Fo ops_rsa_create_selfsigned_keypair
.Fa "const int numbits" "const unsigned long e" "ops_user_id_t *userid"
.Fc
.Ft int
.Fo ops_set_debug_level
.Fa "const char *f"
.Fc
.Ft int
.Fo ops_setup_file_append
.Fa "ops_create_info_t **cinfo" "const char *filename"
.Fc
.Ft void
.Fo ops_setup_memory_write
.Fa "ops_create_info_t ** cinfo" "ops_memory_t ** mem" "size_t bufsz"
.Fc
.Ft const char *
.Fo ops_show_pka
.Fa "ops_public_key_algorithm_t pka"
.Fc
.Ft ops_boolean_t
.Fo ops_sign_file
.Fa "const char *input_filename" "const char *output_filename"
.Fa "const ops_secret_key_t *skey" "const ops_boolean_t use_armour" "const ops_boolean_t overwrite"
.Fc
.Ft ops_boolean_t
.Fo ops_sign_file_as_cleartext
.Fa "const char *input_filename" "const char *output_filename"
.Fa "const ops_secret_key_t * skey" "const ops_boolean_t overwrite"
.Fc
.Ft int
.Fo ops_teardown_file_write
.Fa "ops_create_info_t ** cinfo" "const char *filename" "ops_boolean_t allow_overwrite"
.Fc
.Ft void
.Fo ops_teardown_memory_write
.Fa "ops_create_info_t * cinfo" "ops_memory_t * mem"
.Fc
.Ft ops_boolean_t
.Fo ops_validate_file
.Fa "ops_validate_result_t *result" "const char *filename"
.Fa "const int armoured" "const ops_keyring_t *keyring"
.Fc
.Ft void
.Fo ops_validate_result_free
.Fa "ops_validate_result_t *result"
.Fc
.Ft ops_boolean_t
.Fo ops_write_transferable_public_key
.Fa "const ops_keydata_t *keydata" "ops_boolean_t armoured" "ops_create_info_t *info"
.Fc
.Ft ops_boolean_t
.Fo ops_write_transferable_secret_key
.Fa "const ops_keydata_t *keydata" "const unsigned char *passphrase"
.Fa "const size_t pplen" "ops_boolean_t armoured" "ops_create_info_t *info"
.Fc
.Sh DESCRIPTION
.Nm
is a library interface to enable digital signatures to be created and
verified, and also for files and memory to be encrypted and decrypted.
Functions are also provided for management of user keys.
.Pp
The library uses functions from the openssl library for multi-precision
integer arithmetic, and for RSA and DSA key signing and verification,
encryption and decryption.
.Sh SEE ALSO
.Xr openpgp 1 ,
.Xr ssl 3
.Sh HISTORY
The
.Nm
library first appeared in
.Nx 6.0 .
.Sh AUTHORS
.An Ben Laurie
.An Rachel Willmer
.Pp
This manual page was written by
.An Alistair Crooks Aq agc@NetBSD.org .
