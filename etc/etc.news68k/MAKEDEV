#!/bin/sh -
#
#	$NetBSD: MAKEDEV,v 1.30 2003/08/30 11:00:32 dsl Exp $
#
# Copyright (c) 1990 The Regents of the University of California.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. All advertising materials mentioning features or use of this software
#    must display the following acknowledgement:
#	This product includes software developed by the University of
#	California, Berkeley and its contributors.
# 4. Neither the name of the University nor the names of its contributors
#    may be used to endorse or promote products derived from this software
#    without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
#	@(#)MAKEDEV	5.5 (Berkeley) 5/28/91
#
###########################################################################
#
#   PLEASE RUN "cd ../share/man/man8 ; make makedevs"
#   AFTER CHANGING THIS FILE, AND COMMIT THE UPDATED MANPAGE!
#
###########################################################################
#
# Device "make" file.  Valid arguments:
#	std	standard devices
#	local	configuration specific devices
# Tapes:
#	st*	? tape
# Disks:
#	sd*	SCSI disks
#	cd*	SCSI cdrom drives
#	st*	SCSI tape
#	ch*	SCSI media changer
#	vnd*	"file" pseudo-disks
#	ccd*	concatenated disk devices
#	cgd*	cryptographic disk devices
#	raid*	RAIDframe disk devices
#	md*	memory pseudo-disk devices
# Pseudo terminals:
#	pty*	set of 62 master and slave pseudo terminals
#	opty	first 16 ptys, to save inodes on install media
# Special purpose devices:
#	clockctl clock control for non root users
#	fd	file descriptors
#	bpf*	packet filter
#	lkm	loadable kernel modules interface
#	tun*	network tunnel driver
#	ipl	IP Filter
#	pf	PF packet filter
#	crypto	hardware crypto access driver
#	random	Random number generator
#	scsibus* SCSI busses, see scsi(4), scsictl(8)
#	ss*	SCSI scanner
#	uk*	unknown SCSI device
#	systrace syscall tracer

PATH=/sbin:/usr/sbin:/bin:/usr/bin
umask 77

# Check if we have fdesc mounted
if [ -d fd ]; then
	case "`df fd`" in
	*fdesc*) nofdesc=false;;
	*) nofdesc=true;;
	esac
else
	nofdesc=true
fi

makedev()
{

for i
do
case $i in

init|all)
	makedev std fd sd0 sd1 sd2 sd3 cd0 st0 st1
	makedev pty0 tty0 tty1
	makedev vnd0 vnd1 vnd2 vnd3 ccd0 ccd1 ccd2 ccd3 md0 md1
	makedev cgd0 cgd1 cgd2 cgd3
	makedev tun0 tun1 tun2 tun3
	makedev raid0 raid1 raid2 raid3 raid4 raid5 raid6 raid7
	makedev bpf0 bpf1 bpf2 bpf3 bpf4 bpf5 bpf6 bpf7
	makedev scsibus0 scsibus1 scsibus2 scsibus3
	makedev ipl pf crypto raid0 raid1 raid2 raid3
	makedev lkm random local
	makedev clockctl
	makedev systrace
	;;

floppy)
	makedev std sd0 sd1 sd2 sd3 cd0 st0 st1
	makedev opty tty0 tty1 md0
	;;

std)
	rm -f console kmem mem null zero drum klog fb mouse kbd ksyms
	mknod console		c 0 0
	mknod kmem		c 3 1	; chmod 640 kmem ; chgrp kmem kmem
	mknod mem		c 3 0	; chmod 640 mem ; chgrp kmem mem
	mknod null		c 3 2	; chmod 666 null
	mknod zero		c 3 12	; chmod 666 zero
	mknod drum		c 7 0	; chmod 640 drum ; chgrp kmem drum
	mknod klog		c 33 0	; chmod 600 klog
	mknod ksyms		c 79 0	; chmod 444 ksyms
	if $nofdesc; then
		rm -f tty stdin stdout stderr
		mknod tty	c 2 0	; chmod 666 tty
		mknod stdin	c 48 0	; chmod 666 stdin
		mknod stdout	c 48 1	; chmod 666 stdout
		mknod stderr	c 48 2	; chmod 666 stderr
	fi

	mknod fb		c 14 0 ; chmod 666 fb
	mknod mouse		c 12 0 ; chmod 666 mouse
	mknod kbd		c 11 0 ; chmod 666 kbd
	;;

fd)
	if $nofdesc; then
		rm -f fd/*
		mkdir fd 2>/dev/null
		n=0
		while [ $n -lt 64 ]; do
			mknod fd/$n c 22 $n
			n=$(($n + 1))
		done
		chmod 755 fd
		chmod 666 fd/*
	fi
	;;

audio)
	rm -f audio sound mixer
	mknod audio		c 35 0
	mknod mixer		c 35 16
	mknod sound		c 35 128
	chmod 666 audio sound mixer
	;;

bpf*)
	unit=${i#bpf}
	rm -f bpf$unit
	mknod bpf$unit c 24 $unit
	chmod 600 bpf$unit
	;;

tun*)
	unit=${i#tun}
	rm -f tun$unit
	mknod tun$unit c 25 $unit
	chmod 600 tun$unit
	;;

md*)
	unit=${i#md}; blk=2; chr=10
	rm -f md${unit}? rmd${unit}?
	mknod md${unit}a  b $blk $(($unit * 8 + 0))
	mknod md${unit}c  b $blk $(($unit * 8 + 2))
#	mknod rmd${unit}a c $chr $(($unit * 8 + 0))
#	mknod rmd${unit}c c $chr $(($unit * 8 + 2))
	chgrp operator md${unit}? #rmd${unit}?
	chmod 640 md${unit}? #rmd${unit}?
	;;

ccd*|cgd*|fd*|sd*|cd*|vnd*|raid*)
	umask 2
	case $i in
	ccd*)	name=ccd;	unit=${i#ccd};	blk=7;	chr=49;;
	cgd*)	name=cgd;	unit=${i#cgd};	blk=33;	chr=78;;
	raid*)	name=raid;	unit=${i#raid}; blk=32; chr=74;;
	fd*)	name=fd;	unit=${i#fd};	blk=1;	chr=5;;
	sd*)	name=sd;	unit=${i#sd};	blk=0;	chr=4;;
	cd*)	name=cd;	unit=${i#cd};	blk=16;	chr=55;;
	vnd*)	name=vnd;	unit=${i#vnd};	blk=6;	chr=50;;
	esac
	case $unit in
	0|1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|\
	17|18|19|20|21|22|23|24|25|26|27|28|29|30|31)
		rm -f ${name}${unit}[a-h] r${name}${unit}[a-h]
		mknod ${name}${unit}c	b $blk $(($unit * 8 + 2))
		mknod ${name}${unit}a	b $blk $(($unit * 8 + 0))
		mknod ${name}${unit}b	b $blk $(($unit * 8 + 1))
		mknod ${name}${unit}d	b $blk $(($unit * 8 + 3))
		mknod ${name}${unit}e	b $blk $(($unit * 8 + 4))
		mknod ${name}${unit}f	b $blk $(($unit * 8 + 5))
		mknod ${name}${unit}g	b $blk $(($unit * 8 + 6))
		mknod ${name}${unit}h	b $blk $(($unit * 8 + 7))
		mknod r${name}${unit}a	c $chr $(($unit * 8 + 0))
		mknod r${name}${unit}b	c $chr $(($unit * 8 + 1))
		mknod r${name}${unit}c	c $chr $(($unit * 8 + 2))
		mknod r${name}${unit}d	c $chr $(($unit * 8 + 3))
		mknod r${name}${unit}e	c $chr $(($unit * 8 + 4))
		mknod r${name}${unit}f	c $chr $(($unit * 8 + 5))
		mknod r${name}${unit}g	c $chr $(($unit * 8 + 6))
		mknod r${name}${unit}h	c $chr $(($unit * 8 + 7))
		chgrp operator ${name}${unit}[a-h] r${name}${unit}[a-h]
		chmod 640 ${name}${unit}[a-h] r${name}${unit}[a-h]
		;;
	*)
		echo bad unit for disk in: $i
		;;
	esac
	umask 77
	;;

st*)
	umask 2
	case $i in
	st*) name=st; unit=${i#st}; blk=17; chr=16;;
	esac
	rm -f $name$unit n$name$unit e$name$unit en$name$unit \
		r$name$unit nr$name$unit er$name$unit enr$name$unit
	mknod ${name}${unit}	b $blk $(($unit * 16 + 0))
	mknod n${name}${unit}	b $blk $(($unit * 16 + 1))
	mknod e${name}${unit}	b $blk $(($unit * 16 + 2))
	mknod en${name}${unit}	b $blk $(($unit * 16 + 3))
	mknod r${name}${unit}	c $chr $(($unit * 16 + 0))
	mknod nr${name}${unit}	c $chr $(($unit * 16 + 1))
	mknod er${name}${unit}	c $chr $(($unit * 16 + 2))
	mknod enr${name}${unit}	c $chr $(($unit * 16 + 3))
	chgrp operator ${name}${unit} n${name}${unit} \
		e$name$unit en$name$unit \
		r${name}${unit} nr${name}${unit} \
		er${name}${unit} enr${name}${unit}
	chmod 640 ${name}${unit} n${name}${unit} \
		e$name$unit en$name$unit \
		r${name}${unit} nr${name}${unit} \
		er${name}${unit} enr${name}${unit}
	umask 77
	;;

ss*)
	case $i in
	ss*) name=ss;	unit=${i#ss};	chr=56;;
	esac
	rm -f $name$unit n$name$unit
	mknod $name$unit	c $chr $(($unit * 16 + 0))
	mknod n$name$unit	c $chr $(($unit * 16 + 1))
	chgrp operator $name$unit n$name$unit
	chmod 640 $name$unit n$name$unit
	;;

ch*|uk*)
	case $i in
	ch*) name=ch;  unit=${i#ch}; chr=57;;
	uk*) name=uk;  unit=${i#uk}; chr=54;;
	esac
	rm -f $name$unit
	mknod ${name}${unit}	c $chr $(($unit * 16 + 0))
	chgrp operator ${name}${unit}
	chmod 640 ${name}${unit}
	umask 77
	;;

lkm)
	rm -f lkm
	mknod lkm c 45 0
	chgrp kmem lkm
	chmod 640 lkm
	;;

ipl)
	rm -f ipl ipnat ipstate ipauth
	mknod ipl c 46 0
	mknod ipnat c 46 1
	mknod ipstate c 46 2
	mknod ipauth c 46 3
	chmod 600 ipl ipnat ipstate ipauth
	;;

pf)
	rm -f pf
	mknod pf c 80 0
	chmod 600 pf
	;;

crypto)
	rm -f crypto
	mknod crypto c 81 0
	chmod 666 crypto
	;;

opty)
	rm -f ttyp[0-9a-f] ptyp[0-9a-f]
	for j in 0 1 2 3 4 5 6 7 8 9 a b c d e f
	do
		case $j in
		[0-9])	jn=$j ;;
		a)	jn=10 ;;
		b)	jn=11 ;;
		c)	jn=12 ;;
		d)	jn=13 ;;
		e)	jn=14 ;;
		f)	jn=15 ;;
		esac
		mknod ttyp$j c 8 $jn
		mknod ptyp$j c 9 $jn
	done
	chmod 666 ttyp[0-9a-f] ptyp[0-9a-f]
	;;

pty*)
	class=${i#pty}
	set -- p q r s t u v w x y z P Q R S T
	if [ "$class" -ge $# ]; then
		echo "$MAKEDEV: $i: pty unit must be between 0 and 15"
		continue
	fi
	shift $class
	name=$1
	if [ "$name" = v ]; then
		echo "$MAKEDEV: $i: pty unit conflicts with console ttyv0 device."
		continue
	fi
	rm -f tty$name[0-9a-zA-Z] pty$name[0-9a-zA-Z]
	jn=0
	unit=$(($class * 16))
	names=
	set -- - 0 1 2 3 4 5 6 7 8 9 a b c d e f g h i j k l m n o p q r s t u v w x y z A B C D E F G H I J K L M N O P Q R S T U V W X Y Z
	while
		shift
		j=$1
		[ -n "$j" ]
	do
		if [ $j = g ]; then
			unit=$(($unit + $class * 30 + 256 - 16))
		fi
		mknod tty$name$j c 5 $unit
		mknod pty$name$j c 6 $unit
		names="$names tty$name$j pty$name$j"
		unit=$(($unit + 1))
	done
	chmod 666 $names
	unset names
	;;

tty*)
	unit=${i#???}
	rm -f tty0$unit
	mknod tty0$unit c 1 $unit
	chown uucp tty0$unit
	;;

random)
	rm -f random urandom
	mknod random c 47 0
	mknod urandom c 47 1
	chmod 444 random
	chmod 644 urandom
	;;

scsibus*)
	unit=${i#scsibus}
	rm -f scsibus$unit
	mknod scsibus$unit c 73 $unit
	chmod 644 scsibus$unit
	;;

clockctl)
	rm -f clockctl
	mknod clockctl c 76 0
	chgrp ntpd clockctl
	chmod 660 clockctl
	;;

systrace)
	rm -f systrace
	mknod systrace c 77 0
	chmod 644 systrace
	;;

local)
	if [ -f "$0.local" ]; then
		umask 0
		sh $0.local all
		umask 77
	fi
	;;

*)
	echo $i: unknown device
	;;
esac
done

}

makedev $*
