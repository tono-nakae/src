#!/bin/sh -
#
#	$NetBSD: MAKEDEV,v 1.3 2002/01/13 14:26:39 manu Exp $
#
# Copyright (c) 1990 The Regents of the University of California.
# All rights reserved.
#
# Redistribution and use in source and binary forms are permitted provided
# that: (1) source distributions retain this entire copyright notice and
# comment, and (2) distributions including binaries display the following
# acknowledgement:  ``This product includes software developed by the
# University of California, Berkeley and its contributors'' in the
# documentation or other materials provided with the distribution and in
# all advertising materials mentioning features or use of this software.
# Neither the name of the University nor the names of its contributors may
# be used to endorse or promote products derived from this software without
# specific prior written permission.
# THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
#
#	@(#)MAKEDEV	5.2 (Berkeley) 6/22/90
#
###########################################################################
#
#   PLEASE RUN "cd ../share/man/man8 ; perl5 MAKEDEV2manpage.pl"
#   AFTER CHANGING THIS FILE, AND COMMIT THE UPDATED MANPAGE!
#
###########################################################################
#
# Device "make" file.  Valid arguments:
#	all	makes all known devices, including local devices.
#		Tries to make the 'standard' number of each type.
#	std	standard devices
#	ramdisk	devices to be put into INSTALL kernel ramdisks.
#
# Disks:
#	wd*	"winchester" disk drives (ST506,IDE,ESDI,RLL,...)
#	vnd*	"file" pseudo-disks
#	md*	memory pseudo-disk devices
#	ccd*	contatenated disk devices
#	raid*	RAIDframe disk devices
#
# Console ports:
#	ttyE*	wscons
#
# Pointing devices:
#	wsmouse* wscons mouse events
#
# Keyboard devices:
#	wskbd*	wscons keyboard events
#
# Pseudo terminals:
#	pty*	set of 16 master and slave pseudo terminals
#
# Special purpose devices:
#	clockctl clock control for non root users
#	fd	file descriptors
#	bpf*	packet filter
#	ipl	ip filter
#	random	Random number generator
#	tun*	network tunnel driver
#

dialin=0
dialout=524288		# high bit of the minor number
callunit=262144

PATH=/sbin:/usr/sbin:/bin:/usr/bin
umask 77

for i
do

case $i in

all)
	sh $0 std fd wd0 wd1
	sh $0 wscons
	sh $0 pty0 pty1 pty2 pty3
	sh $0 bpf0 bpf1 bpf2 bpf3
	sh $0 vnd0 vnd1 vnd2 vnd3
	sh $0 random
	sh $0 ipl
	sh $0 tun0 tun1
	sh $0 md0
	sh $0 usbs
	sh $0 clockctl
	;;

std)
	rm -f console drum mem kmem null zero io tty klog stdin stdout stderr
	mknod console		c 2 0
	mknod drum		c 1 0	; chmod 640 drum ; chgrp kmem drum
	mknod kmem		c 0 1	; chmod 640 kmem ; chgrp kmem kmem
	mknod mem		c 0 0	; chmod 640 mem	; chgrp kmem mem
	mknod null		c 0 2	; chmod 666 null
	mknod zero		c 0 12	; chmod 666 zero
	mknod io		c 0 14	; chmod 640 io ; chgrp kmem io
	mknod tty		c 3 0	; chmod 666 tty
	mknod klog		c 5 0	; chmod 600 klog
	mknod stdin		c 4 0	; chmod 666 stdin
	mknod stdout		c 4 1	; chmod 666 stdout
	mknod stderr		c 4 2	; chmod 666 stderr
	;;

ramdisk)
	sh $0 md0
	;;

wscons)
	sh $0 ttyE0 ttyE1 ttyE2 ttyE3 ttyE4 ttyE5 ttyE6 ttyE7
	sh $0 wsmouse0 wsmouse1 wsmouse2 wsmouse3
	sh $0 wskbd0 wskbd1 wskbd2 wskbd3
	sh $0 wsmux0 wsmux1 wsmux2 wsmux3
	sh $0 wsmouse wskbd
	sh $0 ttyEcfg
	;;

ttyEcfg)
	chr=27
	rm -f ttyEcfg
	mknod ttyEcfg c $chr 255
	chown root.wheel ttyEcfg
	chmod 600 ttyEcfg
	;;

ttyE*)
	chr=27; unit=${i#ttyE}
	rm -f ttyE$unit
	mknod ttyE$unit c $chr $unit
	chown root.wheel ttyE$unit
	;;

wsmouse)
	rm -f wsmouse
	mknod wsmouse c 30 0
	chown root.wheel wsmouse
	chmod 600 wsmouse
	;;

wskbd)
	rm -f wskbd
	mknod wskbd c 30 1
	chown root.wheel wskbd
	chmod 600 wskbd
	;;

wsmux*)
	unit=${i#wsmux}
	unitctl=$(($unit + 128))
	wsmux=wsmux$unit
	wsmuxctl=wsmuxctl$unit
	major=30
	rm -f $wsmux $wsmuxctl
	mknod $wsmux c $major $unit
	chown root.wheel $wsmux
	chmod 600 $wsmux
	mknod $wsmuxctl c $major $unitctl
	chown root.wheel $wsmuxctl
	chmod 200 $wsmuxctl
	;;

wsmouse*)
	unit=${i#wsmouse}
	wsmouse=wsmouse$unit
	major=29
	rm -f $wsmouse
	mknod $wsmouse c $major $unit
	chown root.wheel $wsmouse
	chmod 600 $wsmouse
	;;

wskbd*)
	unit=${i#wskbd}
	wskbd=wskbd$unit
	major=28
	rm -f $wskbd
	mknod $wskbd c $major $unit
	chown root.wheel $wskbd
	chmod 600 $wskbd
	;;

fd)
	rm -f fd/*
	mkdir fd > /dev/null 2>&1
	n=0
	while [ $n -lt 64 ]; do
		mknod fd/$n c 4 $n
		n=$(($n + 1))
	done
	chown -R root.wheel fd
	chmod 755 fd
	chmod 666 fd/*
	;;

md*)
	unit=${i#md}; blk=6; chr=12;
	rm -f md${unit}? rmd${unit}?
	mknod md${unit}a  b $blk $(($unit * 8 + 0))
	mknod md${unit}d  b $blk $(($unit * 8 + 3))
	chgrp operator md${unit}? #rmd${unit}?
	chmod 640 md${unit}? #rmd${unit}?
	;;      

ccd*|vnd*|wd*|raid*)
	case $i in
	ccd*) name=ccd;	unit=${i#ccd};	blk=7;	chr=13;;
	raid*) name=raid; unit=${i#raid}; blk=9; chr=15;;
	vnd*) name=vnd;	unit=${i#vnd};	blk=8;	chr=14;;
	wd*) name=wd;	unit=${i#wd};	blk=1;	chr=10;;
	esac
	rm -f $name$unit? r$name$unit?
	mknod ${name}${unit}a	b $blk $(($unit * 8 + 0))
	mknod ${name}${unit}b	b $blk $(($unit * 8 + 1))
	mknod ${name}${unit}c	b $blk $(($unit * 8 + 2))
	mknod ${name}${unit}d	b $blk $(($unit * 8 + 3))
	mknod ${name}${unit}e	b $blk $(($unit * 8 + 4))
	mknod ${name}${unit}f	b $blk $(($unit * 8 + 5))
	mknod ${name}${unit}g	b $blk $(($unit * 8 + 6))
	mknod ${name}${unit}h	b $blk $(($unit * 8 + 7))
	mknod r${name}${unit}a	c $chr $(($unit * 8 + 0))
	mknod r${name}${unit}b	c $chr $(($unit * 8 + 1))
	mknod r${name}${unit}c	c $chr $(($unit * 8 + 2))
	mknod r${name}${unit}d	c $chr $(($unit * 8 + 3))
	mknod r${name}${unit}e	c $chr $(($unit * 8 + 4))
	mknod r${name}${unit}f	c $chr $(($unit * 8 + 5))
	mknod r${name}${unit}g	c $chr $(($unit * 8 + 6))
	mknod r${name}${unit}h	c $chr $(($unit * 8 + 7))
	chgrp operator $name$unit? r$name$unit?
	chmod 640 $name$unit? r$name$unit?
	;;

pty*)
	class=${i#pty}
	case $class in
	0)      name=p;;
	1)      name=q;;
	2)      name=r;;
	3)      name=s;;
	4)      name=t;;
	5)      name=u;;
	6)      name=v;;
	7)      name=w;;
	8)      name=x;;
	9)      name=y;;
	10)     name=z;;
	11)     name=P;;
	12)     name=Q;;
	13)     name=R;;
	14)     name=S;;
	15)     name=T;;
	*)      echo "$0: $i: pty unit must be between 0 and 15"
	        continue ;;
	esac
	rm -f tty$name[0-9a-f] pty$name[0-9a-f]
	for j in 0 1 2 3 4 5 6 7 8 9 a b c d e f
	do
		case $j in
		[0-9])  jn=$j ;;
		a)      jn=10 ;;
		b)      jn=11 ;;
		c)      jn=12 ;;
		d)      jn=13 ;;
		e)      jn=14 ;;
		f)      jn=15 ;;
		esac
		unit=$(($class * 16 + $jn))
		mknod tty$name$j c 7 $unit
		mknod pty$name$j c 6 $unit
	done
        chgrp wheel tty$name? pty$name?
        chmod 666 tty$name? pty$name?
	;;

bpf*|tun*)
	case $i in
	bpf*) name=bpf;	unit=${i#bpf};	chr=25;;
	tun*) name=tun;	unit=${i#tun};	chr=24;;
	esac
	rm -f $name$unit
	mknod $name$unit	c $chr $unit
	chown root.wheel $name$unit
	;;

ipl)
	rm -f ipl ipnat ipstate ipauth
	mknod ipl c 23 0
	mknod ipnat c 23 1
	mknod ipstate c 23 2
	mknod ipauth c 23 3
	chown root.wheel ipl ipnat ipstate ipauth
	chmod 600 ipl ipnat ipstate ipauth
	;;

random)
	rm -f random urandom
	mknod random c 26 0
	mknod urandom c 26 1
	chown root.wheel random urandom
	chmod 444 random
	chmod 644 urandom
	;;

usbs)
	sh $0 usb usb0
	sh $0 uhid0 uhid1 uhid2 uhid3
	sh $0 ulpt0 ulpt1 
	sh $0 ttyU0 ttyU1
	sh $0 urio0
	sh $0 uscanner0 uscanner1
	;;

usb*)
	unit=${i#usb}
	if [ "$unit" = "" ]; then
	    unit=255
	    usb=usb
	else
	    usb=usb$unit
	fi
	major=31
	rm -f $usb
	mknod $usb c $major $unit
	chown root.wheel $usb
	chmod 600 $usb
	;;

uhid*)
	unit=${i#uhid}
	uhid=uhid$unit
	major=32
	rm -f $uhid
	mknod $uhid c $major $unit
	chown root.wheel $uhid
	chmod 666 $uhid
	;;

ulpt*)
	unit=${i#ulpt}
	ulpt=ulpt$unit
	major=33
	rm -f $ulpt
	mknod $ulpt c $major $unit
	chown root.wheel $ulpt
	chmod 600 $ulpt
	;;

ugen*)
	unit=${i#ugen}
	ugen=ugen$unit
	major=34
	for j in 00 01 02 03 04 05 06 07 08 09 10 11 12 13 14 15
	do
		ugenj=$ugen.$j
		rm -f $ugenj
		mknod $ugenj c $major $(($unit * 16 + $j))
		chown root.wheel $ugenj
		chmod 600 $ugenj
	done
	;;


ttyU*)
	unit=${i#ttyU}
	ttyU=ttyU$unit
	dtyU=dtyU$unit
	ctyU=ctyU$unit
	major=35
	rm -f $ttyU $dtyU $ctyU
	mknod $ttyU c $major $(($unit + $dialin  ))
	mknod $dtyU c $major $(($unit + $dialout ))
	mknod $ctyU c $major $(($unit + $callunit))
	chown uucp.wheel $ttyU $dtyU $ctyU
	chmod 600 $ttyU $dtyU $ctyU
	;;

urio*)
	unit=${i#urio}
	urio=urio$unit
	major=36
	rm -f $urio
	mknod $urio c $major $unit
	chown root.wheel $urio
	chmod 600 $urio
	;;

uscanner*)
	unit=${i#uscanner}
	uscanner=uscanner$unit
	major=37
	rm -f $uscanner
	mknod $uscanner c $major $unit
	chown root.wheel $uscanner
	chmod 600 $uscanner
	;;

clockctl)
	rm -f clockctl
	mknod clockctl c 38 0
	chown root.ntpd clockctl
	chmod 660 clockctl
	;;

*)
	echo $i: unknown device
	;;

esac
done
