#!/bin/sh -
#
#	$NetBSD: MAKEDEV,v 1.28 2002/02/11 14:57:33 augustss Exp $
#
# Copyright (c) 1990 The Regents of the University of California.
# All rights reserved.
#
# Redistribution and use in source and binary forms are permitted provided
# that: (1) source distributions retain this entire copyright notice and
# comment, and (2) distributions including binaries display the following
# acknowledgement:  ``This product includes software developed by the
# University of California, Berkeley and its contributors'' in the
# documentation or other materials provided with the distribution and in
# all advertising materials mentioning features or use of this software.
# Neither the name of the University nor the names of its contributors may
# be used to endorse or promote products derived from this software without
# specific prior written permission.
# THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
#
#	@(#)MAKEDEV	5.2 (Berkeley) 6/22/90
#
###########################################################################
#
#   PLEASE RUN "cd ../share/man/man8 ; perl5 MAKEDEV2manpage.pl"
#   AFTER CHANGING THIS FILE, AND COMMIT THE UPDATED MANPAGE!
#
###########################################################################
#
# Device "make" file.  Valid arguments:
#	all	makes all known devices, including local devices.
#		Tries to make the 'standard' number of each type.
#	floppy	devices to be put on install floppies
#	std	standard devices
#	local	configuration specific devices
#	usbs	make USB devices
#	isdn	make ISDN devices
#
# Tapes:
#	st*	SCSI tapes
#
# Disks:
#	wd*	"winchester" disk drives (ST506,IDE,ESDI,RLL,...)
#	fd*	"floppy" disk drives (3 1/2", 5 1/4")
#	sd*	SCSI disks
#	cd*	SCSI CD-ROM
#	vnd*	"file" pseudo-disks
#	md*	memory pseudo-disk devices
#	ccd*	contatenated disk devices
#	raid*	RAIDframe disk devices
#
# Console ports:
#	ttyE*	wscons
#
# Pointing devices:
#	wsmouse* wscons mouse events
#
# Keyboard devices:
#	wskbd*	wscons keyboard events
# 
# Terminal ports:
#	com*	standard PC COM ports			(XXX)
#	tty*	alias for PC COM ports, this is what the system really wants
#	ttyTX?	TX39 internal serial ports
#
# Pseudo terminals:
#	pty*	set of 62 master and slave pseudo terminals
#	opty	first 16 ptys, to save inodes on install media
#
# Printers:
#	lpt*	stock lp
#	lpa*	interruptless lp
#
# USB devices:
#	usb*	Bus control devices used by usbd for attach/detach
#	uhid*	Generic HID devices
#	ulpt*	Printer devices
#	ugen*	Generic device
#	urio*	Diamond Rio 500
#	uscanner*	Scanners
#	ttyU*	Modem
#
# ISDN devices:
#	i4b	communication between userland isdnd and kernel
#	i4bctl	control device
#	i4brbch* raw b-channel access
#	i4btel*	telephony device
#	i4btrc*	trace device
#
# Special purpose devices:
#       clockctl clock control for non root users
#	fd	file descriptors
#	bpf*	packet filter
#	ipl	ip filter
#	random	Random number generator
#	tun*	network tunnel driver
#	scsibus* SCSI busses, see scsi(4), scsictl(8)
#	ss*	SCSI scanner
#	uk*	unknown SCSI device
#	ch*	SCSI media changer
#	ucbsnd	UCB1200 (TX39) audio device. 22.154kHz mono 16bit
#

dialin=0
dialout=524288		# high bit of the minor number
callunit=262144

PATH=/sbin:/usr/sbin:/bin:/usr/bin
umask 77

for i
do

case $i in

all)
	sh $0 std wscons fd fd0 fd1 wd0 wd1 wd2 wd3 sd0 sd1 sd2 sd3 sd4
	sh $0 tty0 tty1 tty2 pty0
	sh $0 raid0 raid1 raid2 raid3 raid4 raid5 raid6 raid7
	sh $0 st0 st1 ch0 cd0 cd1 vnd0 vnd1
	sh $0 bpf0 bpf1 bpf2 bpf3 bpf4 bpf5 bpf6 bpf7
	sh $0 lpt0 lpt1 lpt2 tun0 tun1 ipl
	sh $0 ccd0 ccd1 ccd2 ccd3 md0 ss0 ch0 uk0 uk1 random
	sh $0 usbs isdn
	sh $0 scsibus0 scsibus1 scsibus2 scsibus3
	sh $0 ttyTX0 ttyTX1 ucbsnd
#	sh $0 local
	sh $0 clockctl
	;;

floppy)
	sh $0 std fd0 fd1 wd0 wd1 sd0 sd1 sd2 tty0 tty1 tty2
	sh $0 st0 st1 cd0 cd1 opty
	;;

ramdisk)
	sh $0 floppy md0
	;;

usbs)
	sh $0 usb usb0 usb1 usb2 usb3 usb4 usb5 usb6 usb7
	sh $0 uhid0 uhid1 uhid2 uhid3
	sh $0 ulpt0 ulpt1 
	sh $0 ttyU0 ttyU1
	sh $0 urio0
	sh $0 uscanner0 uscanner1
	;;

isdn)
	sh $0 i4b i4bctl i4brbch0 i4brbch1 i4btel0 i4btel1 i4btrc0 i4btrc1
	;;

std)
	rm -f console drum mem kmem null zero io tty klog stdin stdout stderr
	mknod console		c 2 0
	mknod drum		c 1 0	; chmod 640 drum ; chgrp kmem drum
	mknod kmem		c 0 1	; chmod 640 kmem ; chgrp kmem kmem
	mknod mem		c 0 0	; chmod 640 mem	; chgrp kmem mem
	mknod null		c 0 2	; chmod 666 null
	mknod zero		c 0 12	; chmod 666 zero
	mknod io		c 0 14	; chmod 640 io ; chgrp kmem io
	mknod tty		c 3 0	; chmod 666 tty
	mknod klog		c 5 0	; chmod 600 klog
	mknod stdin		c 4 0	; chmod 666 stdin
	mknod stdout		c 4 1	; chmod 666 stdout
	mknod stderr		c 4 2	; chmod 666 stderr
	;;

usb*)
	unit=${i#usb}
	if [ "$unit" = "" ]; then
	    unit=255
	    usb=usb
	else
	    usb=usb$unit
	fi
	major=23
	rm -f $usb
	mknod $usb c $major $unit
	chown root.wheel $usb
	chmod 600 $usb
	;;

uhid*)
	unit=${i#uhid}
	uhid=uhid$unit
	major=24
	rm -f $uhid
	mknod $uhid c $major $unit
	chown root.wheel $uhid
	chmod 666 $uhid
	;;

ulpt*)
	unit=${i#ulpt}
	ulpt=ulpt$unit
	ulpn=ulpn$unit
	major=25
	rm -f $ulpt $ulpn
	mknod $ulpt c $major $unit
	mknod $ulpn c $major $(($unit + 64))
	chown root.wheel $ulpt $ulpn
	chmod 600 $ulpt $ulpn
	;;

ttyU*)
	unit=${i#ttyU}
	ttyU=ttyU$unit
	dtyU=dtyU$unit
	ctyU=ctyU$unit
	major=37
	rm -f $ttyU $dtyU $ctyU
	mknod $ttyU c $major $(($unit + $dialin  ))
	mknod $dtyU c $major $(($unit + $dialout ))
	mknod $ctyU c $major $(($unit + $callunit))
	chown uucp.wheel $ttyU $dtyU $ctyU
	chmod 600 $ttyU $dtyU $ctyU
	;;

ugen*)
	unit=${i#ugen}
	ugen=ugen$unit
	major=26
	for j in 00 01 02 03 04 05 06 07 08 09 10 11 12 13 14 15
	do
		ugenj=$ugen.$j
		rm -f $ugenj
		mknod $ugenj c $major $(($unit * 16 + $j))
		chown root.wheel $ugenj
		chmod 600 $ugenj
	done
	;;

urio*)
	unit=${i#urio}
	urio=urio$unit
	major=39
	rm -f $urio
	mknod $urio c $major $unit
	chown root.wheel $urio
	chmod 600 $urio
	;;

uscanner*)
	unit=${i#uscanner}
	uscanner=uscanner$unit
	major=40
	rm -f $uscanner
	mknod $uscanner c $major $unit
	chown root.wheel $uscanner
	chmod 600 $uscanner
	;;

wscons)
	sh $0 ttyE0 ttyE1 ttyE2 ttyE3 ttyE4 ttyE5 ttyE6 ttyE7
	sh $0 wsmouse0 wsmouse1 wsmouse2 wsmouse3
	sh $0 wskbd0 wskbd1 wskbd2 wskbd3
	sh $0 wsmux0 wsmux1 wsmux2 wsmux3
	sh $0 wsmouse wskbd
	sh $0 ttyEcfg
	;;

wsmouse)
	rm -f wsmouse
	mknod wsmouse c 38 0
	chown root.wheel wsmouse
	chmod 600 wsmouse
	;;

wskbd)
	rm -f wskbd
	mknod wskbd c 38 1
	chown root.wheel wskbd
	chmod 600 wskbd
	;;

wsmux*)
	unit=${i#wsmux}
	unitctl=$(($unit + 128))
	wsmux=wsmux$unit
	wsmuxctl=wsmuxctl$unit
	major=38
	rm -f $wsmux $wsmuxctl
	mknod $wsmux c $major $unit
	chown root.wheel $wsmux
	chmod 600 $wsmux
	mknod $wsmuxctl c $major $unitctl
	chown root.wheel $wsmuxctl
	chmod 200 $wsmuxctl
	;;

ttyEcfg)
	chr=30
	rm -f ttyEcfg
	mknod ttyEcfg c $chr 255
	chown root.wheel ttyEcfg
	chmod 600 ttyEcfg
	;;

ttyE*)
	chr=30; unit=${i#ttyE}
	rm -f ttyE$unit
	mknod ttyE$unit c $chr $unit
	chown root.wheel ttyE$unit
	;;

wsmouse*)
	unit=${i#wsmouse}
	wsmouse=wsmouse$unit
	major=32
	rm -f $wsmouse
	mknod $wsmouse c $major $unit
	chown root.wheel $wsmouse
	chmod 600 $wsmouse
	;;

wskbd*)
	unit=${i#wskbd}
	wskbd=wskbd$unit
	major=31
	rm -f $wskbd
	mknod $wskbd c $major $unit
	chown root.wheel $wskbd
	chmod 600 $wskbd
	;;

fd)
	rm -f fd/*
	mkdir fd > /dev/null 2>&1
	n=0
	while [ $n -lt 64 ]; do
		mknod fd/$n c 22 $n
		n=$(($n + 1))
	done
	chown -R root.wheel fd
	chmod 755 fd
	chmod 666 fd/*
	;;

md*)
	unit=${i#md}; blk=6; chr=12;
	rm -f md${unit}? rmd${unit}?
	mknod md${unit}a  b $blk $(($unit * 8 + 0))
	mknod md${unit}d  b $blk $(($unit * 8 + 3))
#	mknod rmd${unit}a c $chr $(($unit * 8 + 0))
#	mknod rmd${unit}d c $chr $(($unit * 8 + 3))
	chgrp operator md${unit}? #rmd${unit}?
	chmod 640 md${unit}? #rmd${unit}?
	;;      

ss*)
	case $i in
	ss*) name=ss;	unit=${i#ss};	chr=22;;
	esac
	rm -f $name$unit n$name$unit en$name$unit
	mknod $name$unit	c $chr $(($unit * 16 + 0))
	mknod n$name$unit	c $chr $(($unit * 16 + 1))
	mknod en$name$unit	c $chr $(($unit * 16 + 3))
	chgrp operator $name$unit n$name$unit en$name$unit
	chmod 640 $name$unit n$name$unit en$name$unit
	;;

ccd*|fd*|sd*|vnd*|wd*|raid*)
	case $i in
	ccd*) name=ccd;	unit=${i#ccd};	blk=7;	chr=13;;
	fd*) name=fd;	unit=${i#fd};	blk=2;	chr=11;;
	raid*) name=raid; unit=${i#raid}; blk=9; chr=15;;
	sd*) name=sd;	unit=${i#sd};	blk=3;	chr=17;;
	vnd*) name=vnd;	unit=${i#vnd};	blk=8;	chr=14;;
	wd*) name=wd;	unit=${i#wd};	blk=1;	chr=10;;
	esac
	rm -f $name$unit? r$name$unit?
	mknod ${name}${unit}a	b $blk $(($unit * 8 + 0))
	mknod ${name}${unit}b	b $blk $(($unit * 8 + 1))
	mknod ${name}${unit}c	b $blk $(($unit * 8 + 2))
	mknod ${name}${unit}d	b $blk $(($unit * 8 + 3))
	mknod ${name}${unit}e	b $blk $(($unit * 8 + 4))
	mknod ${name}${unit}f	b $blk $(($unit * 8 + 5))
	mknod ${name}${unit}g	b $blk $(($unit * 8 + 6))
	mknod ${name}${unit}h	b $blk $(($unit * 8 + 7))
	mknod r${name}${unit}a	c $chr $(($unit * 8 + 0))
	mknod r${name}${unit}b	c $chr $(($unit * 8 + 1))
	mknod r${name}${unit}c	c $chr $(($unit * 8 + 2))
	mknod r${name}${unit}d	c $chr $(($unit * 8 + 3))
	mknod r${name}${unit}e	c $chr $(($unit * 8 + 4))
	mknod r${name}${unit}f	c $chr $(($unit * 8 + 5))
	mknod r${name}${unit}g	c $chr $(($unit * 8 + 6))
	mknod r${name}${unit}h	c $chr $(($unit * 8 + 7))
	chgrp operator $name$unit? r$name$unit?
	chmod 640 $name$unit? r$name$unit?
	;;

ucbsnd)
	rm -f ucbsnd
	mknod ucbsnd c 36 0
	chmod 666 ucbsnd
	;;

ttyTX*)
	unit=${i#ttyTX}
	name=ttyTX0
	dname=dtyTX0

	rm -f $name$unit $dname$unit
	mknod $name$unit c 35 $(($unit + $dialin ))
	mknod $dname$unit c 35 $(($unit + $dialout))
	chown uucp.wheel $name$unit $dname$unit
	;;

com*|tty*)					# (XXX -- com should die)
	unit=${i#???}
	rm -f com$unit tty0$unit dty0$unit
	mknod tty0$unit c 8 $(($unit + $dialin ))
	mknod dty0$unit c 8 $(($unit + $dialout))
	chown uucp.wheel tty0$unit dty0$unit
	;;

opty)
	rm -f ttyp[0-9a-f] ptyp[0-9a-f]
	for j in 0 1 2 3 4 5 6 7 8 9 a b c d e f
	do
		case $j in
		[0-9])	jn=$j ;;
		a)	jn=10 ;;
		b)	jn=11 ;;
		c)	jn=12 ;;
		d)	jn=13 ;;
		e)	jn=14 ;;
		f)	jn=15 ;;
		esac
		mknod ttyp$j c 7 $jn
		mknod ptyp$j c 6 $jn
	done
	chgrp wheel ttyp[0-9a-f] ptyp[0-9a-f]
	chmod 666 ttyp[0-9a-f] ptyp[0-9a-f] 
	;;

		
pty*)
	class=${i#pty}
	name=`echo pqrstuvwxyzPQRST | dd bs=1 count=1 skip=$class 2>/dev/null`
	case $name in
	v)	echo "$0: $i: pty unit conflicts with console ttyv0 device."
		continue;;
	?)      ;;
	*)      echo "$0: $i: pty unit must be between 0 and 15"
	        continue ;;
	esac
	rm -f tty$name[0-9a-zA-Z] pty$name[0-9a-zA-Z]
	jn=0
	while [ $jn -lt 62 ]
	do
		j=`echo 0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ | dd bs=1 count=1 skip=$jn 2>/dev/null`
		skip=0
		if [ $jn -ge 16 ]; then
			skip=$(($class * 30 + 256 - 16))
		fi
		unit=$(($class * 62 + $jn + $skip))
		mknod tty$name$j c 7 $unit
		mknod pty$name$j c 6 $unit
		jn=$(($jn + 1))
	done
        chgrp wheel tty$name[0-9a-zA-Z] pty$name[0-9a-zA-Z]
        chmod 666 tty$name[0-9a-zA-Z] pty$name[0-9a-zA-Z]
	;;

st*)
	case $i in
	st*) name=st;	unit=${i#st};	chr=18;	blk=4;;
	esac
	rm -f $name$unit n$name$unit e$name$unit en$name$unit \
		r$name$unit nr$name$unit er$name$unit enr$name$unit 
	mknod $name$unit	b $blk $(($unit * 16 + 0))
	mknod n$name$unit	b $blk $(($unit * 16 + 1))
	mknod e$name$unit	b $blk $(($unit * 16 + 2))
	mknod en$name$unit	b $blk $(($unit * 16 + 3))
	mknod r$name$unit	c $chr $(($unit * 16 + 0))
	mknod nr$name$unit	c $chr $(($unit * 16 + 1))
	mknod er$name$unit	c $chr $(($unit * 16 + 2))
	mknod enr$name$unit	c $chr $(($unit * 16 + 3))
	chgrp operator $name$unit n$name$unit e$name$unit en$name$unit \
		r$name$unit nr$name$unit er$name$unit enr$name$unit 
	chmod 660 $name$unit n$name$unit e$name$unit en$name$unit \
		r$name$unit nr$name$unit er$name$unit enr$name$unit 
	;;

ch*|uk*)
	case $i in
	ch*) name=ch;	unit=${i#ch};	chr=20;;
	uk*) name=uk;	unit=${i#uk};	chr=21;;
	esac
	rm -f $name$unit
	mknod $name$unit	c $chr $unit
	chgrp operator $name$unit
	chmod 640 $name$unit
	;;

cd*)
	case $i in
	cd*) name=cd;	unit=${i#cd};	chr=19;	blk=5;;
	esac
	rm -f $name$unit? r$name$unit?
	mknod ${name}${unit}a	b $blk $(($unit * 8 + 0))
	mknod ${name}${unit}d	b $blk $(($unit * 8 + 3))
	mknod r${name}${unit}a	c $chr $(($unit * 8 + 0))
	mknod r${name}${unit}d	c $chr $(($unit * 8 + 3))
	chgrp operator $name$unit? r$name$unit?
	chmod 640 $name$unit? r$name$unit?
	;;

lpt*)
	case $i in
	lpt*) name=lpt;	unit=${i#lpt};	chr=9;	flags=0;;
	esac
	rm -f $name$unit
	mknod $name$unit	c $chr $(($unit + $flags))
	chown root.wheel $name$unit
	;;

bpf*|tun*)
	case $i in
	bpf*) name=bpf;	unit=${i#bpf};	chr=29;;
	tun*) name=tun;	unit=${i#tun};	chr=28;;
	esac
	rm -f $name$unit
	mknod $name$unit	c $chr $unit
	chown root.wheel $name$unit
	;;

ipl)
	rm -f ipl ipnat ipstate ipauth
	mknod ipl c 27 0
	mknod ipnat c 27 1
	mknod ipstate c 27 2
	mknod ipauth c 27 3
	chown root.wheel ipl ipnat ipstate ipauth
	chmod 600 ipl ipnat ipstate ipauth
	;;

random)
	rm -f random urandom
	mknod random c 33 0
	mknod urandom c 33 1
	chown root.wheel random urandom
	chmod 444 random
	chmod 644 urandom
	;;


scsibus*)
	unit=${i#scsibus}; 
	rm -f scsibus$unit
	mknod scsibus$unit c 16 $unit
	chown root:wheel scsibus$unit
	chmod 644 scsibus$unit
	;;

i4b)
	rm -f i4b
	mknod i4b c 41 0
	chmod 600 i4b
	;;

i4bctl)
	rm -f i4bctl
	mknod i4bctl c 42 0
	chmod 600 i4bctl
	;;

i4brbch*)
	unit=${i#i4brbch};
	rm -f i4brbch$unit
	mknod i4brbch$unit c 43 $unit
	chmod 600 i4brbch$unit
	;;

i4btel*)
	unit=${i#i4btel};
	rm -f i4btel$unit
	mknod i4btel$unit c 45 $unit
	chmod 600 i4btel$unit
	;;

i4btrc*)
	unit=${i#i4btrc};
	rm -f i4btrc$unit
	mknod i4btrc$unit c 44 $unit
	chmod 600 i4btrc$unit
	;;

clockctl)
	rm -f clockctl
	mknod clockctl c 46 0
	chown root.ntpd clockctl
	chmod 660 clockctl
	;;

local)
	umask 0
	sh $0.local all
	umask 77
	;;

*)
	echo $i: unknown device
	;;

esac
done
