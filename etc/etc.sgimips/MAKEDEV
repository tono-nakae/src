#!/bin/sh -
#	$NetBSD: MAKEDEV,v 1.14 2002/01/19 18:59:22 oster Exp $
#
# Copyright (c) 1990 The Regents of the University of California.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. All advertising materials mentioning features or use of this software
#    must display the following acknowledgement:
#	This product includes software developed by the University of
#	California, Berkeley and its contributors.
# 4. Neither the name of the University nor the names of its contributors
#    may be used to endorse or promote products derived from this software
#    without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
###########################################################################
#
#   PLEASE RUN "cd ../share/man/man8 ; perl5 MAKEDEV2manpage.pl"
#   AFTER CHANGING THIS FILE, AND COMMIT THE UPDATED MANPAGE!
#
###########################################################################
#
# Device "make" file.  Valid arguments:
#	all	Makes all known devices, including local devices.
#		If units are expected for a device MAKEDEV supplies the
#		standard numbers.
#	minimal	A minimal set of devices for install disks, etc.
#	std	The standard devices (console, drum, klog, kmem, mem,
#		null, stderr, stdin, stdout, tty, zero).
#	local	Configuration specific devices which are created by running
#		the MAKEDEV.local shell script with the argument "all".
#	isdn	make ISDN devices
#
# Tapes:
#	st*	SCSI tape
#
# Disks:
#	ccd*	concatenated disk driver
#	cd*	SCSI CD-ROM
#	md*	memory pseudo-disk devices
#	raid*	RAIDframe disk driver
#	sd*	ATAPI and SCSI disks
#	vnd*	file pseudo-disks
#	wd*	IDE disks
#
# Console ports:
#	ttyE*   wscons
#
# Pointing devices:
#	wsmouse* wscons mouse events
#
# Keyboard devices:
#	wskbd*  wscons keyboard events
#
# Terminals:
#	ttyC*	NS16550 ("com") serial ports
#	ttyZ*	Zilog 8530 ("zstty") serial ports
#
# Pseudo terminals:
#	pty*	set of 16 master and slave pseudo terminals
#
# ISDN devices:
#	i4b	communication between userland isdnd and kernel
#	i4bctl	control device
#	i4brbch* raw b-channel access
#	i4btel*	telephony device
#	i4btrc*	trace device
#
# Special purpose devices:
#       clockctl clock control for non root users
#	bpf*	Berkeley packet filter devices
#	ch*	SCSI media changer
#	fd	file descriptors (/dev/fd/*)
#	ipl	IP filter
#	random	Random number generator
#	scsibus* SCSI busses, see scsi(4), scsictl(8)
#	ss*	SCSI scanner
#	tun*	network tunnel driver
#	uk*	unknown SCSI device
#	wsfont* console font control
#	wsmux*  wscons event multiplexor

dialin=0
dialout=524288
callunit=262144

PATH=/sbin:/usr/sbin:/bin:/usr/bin
umask 77
for i
do
case $i in

all)
	sh $0 std wd0 wd1 sd0 sd1 sd2 sd3 pty0 pty1 pty2 pty3
	sh $0 st0 st1 ch0 cd0 cd1 vnd0 vnd1 vnd2 vnd3
	sh $0 ccd0 ccd1 ccd2 ccd3 md0 md1 ss0 ss1 uk0 uk1
	sh $0 raid0 raid1 raid2 raid3 raid4 raid5 raid6 raid7
	sh $0 bpf0 bpf1 bpf2 bpf3 bpf4 bpf5 bpf6 bpf7
	sh $0 tun0 tun1 tun2 tun3
	sh $0 ttyC0 ttyC1 ttyC2 ttyC3
	sh $0 ttyZ0 ttyZ1 ttyZ2 ttyZ3
	sh $0 random local isdn
	sh $0 scsibus0 scsibus1 scsibus2 scsibus3
	sh $0 clockctl
	;;

minimal)
	sh $0 std
	sh $0 sd0 sd1 sd2 sd3 pty0 st0 st1 ch0 cd0 cd1 ccd0 ccd1 md0
	sh $0 ttyC0 ttyC1
	sh $0 ttyZ0 ttyZ1
	sh $0 pty0
	;;

isdn)
	sh $0 i4b i4bctl i4brbch0 i4brbch1 i4btel0 i4btel1 i4btrc0 i4btrc1
	;;

std)
	rm -f console drum mem kmem null zero tty klog stdin stdout stderr
	mknod console		c 0 0
	mknod drum		c 1 0	; chmod 640 drum ; chgrp kmem drum
	mknod kmem		c 20 1	; chmod 640 kmem ; chgrp kmem kmem
	mknod mem		c 20 0	; chmod 640 mem ; chgrp kmem mem
	mknod null		c 20 2	; chmod 666 null
	mknod zero		c 20 12	; chmod 666 zero
	mknod tty		c 21 0	; chmod 666 tty
	mknod klog		c 24 0	; chmod 600 klog
	mknod stdin		c 26 0	; chmod 666 stdin
	mknod stdout		c 26 1	; chmod 666 stdout
	mknod stderr		c 26 2	; chmod 666 stderr
	;;

wscons)
	sh $0 ttyE0 ttyE1 ttyE2 ttyE3 ttyE4 ttyE5 ttyE6 ttyE7
	sh $0 wsmouse0 wsmouse1 wsmouse2 wsmouse3
	sh $0 wskbd0 wskbd1 wskbd2 wskbd3
	sh $0 wsmux0 wsmux1 wsmux2 wsmux3
	sh $0 wsmouse wskbd
	sh $0 ttyEcfg
	sh $0 wsfont
	;;

wsmouse)
	rm -f wsmouse
	mknod wsmouse c 53 0
	chown root.wheel wsmouse
	chmod 600 wsmouse
	;;

wskbd)
	rm -f wskbd
	mknod wskbd c 53 1
	chown root.wheel wskbd
	chmod 600 wskbd
	;;

wsmux*)
	unit=${i#wsmux}
	unitctl=$(($unit + 128))
	wsmux=wsmux$unit
	wsmuxctl=wsmuxctl$unit
	major=53
	rm -f $wsmux $wsmuxctl
	mknod $wsmux c $major $unit
	chown root.wheel $wsmux
	chmod 600 $wsmux
	mknod $wsmuxctl c $major $unitctl
	chown root.wheel $wsmuxctl
	chmod 200 $wsmuxctl
	;;

ttyEcfg)
	chr=50
	rm -f ttyEcfg
	mknod ttyEcfg c $chr 255
	chown root.wheel ttyEcfg
	chmod 600 ttyEcfg
	;;

ttyE*)
	chr=50; unit=${i#ttyE}
	rm -f ttyE$unit
	mknod ttyE$unit c $chr $unit
	chown root.wheel ttyE$unit
	;;

wsmouse*)
	unit=${i#wsmouse}
	wsmouse=wsmouse$unit
	major=52
	rm -f $wsmouse
	mknod $wsmouse c $major $unit
	chown root.wheel $wsmouse
	chmod 600 $wsmouse
	;;

wskbd*)
	unit=${i#wskbd}
	wskbd=wskbd$unit
	major=51
	rm -f $wskbd
	mknod $wskbd c $major $unit
	chown root.wheel $wskbd
	chmod 600 $wskbd
	;;

fd)
	rm -f fd/*
	mkdir fd > /dev/null 2>&1
	n=0
	while [ $n -lt 64 ]; do
		mknod fd/$n c 15 $n
		n=$(($n + 1))
	done
	chown -R root.wheel fd
	chmod 755 fd
	chmod 666 fd/*
	;;

md*)
	unit=${i#md}; blk=2; chr=2;
	rm -f md${unit}? rmd${unit}?
	mknod md${unit}a  b $blk $(($unit * 16 + 0))
	mknod md${unit}k  b $blk $(($unit * 16 + 10))
#	mknod rmd${unit}a c $chr $(($unit * 16 + 0))
#	mknod rmd${unit}k c $chr $(($unit * 16 + 10))
	chgrp operator md${unit}? #rmd${unit}?
	chmod 640 md${unit}? #rmd${unit}?
	;;      

ccd*|cd*|raid*|sd*|vnd*|wd*)
	case $i in
	ccd*)	name=ccd;	unit=${i#ccd};	blk=3; chr=3;;
	raid*)	name=raid;	unit=${i#raid};	blk=5; chr=5;;
	wd*)	name=wd;	unit=${i#wd};	blk=13; chr=13;;
	sd*)	name=sd;	unit=${i#sd};	blk=10; chr=10;;
	cd*)	name=cd;	unit=${i#cd};	blk=12; chr=12;;
	vnd*)	name=vnd;	unit=${i#vnd};	blk=4; chr=4;;
	esac
	rm -f $name$unit? r$name$unit?
	mknod ${name}${unit}a	b $blk $(($unit * 16 + 0))
	mknod ${name}${unit}b	b $blk $(($unit * 16 + 1))
	mknod ${name}${unit}c	b $blk $(($unit * 16 + 2))
	mknod ${name}${unit}d	b $blk $(($unit * 16 + 3))
	mknod ${name}${unit}e	b $blk $(($unit * 16 + 4))
	mknod ${name}${unit}f	b $blk $(($unit * 16 + 5))
	mknod ${name}${unit}g	b $blk $(($unit * 16 + 6))
	mknod ${name}${unit}h	b $blk $(($unit * 16 + 7))
	mknod ${name}${unit}i	b $blk $(($unit * 16 + 8))
	mknod ${name}${unit}j	b $blk $(($unit * 16 + 9))
	mknod ${name}${unit}k	b $blk $(($unit * 16 + 10))
	mknod ${name}${unit}l	b $blk $(($unit * 16 + 11))
	mknod ${name}${unit}m	b $blk $(($unit * 16 + 12))
	mknod ${name}${unit}n	b $blk $(($unit * 16 + 13))
	mknod ${name}${unit}o	b $blk $(($unit * 16 + 14))
	mknod ${name}${unit}p	b $blk $(($unit * 16 + 15))
	mknod r${name}${unit}a	c $chr $(($unit * 16 + 0))
	mknod r${name}${unit}b	c $chr $(($unit * 16 + 1))
	mknod r${name}${unit}c	c $chr $(($unit * 16 + 2))
	mknod r${name}${unit}d	c $chr $(($unit * 16 + 3))
	mknod r${name}${unit}e	c $chr $(($unit * 16 + 4))
	mknod r${name}${unit}f	c $chr $(($unit * 16 + 5))
	mknod r${name}${unit}g	c $chr $(($unit * 16 + 6))
	mknod r${name}${unit}h	c $chr $(($unit * 16 + 7))
	mknod r${name}${unit}i	c $chr $(($unit * 16 + 8))
	mknod r${name}${unit}j	c $chr $(($unit * 16 + 9))
	mknod r${name}${unit}k	c $chr $(($unit * 16 + 10))
	mknod r${name}${unit}l	c $chr $(($unit * 16 + 11))
	mknod r${name}${unit}m	c $chr $(($unit * 16 + 12))
	mknod r${name}${unit}n	c $chr $(($unit * 16 + 13))
	mknod r${name}${unit}o	c $chr $(($unit * 16 + 14))
	mknod r${name}${unit}p	c $chr $(($unit * 16 + 15))
	chgrp operator ${name}${unit}[a-p] r${name}${unit}[a-p]
	chmod 640 ${name}${unit}[a-p] r${name}${unit}[a-p]
	;;

ttyC*|ttyZ*)
	case $i in
	ttyC*)	name=ttyC; dname=dtyC; unit=${i#ttyC}; chr=36;;
	ttyZ*)	name=ttyZ; dname=dtyZ; unit=${i#ttyZ}; chr=35;;
	esac
        rm -f $name$unit $dname$unit
        mknod  $name$unit c $chr $(($unit + $dialin ))
        mknod $dname$unit c $chr $(($unit + $dialout))
        chown uucp.wheel $name$unit $dname$unit
        ;;

pty*)
	class=${i#pty}
	case $class in
	0)      name=p;;
	1)      name=q;;
	2)      name=r;;
	3)      name=s;;
	4)      name=t;;
	5)      name=u;;
	6)      name=v;;
	7)      name=w;;
	8)      name=x;;
	9)      name=y;;
	10)     name=z;;
	11)     name=P;;
	12)     name=Q;;
	13)     name=R;;
	14)     name=S;;
	15)     name=T;;
	*)      echo "$0: $i: pty unit must be between 0 and 15"
	        continue ;;
	esac
	rm -f tty$name[0-9a-f] pty$name[0-9a-f]
	for j in 0 1 2 3 4 5 6 7 8 9 a b c d e f
	do
		case $j in
		[0-9])  jn=$j ;;
		a)      jn=10 ;;
		b)      jn=11 ;;
		c)      jn=12 ;;
		d)      jn=13 ;;
		e)      jn=14 ;;
		f)      jn=15 ;;
		esac
		unit=$(($class * 16 + $jn))
		mknod tty$name$j c 22 $unit
		mknod pty$name$j c 23 $unit
	done
        chgrp wheel tty$name? pty$name?
        chmod 666 tty$name? pty$name?
	;;

st*)
	case $i in
	st*) name=st;	unit=${i#st};	chr=11;	blk=11;;
	esac
	rm -f $name$unit n$name$unit e$name$unit en$name$unit \
	r$name$unit nr$name$unit er$name$unit enr$name$unit
	mknod ${name}${unit}	b $blk $(($unit * 16 + 0))
	mknod n${name}${unit}	b $blk $(($unit * 16 + 1))
	mknod e${name}${unit}	b $blk $(($unit * 16 + 2))
	mknod en${name}${unit}	b $blk $(($unit * 16 + 3))
	mknod r${name}${unit}	c $chr $(($unit * 16 + 0))
	mknod nr${name}${unit}	c $chr $(($unit * 16 + 1))
	mknod er${name}${unit}	c $chr $(($unit * 16 + 2))
	mknod enr${name}${unit} c $chr $(($unit * 16 + 3))
	chgrp operator ${name}${unit} n${name}${unit} \
		e$name$unit en$name$unit \
		r${name}${unit} nr${name}${unit} \
		er${name}${unit} enr${name}${unit}
	chmod 660 ${name}${unit} n${name}${unit} \
		e$name$unit en$name$unit \
		r${name}${unit} nr${name}${unit} \
		er${name}${unit} enr${name}${unit}
	;;

ch*|uk*)
	case $i in
	ch*) name=ch;	unit=${i#ch};	chr=33;;
	uk*) name=uk;	unit=${i#uk};	chr=31;;
	esac
	rm -f $name$unit
	mknod $name$unit	c $chr $unit
	chgrp operator $name$unit
	chmod 640 $name$unit
	;;

ss*)
	case $i in
	ss*) name=ss;	unit=${i#ss};	chr=32;;
	esac
	rm -f $name$unit n$name$unit en$name$unit
	mknod $name$unit	c $chr $(($unit * 16 + 0))
	mknod n$name$unit	c $chr $(($unit * 16 + 1))
	mknod en$name$unit	c $chr $(($unit * 16 + 3))
	chgrp operator $name$unit n$name$unit en$name$unit
	chmod 640 $name$unit n$name$unit en$name$unit
	;;

bpf*|tun*)
	case $i in
	bpf*) name=bpf;	unit=${i#bpf};	chr=27;;
	tun*) name=tun;	unit=${i#tun};	chr=28;;
	esac
	rm -f $name$unit
	mknod $name$unit	c $chr $unit
	chown root.wheel $name$unit
	;;

ipl)    
	rm -f ipl ipnat ipstate ipauth
	mknod ipl c 29 0
	mknod ipnat c 29 1
	mknod ipstate c 29 2
	mknod ipauth c 29 3
	chown root.wheel ipl ipnat ipstate ipauth
	chmod 600 ipl ipnat ipstate ipauth
	;;

random)
	rm -f random urandom
	mknod random c 30 0
	mknod urandom c 30 1
	chown root.wheel random urandom
	chmod 444 random
	chmod 644 urandom
	;;

scsibus*)
	unit=${i#scsibus}; 
	rm -f scsibus$unit
	mknod scsibus$unit c 34 $unit
	chown root.wheel scsibus$unit
	chmod 644 scsibus$unit
	;;

i4b)
	rm -f i4b
	mknod i4b c 38 0
	chmod 600 i4b
	;;

i4bctl)
	rm -f i4bctl
	mknod i4bctl c 39 0
	chmod 600 i4bctl
	;;

i4brbch*)
	unit=${i#i4brbch};
	rm -f i4brbch$unit
	mknod i4brbch$unit c 40 $unit
	chmod 600 i4brbch$unit
	;;

i4btel*)
	unit=${i#i4btel};
	rm -f i4btel$unit
	mknod i4btel$unit c 42 $unit
	chmod 600 i4btel$unit
	;;

i4btrc*)
	unit=${i#i4btrc};
	rm -f i4btrc$unit
	mknod i4btrc$unit c 41 $unit
	chmod 600 i4btrc$unit
	;;

wsfont) 
	rm -f wsfont
	mknod wsfont c 54 0
	chown root:wheel wsfont
	chmod 600 wsfont 
	;;

clockctl)
	rm -f clockctl
	mknod clockctl c 60 0
	chown root.ntpd clockctl
	chmod 660 clockctl
	;;

local)
	umask 0
	sh $0.local all
	umask 77
	;;

*)
	echo $i: unknown device
	;;

esac
done
