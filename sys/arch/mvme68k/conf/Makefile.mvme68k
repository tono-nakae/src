#	$NetBSD: Makefile.mvme68k,v 1.23 1997/03/17 22:16:03 gwr Exp $

# Makefile for NetBSD
#
# This makefile is constructed from a machine description:
#	config machineid
# Most changes should be made in the machine description
#	/sys/arch/mvme68k/conf/``machineid''
# after which you should do
#	config machineid
# Machine generic makefile changes should be made in
#	/sys/arch/mvme68k/conf/Makefile.mvme68k
# after which config should be rerun for all machines of that type.
#
# N.B.: NO DEPENDENCIES ON FOLLOWING FLAGS ARE VISIBLE TO MAKEFILE
#	IF YOU CHANGE THE DEFINITION OF ANY OF THESE RECOMPILE EVERYTHING
#
# -DTRACE	compile in kernel tracing hooks
# -DQUOTA	compile in file system quotas

# DEBUG is set to -g if debugging.
# PROF is set to -pg if profiling.

# Simplify cross-build...
MACHINE_ARCH=m68k
MACHINE=mvme68k

CC?=	cc
LD?=	ld
MKDEP?=	mkdep
STRIP?=	strip
COPTS?= 	-O2

# source tree is located via $S relative to the compilation directory
.ifndef S
S!=	cd ../../../..; pwd
.endif
MVME68K=$S/arch/mvme68k

# Override CPP defaults entirely, so cross-compilation works.
# Keep -nostdinc before all -I flags, similar for -undef ...
INCLUDES=	-nostdinc -I. -I$S/arch -I$S
XDEFS=		-undef -D__NetBSD__ -Dm68k -Dmc68000
DEFINES=	-D_KERNEL -Dmc68020 -Dmvme68k
CPPFLAGS=	${INCLUDES} ${XDEFS} ${DEFINES} ${IDENT} ${PARAM}
CWARNFLAGS=	-Werror
CFLAGS= 	${DEBUG} ${COPTS} -msoft-float ${CWARNFLAGS}
APPFLAGS=	-P -traditional ${CPPFLAGS} -D_LOCORE
AFLAGS= 	-m68030
LINKFLAGS=	-n -Ttext 8000 -e start
STRIPFLAGS=	-d

### find out what to use for libkern
.include "$S/lib/libkern/Makefile.inc"
.ifndef PROF
LIBKERN=	${KERNLIB}
.else
LIBKERN=	${KERNLIB_PROF}
.endif

### find out what to use for libcompat
.include "$S/compat/common/Makefile.inc"
.ifndef PROF
LIBCOMPAT=	${COMPATLIB}
.else
LIBCOMPAT=	${COMPATLIB_PROF}
.endif

### for the Motorola 68040 Floating Point Software Product
.include "$S/arch/m68k/fpsp/Makefile.inc"

# compile rules: rules are named NORMAL_${SUFFIX} where SUFFIX is
# the file suffix, capitalized (e.g. C for a .c file).

NORMAL_C=	${CC} ${CFLAGS} ${CPPFLAGS} ${PROF} -c $<

# Please do not assume the compiler does "-x ..." (gcc-only).
# This needs an intermediate file.  The original file is always
# safe in some far away directory, so just use the base name.
NORMAL_S=	${CPP} ${APPFLAGS} $< > $*.s ;\
		${AS} ${AFLAGS} -o $@ $*.s ; rm $*.s

%OBJS

%CFILES

%SFILES

# load lines for config "xxx" will be emitted as:
# xxx: ${SYSTEM_DEP} swapxxx.o
#	${SYSTEM_LD_HEAD}
#	${SYSTEM_LD} swapxxx.o
#	${SYSTEM_LD_TAIL}
SYSTEM_OBJ=	locore.o ${FPSP} \
		param.o ioconf.o ${OBJS} ${LIBKERN} ${LIBCOMPAT}
SYSTEM_DEP=	Makefile ${SYSTEM_OBJ}
SYSTEM_LD_HEAD=	@rm -f $@
SYSTEM_LD=	@echo ${LD} ${LINKFLAGS} -o $@ '$${SYSTEM_OBJ}' vers.o; \
		${LD} ${LINKFLAGS} -o $@ ${SYSTEM_OBJ} vers.o
SYSTEM_LD_TAIL=	@size $@; chmod 755 $@

DEBUG?=
.if ${DEBUG} == "-g"
LINKFLAGS+=	-X
SYSTEM_LD_TAIL+=; \
		echo cp $@ $@.gdb; rm -f $@.gdb; cp $@ $@.gdb; \
		echo ${STRIP} ${STRIPFLAGS} $@; ${STRIP} ${STRIPFLAGS} $@
.else
LINKFLAGS+=	-S
.endif

%LOAD

assym.h: $S/kern/genassym.sh ${MVME68K}/mvme68k/genassym.cf
	sh $S/kern/genassym.sh ${CC} ${CFLAGS} ${CPPFLAGS} ${PROF} \
	    < ${MVME68K}/mvme68k/genassym.cf > assym.h.tmp && \
	mv -f assym.h.tmp assym.h

param.c: $S/conf/param.c
	rm -f param.c
	cp $S/conf/param.c .

param.o: param.c Makefile
	${NORMAL_C}

ioconf.o: ioconf.c
	${NORMAL_C}

newvers: ${SYSTEM_DEP} ${SYSTEM_SWAP_DEP}
	sh $S/conf/newvers.sh
	${CC} ${CFLAGS} ${CPPFLAGS} ${PROF} -c vers.c


clean: cleankernel
cleankernel:
	rm -f eddep *netbsd netbsd.gdb tags *.[io] [a-z]*.s \
	    [Ee]rrs linterrs makelinks assym.h.tmp assym.h

lint:
	@lint -hbxncez -Dvolatile= ${CPPFLAGS} -UKGDB \
	    ${MVME68K}/mvme68k/Locore.c ${CFILES} \
	    ioconf.c param.c | \
	    grep -v 'static function .* unused'

tags:
	@echo "see $S/kern/Makefile for tags"

links:
	egrep '#if' ${CFILES} | sed -f $S/conf/defines | \
	  sed -e 's/:.*//' -e 's/\.c/.o/' | sort -u > dontlink
	echo ${CFILES} | tr -s ' ' '\12' | sed 's/\.c/.o/' | \
	  sort -u | comm -23 - dontlink | \
	  sed 's,../.*/\(.*.o\),rm -f \1; ln -s ../GENERIC/\1 \1,' > makelinks
	sh makelinks && rm -f dontlink

SRCS=	${MVME68K}/mvme68k/locore.s \
	param.c ioconf.c ${CFILES} ${SFILES}
depend: .depend
.depend: ${SRCS} assym.h param.c
	${MKDEP} ${CPPFLAGS} param.c ioconf.c ${CFILES}

# XXX - see below
#	${MKDEP} -a ${APPFLAGS} ${MVME68K}/mvme68k/locore.s
#	${MKDEP} -a ${APPFLAGS} ${SFILES}
#
# For cross-compilation, the "gcc -M" mkdep script is convenient,
# but that does not correctly make rules from *.s files.  The
# easiest work-around is to just list those dependencies here.
locore.o:   assym.h m68k/asm.h m68k/trap.h
copy.o:     assym.h m68k/asm.h $S/sys/errno.h
bcopy.o:    assym.h m68k/asm.h
copypage.o: assym.h m68k/asm.h


# depend on root or device configuration
autoconf.o conf.o: Makefile
 
# depend on network or filesystem configuration 
uipc_proto.o vfs_conf.o: Makefile 

# depend on maxusers
machdep.o: Makefile

# depend on CPU configuration 
locore.o pmap.o sys_machdep.o trap.o: Makefile


locore.o: ${MVME68K}/mvme68k/locore.s assym.h
	${NORMAL_S}

%RULES
