# $NetBSD: Makefile.bootxx,v 1.1 2003/04/16 22:17:44 dsl Exp $

S=	${.CURDIR}/../../../../../

NOMAN=
STRIPFLAG=
PROG= bootxx_${FS}
PRIMARY_LOAD_ADDRESS=0x600
SECONDARY_LOAD_ADDRESS=0x10000

# We ought (need?) to fit into track 0 of a 1.2M floppy.
# This restricts us to 15 sectors (including pbr and label)
BOOTXX_SECTORS?=15
BOOTXX_MAXSIZE?= $$(( ${BOOTXX_SECTORS} * 512 ))

SRCS= pbr.S label.S bootxx.S boot1.c

.include <bsd.own.mk>

LIBCRT0=	# nothing
LIBCRTBEGIN=	# nothing
LIBCRTEND=	# nothing
LIBC=		# nothing

BINDIR=/usr/mdec
BINMODE=444

.PATH:	${.CURDIR}/.. ${.CURDIR}/../../lib

LDFLAGS+= -N -e start
CPPFLAGS+= -DBOOTXX
# CPPFLAGS+= -D__daddr_t=int32_t
CPPFLAGS+= -I ${.CURDIR}/../../lib -I ${.OBJDIR}
CPPFLAGS+= -DBOOTXX_SECTORS=${BOOTXX_SECTORS}
CPPFLAGS+= -DPRIMARY_LOAD_ADDRESS=${PRIMARY_LOAD_ADDRESS}
CPPFLAGS+= -DSECONDARY_LOAD_ADDRESS=${SECONDARY_LOAD_ADDRESS}
# Magic number also known by usr.sbin/installboot/arch/i386.c
CPPFLAGS+= -DX86_BOOT_MAGIC_1="('x' << 24 | 0x86b << 12 | 'm' << 4 | 1)"
CPPFLAGS+= -DXXfs_open=${FS}_open
CPPFLAGS+= -DXXfs_close=${FS}_close
CPPFLAGS+= -DXXfs_read=${FS}_read
CPPFLAGS+= -DXXfs_stat=${FS}_stat

# Make sure we override any optimization options specified by the user
COPTS=  -Os

.if ${MACHINE} == "x86_64"
LDFLAGS+=  -m elf_i386
AFLAGS+=   -m32
COPTS+=    -m32
LIBKERN_ARCH=i386
KERNMISCMAKEFLAGS="LIBKERN_ARCH=i386"
.else
COPTS+=    -mcpu=i386
.endif

COPTS+=    -ffreestanding
CFLAGS+= -Wall -Wmissing-prototypes -Wstrict-prototypes
CPPFLAGS+= -nostdinc -D_STANDALONE
CPPFLAGS+= -I$S

CPPFLAGS+= -DLIBSA_SINGLE_FILESYSTEM=xxfs \
		-DLIBSA_NO_TWIDDLE \
		-DLIBSA_NO_FD_CHECKING \
		-DLIBSA_NO_RAW_ACCESS \
		-DLIBSA_NO_FS_WRITE \
		-DLIBSA_NO_FS_SEEK \
		-DLIBSA_USE_MEMCPY \
		-DLIBSA_USE_MEMSET \
		-DLIBSA_SINGLE_DEVICE=blkdev \
		-DLIBKERN_OPTIMISE_SPACE \
		-D"blkdevioctl(x,y,z)=EINVAL" \
		-D"blkdevclose(f)=0" \
		-D"devopen(f,n,fl)=(*(fl)=(void *)n,0)" \
		-DLIBSA_NO_DISKLABEL_MSGS

# -DLIBSA_FS_SINGLECOMPONENT 

# CPPFLAGS+= -DBOOTXX_RAID1_SUPPORT

I386_STAND_DIR?= $S/arch/i386/stand

.if !make(obj) && !make(clean) && !make(cleandir)
.BEGIN: machine
.NOPATH: machine
.endif

realdepend realall: machine
CLEANFILES+= machine

machine::
	-rm -f $@
	ln -s $S/arch/i386/include $@

${OBJS}: machine

### find out what to use for libi386
I386DIR= ${I386_STAND_DIR}/lib
I386DST= ${.OBJDIR}/../lib/i386
.include "${I386DIR}/Makefile.inc"
LIBI386= ${I386LIB}

### find out what to use for libsa
SA_AS= library
SADST= ${.OBJDIR}/../lib/libsa
SAMISCMAKEFLAGS+="SA_USE_LOADFILE=yes"
.include "${S}/lib/libsa/Makefile.inc"
LIBSA= ${SALIB}

### find out what to use for libkern
KERN_AS=        library
KERNDST= ${.OBJDIR}/../lib/libkern
.include "${S}/lib/libkern/Makefile.inc"
LIBKERN=        ${KERNLIB}


cleandir distclean: cleanlibdir

cleanlibdir:
	rm -rf lib

LIBLIST= ${LIBI386} ${LIBSA} ${LIBKERN} ${LIBI386} ${LIBSA}

CLEANFILES+= ${PROG}.tmp ${PROG}.map

${PROG}: ${OBJS} ${LIBLIST}
	${LD} -o ${PROG}.tmp ${LDFLAGS} -Ttext ${PRIMARY_LOAD_ADDRESS} \
		-Map ${PROG}.map -cref ${OBJS} ${LIBLIST}
	${OBJCOPY} -O binary ${PROG}.tmp ${PROG}
	# rm -f ${PROG}.tmp
	@ sz=$$(ls -ln ${PROG}|tr -s ' '|cut -d' ' -f5); \
	if [ "$$sz" -gt "${BOOTXX_MAXSIZE}" ]; then \
		echo "### ${PROG} size $$sz is larger than ${BOOTXX_MAXSIZE}" >&2; \
		rm ${PROG}; \
		! :; \
	else \
		: pad to sector boundary; \
		pad=$$(( 512 - ( $$sz & 511 ) )); \
		[ $$pad != 512 ] && \
		    dd if=/dev/zero bs=1 count=$$pad >>${PROG} 2>/dev/null; \
		echo "${PROG} size $$sz, $$((${BOOTXX_MAXSIZE} - $$sz)) free"; \
	fi

.include <bsd.prog.mk>
