ST(4)                       BSD Programmer's Manual                      ST(4)

NNAAMMEE
     sstt - CCS SCSI tape driver

SSYYNNOOPPSSIISS
     ttaappee sstt00 aatt ssccssii?? ssllaavvee ??

DDEESSCCRRIIPPTTIIOONN
     The sstt driver was written especially to support the Exabyte EXB-8200 8MM
     Cartridge Tape Subsystem.  It has several extensions specific to the Ex-
     abyte, but should support other tape drives as long as they follow the
     ANSI SCSI-I specification.  Besides extensive use with an Exabyte 8200,
     the driver has been tested with an Archive QIC-24 tape drive, an Archive
     Viper QIC-150 , an Archive Viper 2525, an Archive Python 27216 and 25501,
     a Caliper CP150, a HP35450A, a Wangtek 5150ES, a Wangtek 5099ES, and a
     Wangtek 5150ES, which is also currently the default drive type.  The sstt
     tape interface provides a standard tape drive interface as described in
     mtio(4) with the following exceptions:

     1.   Density is dependent on device type.  Current Exabyte hardware has
          only one density. The EXB-8500 drive, when released, will have a
          high density format of 5.6GB. On an Archive QIC-24 drive the driver
          reads both QIC-11 and QIC-24 formats but writes only QIC-24. On an
          Archive Viper QIC-150 drive the driver reads and writes only QIC-150
          formats, it should also be able to read QIC-11 and QIC-24 but this
          has not been verified.  On an Archive Viper 2525 the drive can read
          and write QIC-525, QIC-150, QIC-120 and can also read QIC-24 tapes.

     2.   Only the ``raw'' interface is supported.

     Special Exabyte Support:

     The MTIOCGET ioctl(2) call on an Exabyte returns this structure:

     struct mtget {
             short   mt_type;        /* type of magtape device */
             /* the following two registers are grossly device dependent */
             short   mt_dsreg;       /* sc_flags,  ``drive status'' register */
             short   mt_erreg;       /* high 8 bytes error status, ``error'' register */
             /* low  8 bytes percentage of Rewrites
             if writing, ECC errors if reading */
             /* end device-dependent registers */
             short   mt_resid;       /*  Mbyte until end of tape ,residual count */
             /* the following two are not yet implemented */
             daddr_t mt_fileno;      /* file number of current position */
             daddr_t mt_blkno;       /* block number of current position */
             /* end not yet implemented */
     };



     Bits 3 and 4 in the minor device are used to select tape density.  Often
     when these bits are zero, as in the case of the Archive Viper 2525, the
     drive will automatically determine the tape type and format when reading.
     When writing should these bits be zero, the drive will write the highest
     valid density for a given tape type. For the Archive Viper 2525 using
     unit 0 with density = 0x01, which is /dev/rst8 assumes the tape is a
     QIC-24, density = 0x10 which is /dev/rst16 assumes the tape is a QIC-120,
     density = 0x11 which is /dev/rst24 assumes the tape is a QIC-150, density
     = 0x00 which is /dev/rst0 will allow the use of a QIC-525 with a 6525
     tape.  This density mapping will vary depending on the drive type.

     Bit 5 in the minor device number is used to select long filemarks or
     short filemarks. A long filemark occupies 2.12 MBytes of space on the
     tape, while a short filemark occupies 488 KBytes.  A long filemark in-
     cludes an erase gap while the short filemark does not.  The tape can be
     positioned on the BOT side of a long filemark allowing data to be append-
     ed with a write operation.  Since the short filemark does not contain an
     erase gap which would allow writing it is considered to be non-erasable.
     If either type of filemark is followed by blank tape, data may be append-
     ed on its EOT side.

     Bit 6 in the minor device number selects fixed block mode with a block
     size of 1K.  Variable length records are the default if bit 6 is not set.

     For unit 0 here are the effects of minor device bits 2,3,4,5,6. For other
     units add the _u_n_i_t_# to each of the device names.

                      _n_o_r_e_w_i_n_d                          _s_h_o_r_t         _f_i_x_e_d_-_b_l_o_c_k
                                 _d_e_n_s_i_t_y_0 _d_e_n_s_i_t_y_1      _f_i_l_e_m_a_r_k_s     _m_o_d_e
           rst0
           nrst0      X
           rst8                  X
           nrst8      X          X
           rst16                            X
           nrst16     X                     X
           rst24                 X          X
           nrst24     X          X          X
           rst32                                        X
           nrst32     X                                 X
           rst40                 X                      X
           nrst40     X          X                      X
           rst48                            X           X
           nrst48     X                     X           X
           rst56                 X          X           X
           nrst56     X          X          X           X
           rst64                                                      X
           nrst64     X                                               X
           rst72                 X                                    X
           nrst72     X          X                                    X
           rst80                            X                         X
           nrst80     X                     X                         X
           rst88                 X          X                         X
           nrst88     X          X          X                         X
           rst96                                        X             X
           nrst96     X                                 X             X
           rst104                X                      X             X
           nrst104    X          X                      X             X
           rst112                           X           X             X
           nrst112    X                     X           X             X
           rst120                X          X           X             X
           nrst120    X          X          X           X             X

SSEEEE AALLSSOO
     mt(1),  tar(1),  mtio(4),

     _E_X_B_-_8_2_0_0 _8_M_M _C_a_r_t_r_i_d_g_e _T_a_p_e _S_u_b_s_y_s_t_e_m _I_n_t_e_r_f_a_c_e _U_s_e_r _M_a_n_u_a_l_..

HHIISSTTOORRYY
     The sstt driver was derived from the hp300 st.c tape driver in June of
     1993.

BBUUGGSS
     The HP 98268 SCSI controller hardware can not do odd length DMA trans-
     fers.  If odd length DMA I/O is requested the driver will use the "Pro-
     gram Transfer Mode" of the Fujitsu MB87030 chip. Read requests are nor-
     mally even length for which a DMA transfer is used. If, however, the
     driver detects that a odd length read has happened (when a even length
     was requested) it will issue the EIO error and the last byte of the read
     data will be 0x00. Odd length read requests must match the size of the
     requested data block on tape.

     The following only applies when using long filemarks. Short filemarks can
     not be overwritten.

         Due to the helical scan and the erase mechanism, there is a writing
         limitation on Exabyte drives.  ``tar r'' or ``tar u'' will not work
         (``tar c'' is ok).  One can only start writing at  1) beginning of
         tape, 2) on the end of what was last written, 3) "front" side of a
         regular (long) filemark.  Say you have a tape with 3 tar files on it,
         want to save the first file, and want to begin writing over the 2nd
         file.

         On a normal 1/4" or 1/2" drive you would do:

         mt fsf 1; tar cf /dev/nrst0 ...

         but for an Exabyte you need to do:

         mt fsf 1; mt bsf 1; mt weof 1; tar cf /dev/nrst0 ...

         The regular long filemark consists of an erased zone 3.8" long (need-
         ed to begin a write).  In this case, the first filemark is rewritten
         in place, which creates an erased zone _a_f_t_e_r it, clearing the way to
         write more on the tape.  The erase head is not helical.

         One can position a tape to the end of what was last written by read-
         ing until a "BLANK CHECK" error is returned.  Writing can be started
         at this point.  (This applies to both long and short filemarks.)  The
         tape does not become positioned somewhere down the "erased" area as
         does a conventional magtape.  One can issue multiple reads at the
         "BLANK CHECK" error, but the Exabyte stays positioned at the begin-
         ning of the blank area, ready to accept write commands.  File skip
         operations do not stop at blank tape and will run into old data or
         run to the end of the tape, so you have to be careful not to ``mt fsf
         too_many''.

     Archive support gets confused if asked to moved more filemarks than there
     are on the tape.

     This man page needs some work.  Some of these are not really bugs, just
     unavoidable consequences of the hardware.

     Amiga specific controller comments should be added and HP specific com-
     ments removed after we determine any SCSI controller specific problems.

NetBSD BSD/Amiga                   November 27, 1993                             3




















