	$NetBSD: syscalls.master,v 1.11 1995/08/14 00:57:13 mycroft Exp $

;	@(#)syscalls.master	8.1 (Berkeley) 7/19/93
; System call name/number master file (or rather, slave, from SVR4).
; Processed to created svr4_sysent.c, svr4_syscalls.c and svr4_syscall.h.

; Columns: number type nargs name altname/comments
;	number	system call number, must be in order
;	type	one of STD, OBSOL, UNIMPL, STD
;	nargs	number of arguments
;	name	name of syscall routine
;	altname	name of system call if different
;		for UNIMPL/OBSOL, name continues with comments

#include <sys/param.h>
#include <compat/svr4/svr4_types.h>
#include <compat/svr4/svr4_signal.h>
#include <compat/svr4/svr4_ucontext.h>
#include <compat/svr4/svr4_statvfs.h>
#include <sys/systm.h>
#include <sys/signal.h>
#include <sys/mount.h>
#include <sys/syscallargs.h>
#include <compat/svr4/svr4_syscallargs.h>

; types:
;	STD	always included
;	STD	included on COMPAT #ifdef
;	LIBSTD included on COMPAT #ifdef, and placed in syscall.h
;	OBSOL	obsolete, not included in system, only specifies name
;	UNIMPL	not implemented, placeholder only

; #ifdef's, etc. may be included, and are copied to the output files.

0	NOARGS		{ int nosys(void); } syscall
1	NOARGS		{ int exit(int rval); }
2	NOARGS		{ int fork(void); }
3	NOARGS		{ int read(int fd, char *buf, u_int nbyte); }
4	NOARGS		{ int write(int fd, char *buf, u_int nbyte); }
5	STD		{ int svr4_open(char *path, int flags, \
					int mode); }
6	NOARGS		{ int close(int fd); }
7	STD		{ int svr4_wait(int *status); }
8	STD		{ int svr4_creat(char *path, int mode); }
9	NOARGS		{ int link(char *path, char *link); }
10	NOARGS		{ int unlink(char *path); }
11	STD		{ int svr4_execv(char *path, \
					 char * * argp); }
12	NOARGS		{ int chdir(char *path); }
13	STD		{ int svr4_time(svr4_time_t *t); }
14	STD		{ int svr4_mknod(char* path, int mode, int dev); }
15	NOARGS		{ int chmod(char *path, int mode); }
16	NOARGS		{ int chown(char *path, int uid, int gid); }
17	STD		{ int svr4_break(caddr_t nsize); }
18	STD		{ int svr4_stat(char* path, \
					struct svr4_stat* ub); }
19	NOARGS		{ long compat_43_lseek(int fd, long offset, \
					       int whence); }
20	NOARGS		{ pid_t getpid(void); }
21	UNIMPL		svr4_old_mount
22	UNIMPL		System V umount
23	NOARGS		{ int setuid(uid_t uid); }
24	NOARGS		{ uid_t getuid(void); }
25	UNIMPL		svr4_stime
26	UNIMPL		svr4_ptrace
27	STD		{ int svr4_alarm(unsigned sec); }
28	STD		{ int svr4_fstat(int fd, struct svr4_stat *sb); }
29	UNIMPL		svr4_pause
30	UNIMPL		svr4_utime
31	UNIMPL		was stty
32	UNIMPL		was gtty
33	STD		{ int svr4_access(char *path, int flags); }
34	UNIMPL		svr4_nice
35	UNIMPL		svr4_statfs
36	NOARGS		{ int sync(void); }
37	STD		{ int svr4_kill(int pid, int signum); }
38	UNIMPL		svr4_fstatfs
39	STD		{ int svr4_pgrpsys(int cmd, int pid, int pgid); }
40	UNIMPL		svr4_xenix
41	NOARGS		{ int dup(u_int fd); }
42	NOARGS		{ int pipe(void); }
43	STD		{ int svr4_times(struct tms *tp); }
44	UNIMPL		svr4_profil
45	UNIMPL		svr4_plock
46	NOARGS		{ int setgid(gid_t gid); }
47	NOARGS		{ gid_t getgid(void); }
48	STD		{ int svr4_signal(int signum, svr4_sig_t handler); }
#ifdef SYSVMSG
49	UNIMPL		{ int msgsys(int which, int a2, int a3, int a4, \
				     int a5, int a6); }
#else
49	UNIMPL		nosys
#endif
50	STD		{ int svr4_sysarch(int op, void *a1); }
51	UNIMPL		svr4_acct
#ifdef SYSVSHM
52	UNIMPL		{ int shmsys(int which, int a2, int a3, int a4); }
#else
52	UNIMPL		nosys
#endif
#ifdef SYSVSEM
53	UNIMPL		{ int semsys(int which, int a2, int a3, int a4, \
				     int a5); }
#else
53	UNIMPL		nosys
#endif
54	STD		{ int svr4_ioctl(int fd, int com, caddr_t data); }
55	UNIMPL		svr4_uadmin
56	UNIMPL		svr4_exch
57	STD		{ int svr4_utssys(void *a1, void *a2, int sel, \
					  void *a3); }
58	NOARGS		{ int fsync(int fd); }
59	STD		{ int svr4_execve(char *path, \
					  char * * argp, \
					  char * * envp); }
60	NOARGS		{ int umask(int newmask); }
61	NOARGS		{ int chroot(char *path); }
62	STD		{ int svr4_fcntl(int fd, int cmd, char *arg); }
63	STD		{ long svr4_ulimit(int cmd, long newlimit); }
64	UNIMPL		reserved for unix/pc
65	UNIMPL		reserved for unix/pc
66	UNIMPL		reserved for unix/pc
67	UNIMPL		reserved for unix/pc
68	UNIMPL		reserved for unix/pc
69	UNIMPL		reserved for unix/pc
70	OBSOL		svr4_advfs
71	OBSOL		svr4_unadvfs
72	OBSOL		svr4_rmount
73	OBSOL		svr4_rumount
74	OBSOL		svr4_rfstart
75	OBSOL		svr4_sigret
76	OBSOL		svr4_rdebug
77	OBSOL		svr4_rfstop
78	UNIMPL		svr4_rfsys
79	NOARGS		{ int rmdir(char *path); }
80	NOARGS		{ int mkdir(char *path, int mode); }
81	STD		{ int svr4_getdents(int fd, char *buf, int nbytes); }
82	OBSOL		svr4_libattach
83	OBSOL		svr4_libdetach
84	UNIMPL		svr4_sysfs
85	STD		{ int svr4_getmsg(int fd, struct svr4_strbuf *ctl, \
					  struct svr4_strbuf *dat, \
					  int *flags); }
86	STD		{ int svr4_putmsg(int fd, struct svr4_strbuf *ctl, \
					  struct svr4_strbuf *dat, \
					  int flags); }
87	STD		{ int svr4_poll(struct svr4_pollfd *fds, long nfds, \
					int timeout); }
88	STD		{ int svr4_lstat(char *path, \
					 struct svr4_stat *ub); }
89	NOARGS		{ int symlink(char *path, char *link); }
90	NOARGS		{ int readlink(char *path, char *buf, int count); }
91	NOARGS		{ int getgroups(u_int gidsetsize, gid_t *gidset); }
92	NOARGS		{ int setgroups(u_int gidsetsize, gid_t *gidset); }
93	NOARGS		{ int fchmod(int fd, int mode); }
94	NOARGS		{ int fchown(int fd, int uid, int gid); }
95	STD		{ int svr4_sigprocmask(int how, svr4_sigset_t *set, \
					       svr4_sigset_t *oset); }
96	STD		{ int svr4_sigsuspend(svr4_sigset_t *ss); }
97	STD		{ int svr4_sigaltstack(struct svr4_sigaltstack *nss, \
					       struct svr4_sigaltstack *oss); }
98	STD		{ int svr4_sigaction(int signum, \
					     struct svr4_sigaction *nsa, \
					     struct svr4_sigaction *osa); }
99	STD		{ int svr4_sigpending(int what, svr4_sigset_t *mask); }
100	STD		{ int svr4_context(int func, \
					   struct svr4_ucontext *uc); }
101	UNIMPL		svr4_evsys
102	UNIMPL		svr4_evtrapret
103	STD		{ int svr4_statvfs(char *path, \
					   struct svr4_statvfs *fs); }
104	STD		{ int svr4_fstatvfs(int fd, struct svr4_statvfs *fs); }
105	UNIMPL		svr4 reserved
#ifdef NFSSERVER
106	UNIMPL		svr4_nfssvc
#else
106	UNIMPL		nosys
#endif
107	STD		{ int svr4_waitsys(int grp, int id, \
					   union svr4_siginfo *info, \
					   int options); }
108	UNIMPL		svr4_sigsendsys
109	STD		{ int svr4_hrtsys(int cmd, int fun, int sub, \
					  void *rv1, void *rv2); }
110	UNIMPL		svr4_acancel
111	UNIMPL		svr4_async
112	UNIMPL		svr4_priocntlsys
113	UNIMPL		svr4_pathconf
114	UNIMPL		svr4_mincore
115	STD		{ int svr4_mmap(svr4_caddr_t addr, svr4_size_t len, \
					int prot, int flags, int fd, \
					svr4_off_t pos); }
116	NOARGS		{ int mprotect(caddr_t addr, int len, int prot); }
117	NOARGS		{ int munmap(caddr_t addr, int len); }
118	NOARGS		{ int fpathconf(int fd, int name); }
119	NOARGS		{ int vfork(void); }
120	NOARGS		{ int fchdir(int fd); }
121	NOARGS		{ int readv(int fd, struct iovec *iovp, u_int iovcnt); }
122	NOARGS		{ int writev(int fd, struct iovec *iovp, \
			    u_int iovcnt); }
123	STD		{ int svr4_xstat(int two, char *path, \
					 struct svr4_xstat *ub); }
124	STD		{ int svr4_lxstat(int two, char *path, \
					  struct svr4_xstat *ub); }
125	STD		{ int svr4_fxstat(int two, int fd, \
					  struct svr4_xstat *sb); }
126	UNIMPL		svr4_xmknod
127	UNIMPL		svr4_clocal
128	STD		{ int svr4_setrlimit(int which, \
					     struct ogetrlimit *rlp); }
129	STD		{ int svr4_getrlimit(int which, \
					     struct ogetrlimit *rlp); }
130	UNIMPL		svr4_lchown
131	UNIMPL		svr4_memcntl
132	UNIMPL		svr4_getpmsg
133	UNIMPL		svr4_putpmsg
134	NOARGS		{ int rename(char *from, char *to); }
135	STD		{ int svr4_uname(struct svr4_utsname* name, \
					 int dummy); }
136	NOARGS		{ int setegid(gid_t egid); }
137	STD		{ int svr4_sysconfig(int name); }
138	NOARGS		{ int adjtime(struct timeval *delta, \
				      struct timeval *olddelta); }
139	STD		{ long svr4_systeminfo(int what, char *buf, \
					       long len); }
140	UNIMPL		reserved
141	NOARGS		{ int seteuid(uid_t euid); }
142	UNIMPL		vtrace
143	UNIMPL		svr4_fork1
144	UNIMPL		svr4_sigwait
145	UNIMPL		svr4_lwp_info
146	UNIMPL		svr4_yield
147	UNIMPL		svr4_lwp_sema_p
148	UNIMPL		svr4_lwp_sema_v
149	UNIMPL		reserved
150	UNIMPL		reserved
151	UNIMPL		reserved
152	UNIMPL		svr4_modctl
153	STD		{ int svr4_fchroot(int fd); }
154	UNIMPL		svr4_utimes
155	STD		{ int svr4_vhangup(void); }
156	STD		{ int svr4_gettimeofday(struct timeval *tp); }
157	NOARGS		{ int getitimer(u_int which, struct itimerval *itv); }
158	NOARGS		{ int setitimer(u_int which, struct itimerval *itv, \
					struct itimerval *oitv); }
159	UNIMPL		svr4_lwp_create
160	UNIMPL		svr4_lwp_exit
161	UNIMPL		svr4_lwp_suspend
162	UNIMPL		svr4_lwp_continue
163	UNIMPL		svr4_lwp_kill
164	UNIMPL		svr4_lwp_self
165	UNIMPL		svr4_lwp_getprivate
166	UNIMPL		svr4_lwp_setprivate
167	UNIMPL		svr4_lwp_wait
168	UNIMPL		svr4_lwp_mutex_unlock
169	UNIMPL		svr4_lwp_mutex_lock
170	UNIMPL		svr4_lwp_cond_wait
171	UNIMPL		svr4_lwp_cond_signal
172	UNIMPL		svr4_lwp_cond_broadcast
173	UNIMPL		svr4_pread
174	UNIMPL		svr4_pwrite
175	UNIMPL		svr4_llseek
176	UNIMPL		svr4_inst_sync
177	UNIMPL		reserved
178	UNIMPL		reserved
179	UNIMPL		reserved
180	UNIMPL		reserved
181	UNIMPL		reserved
182	UNIMPL		reserved
183	UNIMPL		reserved
184	UNIMPL		reserved
185	UNIMPL		reserved
186	UNIMPL		svr4_auditsys
