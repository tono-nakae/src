/*
 * System call argument lists.
 *
 * DO NOT EDIT-- this file is automatically generated.
 * created from	NetBSD: syscalls.master,v 1.12 1995/08/14 01:27:59 mycroft Exp 
 */

#define	syscallarg(x)	union { x datum; register_t pad; }

struct svr4_open_args {
	syscallarg(char *) path;
	syscallarg(int) flags;
	syscallarg(int) mode;
};

struct svr4_wait_args {
	syscallarg(int *) status;
};

struct svr4_creat_args {
	syscallarg(char *) path;
	syscallarg(int) mode;
};

struct svr4_execv_args {
	syscallarg(char *) path;
	syscallarg(char **) argp;
};

struct svr4_time_args {
	syscallarg(svr4_time_t *) t;
};

struct svr4_mknod_args {
	syscallarg(char *) path;
	syscallarg(int) mode;
	syscallarg(int) dev;
};

struct svr4_break_args {
	syscallarg(caddr_t) nsize;
};

struct svr4_stat_args {
	syscallarg(char *) path;
	syscallarg(struct svr4_stat *) ub;
};

struct svr4_alarm_args {
	syscallarg(unsigned) sec;
};

struct svr4_fstat_args {
	syscallarg(int) fd;
	syscallarg(struct svr4_stat *) sb;
};

struct svr4_access_args {
	syscallarg(char *) path;
	syscallarg(int) flags;
};

struct svr4_kill_args {
	syscallarg(int) pid;
	syscallarg(int) signum;
};

struct svr4_pgrpsys_args {
	syscallarg(int) cmd;
	syscallarg(int) pid;
	syscallarg(int) pgid;
};

struct svr4_times_args {
	syscallarg(struct tms *) tp;
};

struct svr4_signal_args {
	syscallarg(int) signum;
	syscallarg(svr4_sig_t) handler;
};

struct svr4_sysarch_args {
	syscallarg(int) op;
	syscallarg(void *) a1;
};

struct svr4_ioctl_args {
	syscallarg(int) fd;
	syscallarg(int) com;
	syscallarg(caddr_t) data;
};

struct svr4_utssys_args {
	syscallarg(void *) a1;
	syscallarg(void *) a2;
	syscallarg(int) sel;
	syscallarg(void *) a3;
};

struct svr4_execve_args {
	syscallarg(char *) path;
	syscallarg(char **) argp;
	syscallarg(char **) envp;
};

struct svr4_fcntl_args {
	syscallarg(int) fd;
	syscallarg(int) cmd;
	syscallarg(char *) arg;
};

struct svr4_ulimit_args {
	syscallarg(int) cmd;
	syscallarg(long) newlimit;
};

struct svr4_getdents_args {
	syscallarg(int) fd;
	syscallarg(char *) buf;
	syscallarg(int) nbytes;
};

struct svr4_getmsg_args {
	syscallarg(int) fd;
	syscallarg(struct svr4_strbuf *) ctl;
	syscallarg(struct svr4_strbuf *) dat;
	syscallarg(int *) flags;
};

struct svr4_putmsg_args {
	syscallarg(int) fd;
	syscallarg(struct svr4_strbuf *) ctl;
	syscallarg(struct svr4_strbuf *) dat;
	syscallarg(int) flags;
};

struct svr4_poll_args {
	syscallarg(struct svr4_pollfd *) fds;
	syscallarg(long) nfds;
	syscallarg(int) timeout;
};

struct svr4_lstat_args {
	syscallarg(char *) path;
	syscallarg(struct svr4_stat *) ub;
};

struct svr4_sigprocmask_args {
	syscallarg(int) how;
	syscallarg(svr4_sigset_t *) set;
	syscallarg(svr4_sigset_t *) oset;
};

struct svr4_sigsuspend_args {
	syscallarg(svr4_sigset_t *) ss;
};

struct svr4_sigaltstack_args {
	syscallarg(struct svr4_sigaltstack *) nss;
	syscallarg(struct svr4_sigaltstack *) oss;
};

struct svr4_sigaction_args {
	syscallarg(int) signum;
	syscallarg(struct svr4_sigaction *) nsa;
	syscallarg(struct svr4_sigaction *) osa;
};

struct svr4_sigpending_args {
	syscallarg(int) what;
	syscallarg(svr4_sigset_t *) mask;
};

struct svr4_context_args {
	syscallarg(int) func;
	syscallarg(struct svr4_ucontext *) uc;
};

struct svr4_statvfs_args {
	syscallarg(char *) path;
	syscallarg(struct svr4_statvfs *) fs;
};

struct svr4_fstatvfs_args {
	syscallarg(int) fd;
	syscallarg(struct svr4_statvfs *) fs;
};

struct svr4_waitsys_args {
	syscallarg(int) grp;
	syscallarg(int) id;
	syscallarg(union svr4_siginfo *) info;
	syscallarg(int) options;
};

struct svr4_hrtsys_args {
	syscallarg(int) cmd;
	syscallarg(int) fun;
	syscallarg(int) sub;
	syscallarg(void *) rv1;
	syscallarg(void *) rv2;
};

struct svr4_mmap_args {
	syscallarg(svr4_caddr_t) addr;
	syscallarg(svr4_size_t) len;
	syscallarg(int) prot;
	syscallarg(int) flags;
	syscallarg(int) fd;
	syscallarg(svr4_off_t) pos;
};

struct svr4_xstat_args {
	syscallarg(int) two;
	syscallarg(char *) path;
	syscallarg(struct svr4_xstat *) ub;
};

struct svr4_lxstat_args {
	syscallarg(int) two;
	syscallarg(char *) path;
	syscallarg(struct svr4_xstat *) ub;
};

struct svr4_fxstat_args {
	syscallarg(int) two;
	syscallarg(int) fd;
	syscallarg(struct svr4_xstat *) sb;
};

struct svr4_setrlimit_args {
	syscallarg(int) which;
	syscallarg(struct ogetrlimit *) rlp;
};

struct svr4_getrlimit_args {
	syscallarg(int) which;
	syscallarg(struct ogetrlimit *) rlp;
};

struct svr4_uname_args {
	syscallarg(struct svr4_utsname *) name;
	syscallarg(int) dummy;
};

struct svr4_sysconfig_args {
	syscallarg(int) name;
};

struct svr4_systeminfo_args {
	syscallarg(int) what;
	syscallarg(char *) buf;
	syscallarg(long) len;
};

struct svr4_fchroot_args {
	syscallarg(int) fd;
};

struct svr4_gettimeofday_args {
	syscallarg(struct timeval *) tp;
};

#undef	syscallarg

/*
 * System call prototypes.
 */

int	nosys	__P((struct proc *, void *, register_t *));
int	exit	__P((struct proc *, void *, register_t *));
int	fork	__P((struct proc *, void *, register_t *));
int	read	__P((struct proc *, void *, register_t *));
int	write	__P((struct proc *, void *, register_t *));
int	svr4_open	__P((struct proc *, void *, register_t *));
int	close	__P((struct proc *, void *, register_t *));
int	svr4_wait	__P((struct proc *, void *, register_t *));
int	svr4_creat	__P((struct proc *, void *, register_t *));
int	link	__P((struct proc *, void *, register_t *));
int	unlink	__P((struct proc *, void *, register_t *));
int	svr4_execv	__P((struct proc *, void *, register_t *));
int	chdir	__P((struct proc *, void *, register_t *));
int	svr4_time	__P((struct proc *, void *, register_t *));
int	svr4_mknod	__P((struct proc *, void *, register_t *));
int	chmod	__P((struct proc *, void *, register_t *));
int	chown	__P((struct proc *, void *, register_t *));
int	svr4_break	__P((struct proc *, void *, register_t *));
int	svr4_stat	__P((struct proc *, void *, register_t *));
int	compat_43_lseek	__P((struct proc *, void *, register_t *));
int	getpid	__P((struct proc *, void *, register_t *));
int	setuid	__P((struct proc *, void *, register_t *));
int	getuid	__P((struct proc *, void *, register_t *));
int	svr4_alarm	__P((struct proc *, void *, register_t *));
int	svr4_fstat	__P((struct proc *, void *, register_t *));
int	svr4_access	__P((struct proc *, void *, register_t *));
int	sync	__P((struct proc *, void *, register_t *));
int	svr4_kill	__P((struct proc *, void *, register_t *));
int	svr4_pgrpsys	__P((struct proc *, void *, register_t *));
int	dup	__P((struct proc *, void *, register_t *));
int	pipe	__P((struct proc *, void *, register_t *));
int	svr4_times	__P((struct proc *, void *, register_t *));
int	setgid	__P((struct proc *, void *, register_t *));
int	getgid	__P((struct proc *, void *, register_t *));
int	svr4_signal	__P((struct proc *, void *, register_t *));
#ifdef SYSVMSG
#else
#endif
int	svr4_sysarch	__P((struct proc *, void *, register_t *));
#ifdef SYSVSHM
#else
#endif
#ifdef SYSVSEM
#else
#endif
int	svr4_ioctl	__P((struct proc *, void *, register_t *));
int	svr4_utssys	__P((struct proc *, void *, register_t *));
int	fsync	__P((struct proc *, void *, register_t *));
int	svr4_execve	__P((struct proc *, void *, register_t *));
int	umask	__P((struct proc *, void *, register_t *));
int	chroot	__P((struct proc *, void *, register_t *));
int	svr4_fcntl	__P((struct proc *, void *, register_t *));
int	svr4_ulimit	__P((struct proc *, void *, register_t *));
int	rmdir	__P((struct proc *, void *, register_t *));
int	mkdir	__P((struct proc *, void *, register_t *));
int	svr4_getdents	__P((struct proc *, void *, register_t *));
int	svr4_getmsg	__P((struct proc *, void *, register_t *));
int	svr4_putmsg	__P((struct proc *, void *, register_t *));
int	svr4_poll	__P((struct proc *, void *, register_t *));
int	svr4_lstat	__P((struct proc *, void *, register_t *));
int	symlink	__P((struct proc *, void *, register_t *));
int	readlink	__P((struct proc *, void *, register_t *));
int	getgroups	__P((struct proc *, void *, register_t *));
int	setgroups	__P((struct proc *, void *, register_t *));
int	fchmod	__P((struct proc *, void *, register_t *));
int	fchown	__P((struct proc *, void *, register_t *));
int	svr4_sigprocmask	__P((struct proc *, void *, register_t *));
int	svr4_sigsuspend	__P((struct proc *, void *, register_t *));
int	svr4_sigaltstack	__P((struct proc *, void *, register_t *));
int	svr4_sigaction	__P((struct proc *, void *, register_t *));
int	svr4_sigpending	__P((struct proc *, void *, register_t *));
int	svr4_context	__P((struct proc *, void *, register_t *));
int	svr4_statvfs	__P((struct proc *, void *, register_t *));
int	svr4_fstatvfs	__P((struct proc *, void *, register_t *));
#ifdef NFSSERVER
#else
#endif
int	svr4_waitsys	__P((struct proc *, void *, register_t *));
int	svr4_hrtsys	__P((struct proc *, void *, register_t *));
int	svr4_mmap	__P((struct proc *, void *, register_t *));
int	mprotect	__P((struct proc *, void *, register_t *));
int	munmap	__P((struct proc *, void *, register_t *));
int	fpathconf	__P((struct proc *, void *, register_t *));
int	vfork	__P((struct proc *, void *, register_t *));
int	fchdir	__P((struct proc *, void *, register_t *));
int	readv	__P((struct proc *, void *, register_t *));
int	writev	__P((struct proc *, void *, register_t *));
int	svr4_xstat	__P((struct proc *, void *, register_t *));
int	svr4_lxstat	__P((struct proc *, void *, register_t *));
int	svr4_fxstat	__P((struct proc *, void *, register_t *));
int	svr4_setrlimit	__P((struct proc *, void *, register_t *));
int	svr4_getrlimit	__P((struct proc *, void *, register_t *));
int	rename	__P((struct proc *, void *, register_t *));
int	svr4_uname	__P((struct proc *, void *, register_t *));
int	setegid	__P((struct proc *, void *, register_t *));
int	svr4_sysconfig	__P((struct proc *, void *, register_t *));
int	adjtime	__P((struct proc *, void *, register_t *));
int	svr4_systeminfo	__P((struct proc *, void *, register_t *));
int	seteuid	__P((struct proc *, void *, register_t *));
int	svr4_fchroot	__P((struct proc *, void *, register_t *));
int	svr4_vhangup	__P((struct proc *, void *, register_t *));
int	svr4_gettimeofday	__P((struct proc *, void *, register_t *));
int	getitimer	__P((struct proc *, void *, register_t *));
int	setitimer	__P((struct proc *, void *, register_t *));

#ifdef COMPAT_43
#define compat_43(func) __CONCAT(compat_43_,func)

#ifdef SYSVMSG
#else
#endif
#ifdef SYSVSHM
#else
#endif
#ifdef SYSVSEM
#else
#endif
#ifdef NFSSERVER
#else
#endif

#else /* COMPAT_43 */
#define compat_43(func) nosys
#endif /* COMPAT_43 */


#ifdef COMPAT_09
#define compat_09(func) __CONCAT(compat_09_,func)

#ifdef SYSVMSG
#else
#endif
#ifdef SYSVSHM
#else
#endif
#ifdef SYSVSEM
#else
#endif
#ifdef NFSSERVER
#else
#endif

#else /* COMPAT_09 */
#define compat_09(func) nosys
#endif /* COMPAT_09 */


#ifdef COMPAT_10
#define compat_10(func) __CONCAT(compat_10_,func)

#ifdef SYSVMSG
#else
#endif
#ifdef SYSVSHM
#else
#endif
#ifdef SYSVSEM
#else
#endif
#ifdef NFSSERVER
#else
#endif

#else /* COMPAT_10 */
#define compat_10(func) nosys
#endif /* COMPAT_10 */

