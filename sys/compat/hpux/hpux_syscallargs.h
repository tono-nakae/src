/*
 * System call argument lists.
 *
 * DO NOT EDIT-- this file is automatically generated.
 * created from	NetBSD: syscalls.master,v 1.10 1995/03/31 03:06:51 christos Exp 
 */

#define	syscallarg(x)	union { x datum; register_t pad; }

struct hpux_read_args {
	syscallarg(int) fd;
	syscallarg(char *) buf;
	syscallarg(u_int) nbyte;
};

struct hpux_write_args {
	syscallarg(int) fd;
	syscallarg(char *) buf;
	syscallarg(u_int) nbyte;
};

struct hpux_open_args {
	syscallarg(char *) path;
	syscallarg(int) flags;
	syscallarg(int) mode;
};

struct hpux_wait_args {
	syscallarg(int *) status;
};

struct hpux_creat_args {
	syscallarg(char *) path;
	syscallarg(int) mode;
};

struct hpux_execv_args {
	syscallarg(char *) path;
	syscallarg(char **) argp;
};

struct compat_hpux_6x_time_args {
	syscallarg(time_t *) t;
};

struct compat_hpux_6x_stat_args {
	syscallarg(char *) path;
	syscallarg(struct hpux_ostat *) sb;
};

struct compat_hpux_6x_stime_args {
	syscallarg(int) time;
};

struct hpux_ptrace_args {
	syscallarg(int) req;
	syscallarg(int) pid;
	syscallarg(int *) addr;
	syscallarg(int) data;
};

struct compat_hpux_6x_alarm_args {
	syscallarg(int) deltat;
};

struct compat_hpux_6x_fstat_args {
	syscallarg(int) fd;
	syscallarg(struct hpux_ostat *) sb;
};

struct compat_hpux_6x_utime_args {
	syscallarg(char *) fname;
	syscallarg(time_t *) tptr;
};

struct compat_hpux_6x_stty_args {
	syscallarg(int) fd;
	syscallarg(caddr_t) arg;
};

struct compat_hpux_6x_gtty_args {
	syscallarg(int) fd;
	syscallarg(caddr_t) arg;
};

struct compat_hpux_6x_nice_args {
	syscallarg(int) nval;
};

struct compat_hpux_6x_ftime_args {
	syscallarg(struct hpux_timeb *) tp;
};

struct hpux_kill_args {
	syscallarg(pid_t) pid;
	syscallarg(int) signo;
};

struct hpux_stat_args {
	syscallarg(char *) path;
	syscallarg(struct hpux_stat *) sb;
};

struct hpux_lstat_args {
	syscallarg(char *) path;
	syscallarg(struct hpux_stat *) sb;
};

struct hpux_dup_args {
	syscallarg(int) fd;
};

struct compat_hpux_6x_times_args {
	syscallarg(struct tms *) tms;
};

struct compat_hpux_6x_ssig_args {
	syscallarg(int) signo;
	syscallarg(sig_t) fun;
};

struct hpux_ioctl_args {
	syscallarg(int) fd;
	syscallarg(int) com;
	syscallarg(caddr_t) data;
};

struct hpux_utssys_args {
	syscallarg(struct hpux_utsname *) uts;
	syscallarg(int) dev;
	syscallarg(int) request;
};

struct hpux_fcntl_args {
	syscallarg(int) fd;
	syscallarg(int) cmd;
	syscallarg(int) arg;
};

struct hpux_ulimit_args {
	syscallarg(int) cmd;
	syscallarg(int) newlimit;
};

struct hpux_mmap_args {
	syscallarg(caddr_t) addr;
	syscallarg(int) len;
	syscallarg(int) prot;
	syscallarg(int) flags;
	syscallarg(int) fd;
	syscallarg(long) pos;
};

struct hpux_getpgrp2_args {
	syscallarg(pid_t) pid;
};

struct hpux_setpgrp2_args {
	syscallarg(pid_t) pid;
	syscallarg(pid_t) pgid;
};

struct hpux_wait3_args {
	syscallarg(int *) status;
	syscallarg(int) options;
	syscallarg(int) rusage;
};

struct hpux_fstat_args {
	syscallarg(int) fd;
	syscallarg(struct hpux_stat *) sb;
};

struct hpux_sigvec_args {
	syscallarg(int) signo;
	syscallarg(struct sigvec *) nsv;
	syscallarg(struct sigvec *) osv;
};

struct hpux_sigblock_args {
	syscallarg(int) mask;
};

struct hpux_sigsetmask_args {
	syscallarg(int) mask;
};

struct hpux_sigpause_args {
	syscallarg(int) mask;
};

struct hpux_readv_args {
	syscallarg(int) fd;
	syscallarg(struct iovec *) iovp;
	syscallarg(u_int) iovcnt;
};

struct hpux_writev_args {
	syscallarg(int) fd;
	syscallarg(struct iovec *) iovp;
	syscallarg(u_int) iovcnt;
};

struct hpux_setresuid_args {
	syscallarg(uid_t) r;
	syscallarg(uid_t) e;
	syscallarg(uid_t) s;
};

struct hpux_setresgid_args {
	syscallarg(gid_t) r;
	syscallarg(gid_t) e;
	syscallarg(gid_t) s;
};

struct hpux_sysconf_args {
	syscallarg(int) name;
};

struct hpux_getrlimit_args {
	syscallarg(u_int) which;
	syscallarg(struct ogetrlimit *) rlp;
};

struct hpux_setrlimit_args {
	syscallarg(u_int) which;
	syscallarg(struct ogetrlimit *) rlp;
};

struct hpux_rtprio_args {
	syscallarg(pid_t) pid;
	syscallarg(int) prio;
};

struct hpux_netioctl_args {
	syscallarg(int) call;
	syscallarg(int *) args;
};

struct hpux_lockf_args {
	syscallarg(int) fd;
	syscallarg(int) func;
	syscallarg(long) size;
};

struct hpux_shmctl_args {
	syscallarg(int) shmid;
	syscallarg(int) cmd;
	syscallarg(caddr_t) buf;
};

struct hpux_advise_args {
	syscallarg(int) arg;
};

struct hpux_getcontext_args {
	syscallarg(char *) buf;
	syscallarg(int) len;
};

struct hpux_getaccess_args {
	syscallarg(char *) path;
	syscallarg(uid_t) uid;
	syscallarg(int) ngroups;
	syscallarg(gid_t *) gidset;
	syscallarg(void *) label;
	syscallarg(void *) privs;
};

struct hpux_waitpid_args {
	syscallarg(pid_t) pid;
	syscallarg(int *) status;
	syscallarg(int) options;
	syscallarg(struct rusage *) rusage;
};

struct hpux_sigaction_args {
	syscallarg(int) signo;
	syscallarg(struct hpux_sigaction *) nsa;
	syscallarg(struct hpux_sigaction *) osa;
};

struct hpux_sigprocmask_args {
	syscallarg(int) how;
	syscallarg(hpux_sigset_t *) set;
	syscallarg(hpux_sigset_t *) oset;
};

struct hpux_sigpending_args {
	syscallarg(hpux_sigset_t *) set;
};

struct hpux_sigsuspend_args {
	syscallarg(hpux_sigset_t *) set;
};

struct hpux_setsockopt2_args {
	syscallarg(int) s;
	syscallarg(int) level;
	syscallarg(int) name;
	syscallarg(caddr_t) val;
	syscallarg(int) valsize;
};

struct hpux_nshmctl_args {
	syscallarg(int) shmid;
	syscallarg(int) cmd;
	syscallarg(caddr_t) buf;
};

#undef	syscallarg
