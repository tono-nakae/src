/*
 * System call argument lists.
 *
 * DO NOT EDIT-- this file is automatically generated.
 * created from	NetBSD: syscalls.master,v 1.7 1995/05/10 16:45:47 christos Exp 
 */

#define	syscallarg(x)	union { x datum; register_t pad; }

struct hpux_read_args {
	syscallarg(int) fd;
	syscallarg(char *) buf;
	syscallarg(u_int) nbyte;
};

struct hpux_write_args {
	syscallarg(int) fd;
	syscallarg(char *) buf;
	syscallarg(u_int) nbyte;
};

struct hpux_open_args {
	syscallarg(char *) path;
	syscallarg(int) flags;
	syscallarg(int) mode;
};

struct hpux_wait_args {
	syscallarg(int *) status;
};

struct hpux_creat_args {
	syscallarg(char *) path;
	syscallarg(int) mode;
};

struct hpux_execv_args {
	syscallarg(char *) path;
	syscallarg(char **) argp;
};

struct compat_hpux_6x_time_args {
	syscallarg(time_t *) t;
};

struct compat_hpux_6x_stat_args {
	syscallarg(char *) path;
	syscallarg(struct hpux_ostat *) sb;
};

struct compat_hpux_6x_stime_args {
	syscallarg(int) time;
};

struct hpux_ptrace_args {
	syscallarg(int) req;
	syscallarg(int) pid;
	syscallarg(int *) addr;
	syscallarg(int) data;
};

struct compat_hpux_6x_alarm_args {
	syscallarg(int) deltat;
};

struct compat_hpux_6x_fstat_args {
	syscallarg(int) fd;
	syscallarg(struct hpux_ostat *) sb;
};

struct compat_hpux_6x_utime_args {
	syscallarg(char *) fname;
	syscallarg(time_t *) tptr;
};

struct compat_hpux_6x_stty_args {
	syscallarg(int) fd;
	syscallarg(caddr_t) arg;
};

struct compat_hpux_6x_gtty_args {
	syscallarg(int) fd;
	syscallarg(caddr_t) arg;
};

struct compat_hpux_6x_nice_args {
	syscallarg(int) nval;
};

struct compat_hpux_6x_ftime_args {
	syscallarg(struct hpux_timeb *) tp;
};

struct hpux_kill_args {
	syscallarg(pid_t) pid;
	syscallarg(int) signo;
};

struct hpux_stat_args {
	syscallarg(char *) path;
	syscallarg(struct hpux_stat *) sb;
};

struct hpux_lstat_args {
	syscallarg(char *) path;
	syscallarg(struct hpux_stat *) sb;
};

struct hpux_dup_args {
	syscallarg(int) fd;
};

struct compat_hpux_6x_times_args {
	syscallarg(struct tms *) tms;
};

struct compat_hpux_6x_ssig_args {
	syscallarg(int) signo;
	syscallarg(sig_t) fun;
};

struct hpux_ioctl_args {
	syscallarg(int) fd;
	syscallarg(int) com;
	syscallarg(caddr_t) data;
};

struct hpux_utssys_args {
	syscallarg(struct hpux_utsname *) uts;
	syscallarg(int) dev;
	syscallarg(int) request;
};

struct hpux_fcntl_args {
	syscallarg(int) fd;
	syscallarg(int) cmd;
	syscallarg(int) arg;
};

struct hpux_ulimit_args {
	syscallarg(int) cmd;
	syscallarg(int) newlimit;
};

struct hpux_mmap_args {
	syscallarg(caddr_t) addr;
	syscallarg(int) len;
	syscallarg(int) prot;
	syscallarg(int) flags;
	syscallarg(int) fd;
	syscallarg(long) pos;
};

struct hpux_getpgrp2_args {
	syscallarg(pid_t) pid;
};

struct hpux_setpgrp2_args {
	syscallarg(pid_t) pid;
	syscallarg(pid_t) pgid;
};

struct hpux_wait3_args {
	syscallarg(int *) status;
	syscallarg(int) options;
	syscallarg(int) rusage;
};

struct hpux_fstat_args {
	syscallarg(int) fd;
	syscallarg(struct hpux_stat *) sb;
};

struct hpux_sigvec_args {
	syscallarg(int) signo;
	syscallarg(struct sigvec *) nsv;
	syscallarg(struct sigvec *) osv;
};

struct hpux_sigblock_args {
	syscallarg(int) mask;
};

struct hpux_sigsetmask_args {
	syscallarg(int) mask;
};

struct hpux_sigpause_args {
	syscallarg(int) mask;
};

struct hpux_readv_args {
	syscallarg(int) fd;
	syscallarg(struct iovec *) iovp;
	syscallarg(u_int) iovcnt;
};

struct hpux_writev_args {
	syscallarg(int) fd;
	syscallarg(struct iovec *) iovp;
	syscallarg(u_int) iovcnt;
};

struct hpux_setresuid_args {
	syscallarg(uid_t) r;
	syscallarg(uid_t) e;
	syscallarg(uid_t) s;
};

struct hpux_setresgid_args {
	syscallarg(gid_t) r;
	syscallarg(gid_t) e;
	syscallarg(gid_t) s;
};

struct hpux_sysconf_args {
	syscallarg(int) name;
};

struct hpux_getrlimit_args {
	syscallarg(u_int) which;
	syscallarg(struct ogetrlimit *) rlp;
};

struct hpux_setrlimit_args {
	syscallarg(u_int) which;
	syscallarg(struct ogetrlimit *) rlp;
};

struct hpux_rtprio_args {
	syscallarg(pid_t) pid;
	syscallarg(int) prio;
};

struct hpux_netioctl_args {
	syscallarg(int) call;
	syscallarg(int *) args;
};

struct hpux_lockf_args {
	syscallarg(int) fd;
	syscallarg(int) func;
	syscallarg(long) size;
};

struct hpux_shmctl_args {
	syscallarg(int) shmid;
	syscallarg(int) cmd;
	syscallarg(caddr_t) buf;
};

struct hpux_advise_args {
	syscallarg(int) arg;
};

struct hpux_getcontext_args {
	syscallarg(char *) buf;
	syscallarg(int) len;
};

struct hpux_getaccess_args {
	syscallarg(char *) path;
	syscallarg(uid_t) uid;
	syscallarg(int) ngroups;
	syscallarg(gid_t *) gidset;
	syscallarg(void *) label;
	syscallarg(void *) privs;
};

struct hpux_waitpid_args {
	syscallarg(pid_t) pid;
	syscallarg(int *) status;
	syscallarg(int) options;
	syscallarg(struct rusage *) rusage;
};

struct hpux_sigaction_args {
	syscallarg(int) signo;
	syscallarg(struct hpux_sigaction *) nsa;
	syscallarg(struct hpux_sigaction *) osa;
};

struct hpux_sigprocmask_args {
	syscallarg(int) how;
	syscallarg(hpux_sigset_t *) set;
	syscallarg(hpux_sigset_t *) oset;
};

struct hpux_sigpending_args {
	syscallarg(hpux_sigset_t *) set;
};

struct hpux_sigsuspend_args {
	syscallarg(hpux_sigset_t *) set;
};

struct hpux_setsockopt2_args {
	syscallarg(int) s;
	syscallarg(int) level;
	syscallarg(int) name;
	syscallarg(caddr_t) val;
	syscallarg(int) valsize;
};

struct hpux_nshmctl_args {
	syscallarg(int) shmid;
	syscallarg(int) cmd;
	syscallarg(caddr_t) buf;
};

#undef	syscallarg

/*
 * System call prototypes.
 */

int	nosys	__P((struct proc *, void *, register_t *));
int	exit	__P((struct proc *, void *, register_t *));
int	hpux_fork	__P((struct proc *, void *, register_t *));
int	hpux_read	__P((struct proc *, void *, register_t *));
int	hpux_write	__P((struct proc *, void *, register_t *));
int	hpux_open	__P((struct proc *, void *, register_t *));
int	close	__P((struct proc *, void *, register_t *));
int	hpux_wait	__P((struct proc *, void *, register_t *));
int	hpux_creat	__P((struct proc *, void *, register_t *));
int	link	__P((struct proc *, void *, register_t *));
int	unlink	__P((struct proc *, void *, register_t *));
int	hpux_execv	__P((struct proc *, void *, register_t *));
int	chdir	__P((struct proc *, void *, register_t *));
int	mknod	__P((struct proc *, void *, register_t *));
int	chmod	__P((struct proc *, void *, register_t *));
int	chown	__P((struct proc *, void *, register_t *));
int	obreak	__P((struct proc *, void *, register_t *));
int	compat_43_lseek	__P((struct proc *, void *, register_t *));
int	getpid	__P((struct proc *, void *, register_t *));
int	setuid	__P((struct proc *, void *, register_t *));
int	getuid	__P((struct proc *, void *, register_t *));
int	hpux_ptrace	__P((struct proc *, void *, register_t *));
int	access	__P((struct proc *, void *, register_t *));
int	sync	__P((struct proc *, void *, register_t *));
int	hpux_kill	__P((struct proc *, void *, register_t *));
int	hpux_stat	__P((struct proc *, void *, register_t *));
int	hpux_lstat	__P((struct proc *, void *, register_t *));
int	hpux_dup	__P((struct proc *, void *, register_t *));
int	pipe	__P((struct proc *, void *, register_t *));
int	profil	__P((struct proc *, void *, register_t *));
int	setgid	__P((struct proc *, void *, register_t *));
int	getgid	__P((struct proc *, void *, register_t *));
int	hpux_ioctl	__P((struct proc *, void *, register_t *));
int	symlink	__P((struct proc *, void *, register_t *));
int	hpux_utssys	__P((struct proc *, void *, register_t *));
int	readlink	__P((struct proc *, void *, register_t *));
int	execve	__P((struct proc *, void *, register_t *));
int	umask	__P((struct proc *, void *, register_t *));
int	chroot	__P((struct proc *, void *, register_t *));
int	hpux_fcntl	__P((struct proc *, void *, register_t *));
int	hpux_ulimit	__P((struct proc *, void *, register_t *));
int	hpux_vfork	__P((struct proc *, void *, register_t *));
int	hpux_read	__P((struct proc *, void *, register_t *));
int	hpux_write	__P((struct proc *, void *, register_t *));
int	hpux_mmap	__P((struct proc *, void *, register_t *));
int	munmap	__P((struct proc *, void *, register_t *));
int	mprotect	__P((struct proc *, void *, register_t *));
int	getgroups	__P((struct proc *, void *, register_t *));
int	setgroups	__P((struct proc *, void *, register_t *));
int	hpux_getpgrp2	__P((struct proc *, void *, register_t *));
int	hpux_setpgrp2	__P((struct proc *, void *, register_t *));
int	setitimer	__P((struct proc *, void *, register_t *));
int	hpux_wait3	__P((struct proc *, void *, register_t *));
int	getitimer	__P((struct proc *, void *, register_t *));
int	dup2	__P((struct proc *, void *, register_t *));
int	hpux_fstat	__P((struct proc *, void *, register_t *));
int	select	__P((struct proc *, void *, register_t *));
int	fsync	__P((struct proc *, void *, register_t *));
int	sigreturn	__P((struct proc *, void *, register_t *));
int	hpux_sigvec	__P((struct proc *, void *, register_t *));
int	hpux_sigblock	__P((struct proc *, void *, register_t *));
int	hpux_sigsetmask	__P((struct proc *, void *, register_t *));
int	hpux_sigpause	__P((struct proc *, void *, register_t *));
int	compat_43_sigstack	__P((struct proc *, void *, register_t *));
int	gettimeofday	__P((struct proc *, void *, register_t *));
int	hpux_readv	__P((struct proc *, void *, register_t *));
int	hpux_writev	__P((struct proc *, void *, register_t *));
int	settimeofday	__P((struct proc *, void *, register_t *));
int	fchown	__P((struct proc *, void *, register_t *));
int	fchmod	__P((struct proc *, void *, register_t *));
int	hpux_setresuid	__P((struct proc *, void *, register_t *));
int	hpux_setresgid	__P((struct proc *, void *, register_t *));
int	rename	__P((struct proc *, void *, register_t *));
int	compat_43_truncate	__P((struct proc *, void *, register_t *));
int	compat_43_ftruncate	__P((struct proc *, void *, register_t *));
int	hpux_sysconf	__P((struct proc *, void *, register_t *));
int	mkdir	__P((struct proc *, void *, register_t *));
int	rmdir	__P((struct proc *, void *, register_t *));
int	hpux_getrlimit	__P((struct proc *, void *, register_t *));
int	hpux_setrlimit	__P((struct proc *, void *, register_t *));
int	hpux_rtprio	__P((struct proc *, void *, register_t *));
int	hpux_netioctl	__P((struct proc *, void *, register_t *));
int	hpux_lockf	__P((struct proc *, void *, register_t *));
#ifdef SYSVSEM
int	semget	__P((struct proc *, void *, register_t *));
int	__semctl	__P((struct proc *, void *, register_t *));
int	semop	__P((struct proc *, void *, register_t *));
#else
#endif
#ifdef SYSVMSG
int	msgget	__P((struct proc *, void *, register_t *));
int	msgctl	__P((struct proc *, void *, register_t *));
int	msgsnd	__P((struct proc *, void *, register_t *));
int	msgrcv	__P((struct proc *, void *, register_t *));
#else
#endif
#ifdef SYSVSHM
int	shmget	__P((struct proc *, void *, register_t *));
int	hpux_shmctl	__P((struct proc *, void *, register_t *));
int	shmat	__P((struct proc *, void *, register_t *));
int	shmdt	__P((struct proc *, void *, register_t *));
#else
#endif
int	hpux_advise	__P((struct proc *, void *, register_t *));
int	hpux_getcontext	__P((struct proc *, void *, register_t *));
int	hpux_getaccess	__P((struct proc *, void *, register_t *));
int	hpux_waitpid	__P((struct proc *, void *, register_t *));
int	pathconf	__P((struct proc *, void *, register_t *));
int	fpathconf	__P((struct proc *, void *, register_t *));
int	compat_43_getdirentries	__P((struct proc *, void *, register_t *));
int	compat_09_getdomainname	__P((struct proc *, void *, register_t *));
int	compat_09_setdomainname	__P((struct proc *, void *, register_t *));
int	hpux_sigaction	__P((struct proc *, void *, register_t *));
int	hpux_sigprocmask	__P((struct proc *, void *, register_t *));
int	hpux_sigpending	__P((struct proc *, void *, register_t *));
int	hpux_sigsuspend	__P((struct proc *, void *, register_t *));
int	compat_43_getdtablesize	__P((struct proc *, void *, register_t *));
int	fchdir	__P((struct proc *, void *, register_t *));
int	compat_43_accept	__P((struct proc *, void *, register_t *));
int	bind	__P((struct proc *, void *, register_t *));
int	connect	__P((struct proc *, void *, register_t *));
int	compat_43_getpeername	__P((struct proc *, void *, register_t *));
int	compat_43_getsockname	__P((struct proc *, void *, register_t *));
int	getsockopt	__P((struct proc *, void *, register_t *));
int	listen	__P((struct proc *, void *, register_t *));
int	compat_43_recv	__P((struct proc *, void *, register_t *));
int	compat_43_recvfrom	__P((struct proc *, void *, register_t *));
int	compat_43_recvmsg	__P((struct proc *, void *, register_t *));
int	compat_43_send	__P((struct proc *, void *, register_t *));
int	compat_43_sendmsg	__P((struct proc *, void *, register_t *));
int	sendto	__P((struct proc *, void *, register_t *));
int	hpux_setsockopt2	__P((struct proc *, void *, register_t *));
int	shutdown	__P((struct proc *, void *, register_t *));
int	socket	__P((struct proc *, void *, register_t *));
int	socketpair	__P((struct proc *, void *, register_t *));
#ifdef SYSVSEM
int	__semctl	__P((struct proc *, void *, register_t *));
#else
#endif
#ifdef SYSVMSG
int	msgctl	__P((struct proc *, void *, register_t *));
#else
#endif
#ifdef SYSVSHM
int	hpux_nshmctl	__P((struct proc *, void *, register_t *));
#else
#endif

#ifdef COMPAT_HPUX_6X
#define compat_hpux_6x(func) __CONCAT(compat_hpux_6x_,func)

int	compat_hpux_6x(time)	__P((struct proc *, void *, register_t *));
int	compat_hpux_6x(stat)	__P((struct proc *, void *, register_t *));
int	compat_hpux_6x(stime)	__P((struct proc *, void *, register_t *));
int	compat_hpux_6x(alarm)	__P((struct proc *, void *, register_t *));
int	compat_hpux_6x(fstat)	__P((struct proc *, void *, register_t *));
int	compat_hpux_6x(pause)	__P((struct proc *, void *, register_t *));
int	compat_hpux_6x(utime)	__P((struct proc *, void *, register_t *));
int	compat_hpux_6x(stty)	__P((struct proc *, void *, register_t *));
int	compat_hpux_6x(gtty)	__P((struct proc *, void *, register_t *));
int	compat_hpux_6x(nice)	__P((struct proc *, void *, register_t *));
int	compat_hpux_6x(ftime)	__P((struct proc *, void *, register_t *));
int	compat_hpux_6x(setpgrp)	__P((struct proc *, void *, register_t *));
int	compat_hpux_6x(times)	__P((struct proc *, void *, register_t *));
int	compat_hpux_6x(ssig)	__P((struct proc *, void *, register_t *));
#ifdef SYSVSEM
#else
#endif
#ifdef SYSVMSG
#else
#endif
#ifdef SYSVSHM
#else
#endif
#ifdef SYSVSEM
#else
#endif
#ifdef SYSVMSG
#else
#endif
#ifdef SYSVSHM
#else
#endif

#else /* COMPAT_HPUX_6X */
#define compat_hpux_6x(func) nosys
#endif /* COMPAT_HPUX_6X */

