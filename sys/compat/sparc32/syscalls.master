	$NetBSD: syscalls.master,v 1.3 1998/10/01 14:27:58 eeh Exp $

;	from: NetBSD: syscalls.master,v 1.81 1998/07/05 08:49:50 jonathan Exp
;	@(#)syscalls.master	8.2 (Berkeley) 1/13/94

; NetBSD system call name/number "master" file.
; (See syscalls.conf to see what it is processed into.)
;
; Fields: number type [type-dependent ...]
;	number	system call number, must be in order
;	type	one of STD, OBSOL, UNIMPL, NODEF, NOARGS, or one of
;		the compatibility options defined in syscalls.conf.
;
; types:
;	STD	always included
;	OBSOL	obsolete, not included in system
;	UNIMPL	unimplemented, not included in system
;	NODEF	included, but don't define the syscall number
;	NOARGS	included, but don't define the syscall args structure
;	INDIR	included, but don't define the syscall args structure,
;		and allow it to be "really" varargs.
;
; The compat options are defined in the syscalls.conf file, and the
; compat option name is prefixed to the syscall name.  Other than
; that, they're like NODEF (for 'compat' options), or STD (for
; 'libcompat' options).
;
; The type-dependent arguments are as follows:
; For STD, NODEF, NOARGS, and compat syscalls:
;	{ pseudo-proto } [alias]
; For other syscalls:
;	[comment]
;
; #ifdef's, etc. may be included, and are copied to the output files.
; #include's are copied to the syscall names and switch definition files only.

#include "opt_ktrace.h"
#include "opt_nfsserver.h"
#include "opt_compat_netbsd.h"
#include "opt_ntp.h"

#include "fs_lfs.h"
#include "fs_nfs.h"

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/signal.h>
#include <sys/mount.h>
#include <sys/syscallargs.h>

#include <compat/sparc32/sparc32.h>
#include <compat/sparc32/sparc32_syscallargs.h>

; Reserved/unimplemented system calls in the range 0-150 inclusive
; are reserved for use in future Berkeley releases.
; Additional system calls implemented in vendor and other
; redistributions should be placed in the reserved range at the end
; of the current calls.

0	INDIR		{ int sys_syscall(int number, ...); }
1	STD		{ void compat_sparc32_exit(int rval); }
2	NOARGS		{ int sys_fork(void); }
3	STD		{ sparc32_ssize_t compat_sparc32_read(int fd, sparc32_voidp buf, sparc32_size_t nbyte); }
4	STD		{ sparc32_ssize_t compat_sparc32_write(int fd, const sparc32_voidp buf, sparc32_size_t nbyte); }
5	STD		{ int compat_sparc32_open(const sparc32_charp path, int flags, ... mode_t mode); }
6	STD		{ int compat_sparc32_close(int fd); }
7	STD		{ int compat_sparc32_wait4(int pid, sparc32_intp status, int options, sparc32_rusagep_t rusage); }
8	COMPAT_43	{ int compat_sparc32_ocreat(const sparc32_charp path, mode_t mode); }
9	STD		{ int compat_sparc32_link(const sparc32_charp path, const sparc32_charp link); }
10	STD		{ int compat_sparc32_unlink(const sparc32_charp path); }
11	OBSOL		execv
12	STD		{ int compat_sparc32_chdir(const sparc32_charp path); }
13	STD		{ int compat_sparc32_fchdir(int fd); }
14	STD		{ int compat_sparc32_mknod(const sparc32_charp path, mode_t mode, dev_t dev); }
15	STD		{ int compat_sparc32_chmod(const sparc32_charp path, mode_t mode); }
16	STD		{ int compat_sparc32_chown(const sparc32_charp path, uid_t uid, gid_t gid); }
17	STD		{ int compat_sparc32_break(sparc32_charp nsize); }
18	STD		{ int compat_sparc32_getfsstat(sparc32_statfsp_t buf, sparc32_long bufsize, int flags); }
19	COMPAT_43	{ sparc32_long compat_sparc32_olseek(int fd, sparc32_long offset, int whence); }
20	NOARGS		{ pid_t sys_getpid(void); }
21	STD		{ int compat_sparc32_mount(const sparc32_charp type, const sparc32_charp path, int flags, sparc32_voidp data); }
22	STD		{ int compat_sparc32_unmount(const sparc32_charp path, int flags); }
23	STD		{ int compat_sparc32_setuid(uid_t uid); }
24	NOARGS		{ uid_t sys_getuid(void); }
25	NOARGS		{ uid_t sys_geteuid(void); }
26	STD		{ int compat_sparc32_ptrace(int req, pid_t pid, sparc32_caddr_t addr, int data); }
27	STD		{ sparc32_ssize_t compat_sparc32_recvmsg(int s, sparc32_msghdrp_t msg, int flags); }
28	STD		{ sparc32_ssize_t compat_sparc32_sendmsg(int s, const sparc32_msghdrp_t msg, int flags); }
29	STD		{ sparc32_ssize_t compat_sparc32_recvfrom(int s, sparc32_voidp buf, sparc32_size_t len, int flags, sparc32_sockaddrp_t from, sparc32_intp fromlenaddr); }
30	STD		{ int compat_sparc32_accept(int s, sparc32_sockaddrp_t name, sparc32_intp anamelen); }
31	STD		{ int compat_sparc32_getpeername(int fdes, sparc32_sockaddrp_t asa, sparc32_intp alen); }
32	STD		{ int compat_sparc32_getsockname(int fdes, sparc32_sockaddrp_t asa, sparc32_intp alen); }
33	STD		{ int compat_sparc32_access(const sparc32_charp path, int flags); }
34	STD		{ int compat_sparc32_chflags(const sparc32_charp path, sparc32_u_long flags); }
35	STD		{ int compat_sparc32_fchflags(int fd, sparc32_u_long flags); }
36	NOARGS		{ void sys_sync(void); }
37	STD		{ int compat_sparc32_kill(int pid, int signum); }
38	COMPAT_43	{ int compat_sparc32_stat43(const sparc32_charp path, sparc32_stat43p_t ub); }
39	NOARGS		{ pid_t sys_getppid(void); }
40	COMPAT_43	{ int compat_sparc32_lstat43(const sparc32_charp path, sparc32_stat43p_t ub); }
41	STD		{ int compat_sparc32_dup(int fd); }
42	NOARGS		{ int sys_pipe(void); }
43	NOARGS		{ gid_t sys_getegid(void); }
44	STD		{ int compat_sparc32_profil(sparc32_caddr_t samples, sparc32_size_t size, sparc32_u_long offset, u_int scale); }
#ifdef KTRACE
45	STD		{ int compat_sparc32_ktrace(const sparc32_charp fname, int ops, int facs, int pid); }
#else
45	UNIMPL		compat_sparc32_ktrace
#endif
46	STD		{ int compat_sparc32_sigaction(int signum, const sparc32_sigactionp_t nsa, sparc32_sigactionp_t osa); }
47	NOARGS		{ gid_t sys_getgid(void); }
48	COMPAT_13	{ int compat_sparc32_sigprocmask(int how, \
			    int mask); } sigprocmask13
49	STD		{ int compat_sparc32___getlogin(sparc32_charp namebuf, u_int namelen); }
50	STD		{ int compat_sparc32_setlogin(const sparc32_charp namebuf); }
51	STD		{ int compat_sparc32_acct(const sparc32_charp path); }
52	COMPAT_13	{ int sys_sigpending(void); } sigpending13
53	COMPAT_13	{ int compat_sparc32_sigaltstack13(const sparc32_sigaltstack13p_t nss, sparc32_sigaltstack13p_t oss); }
54	STD		{ int compat_sparc32_ioctl(int fd, sparc32_u_long com, ... sparc32_voidp data); }
#ifdef COMPAT_12
55	COMPAT_12	{ int compat_sparc32_reboot(int opt); }
#else
55	OBSOL		oreboot
#endif
56	STD		{ int compat_sparc32_revoke(const sparc32_charp path); }
57	STD		{ int compat_sparc32_symlink(const sparc32_charp path, const sparc32_charp link); }
58	STD		{ int compat_sparc32_readlink(const sparc32_charp path, sparc32_charp buf, sparc32_size_t count); }
59	STD		{ int compat_sparc32_execve(const sparc32_charp path, sparc32_charpp argp, sparc32_charpp envp); }
60	STD		{ mode_t compat_sparc32_umask(mode_t newmask); }
61	STD		{ int compat_sparc32_chroot(const sparc32_charp path); }
62	COMPAT_43	{ int compat_sparc32_fstat43(int fd, sparc32_stat43p_t sb); }
63	COMPAT_43	{ int compat_sparc32_ogetkerninfo(int op, sparc32_charp where, sparc32_intp size, int arg); }
64	COMPAT_43	{ int sys_getpagesize(void); } ogetpagesize
65	COMPAT_12	{ int compat_sparc32_msync(sparc32_caddr_t addr, sparc32_size_t len); }
; XXX COMPAT_??? for 4.4BSD-compatible vfork(2)?
66	NOARGS		{ int sys_vfork(void); }
67	OBSOL		vread
68	OBSOL		vwrite
69	STD		{ int compat_sparc32_sbrk(int incr); }
70	STD		{ int compat_sparc32_sstk(int incr); }
71	COMPAT_43	{ int compat_sparc32_ommap(sparc32_caddr_t addr, sparc32_size_t len, int prot, int flags, int fd, sparc32_long pos); }
72	STD		{ int compat_sparc32_ovadvise(int anom); } vadvise
73	STD		{ int compat_sparc32_munmap(sparc32_voidp addr, sparc32_size_t len); }
74	STD		{ int compat_sparc32_mprotect(sparc32_voidp addr, sparc32_size_t len, int prot); }
75	STD		{ int compat_sparc32_madvise(sparc32_voidp addr, sparc32_size_t len, int behav); }
76	OBSOL		vhangup
77	OBSOL		vlimit
78	STD		{ int compat_sparc32_mincore(sparc32_caddr_t addr, sparc32_size_t len, sparc32_charp vec); }
79	STD		{ int compat_sparc32_getgroups(int gidsetsize, sparc32_gid_tp gidset); }
80	STD		{ int compat_sparc32_setgroups(int gidsetsize, const sparc32_gid_tp gidset); }
81	NOARGS		{ int sys_getpgrp(void); }
82	STD		{ int compat_sparc32_setpgid(int pid, int pgid); }
83	STD		{ int compat_sparc32_setitimer(int which, const sparc32_itimervalp_t itv, sparc32_itimervalp_t oitv); }
84	COMPAT_43	{ int sys_wait(void); } owait
85	COMPAT_12	{ int compat_sparc32_oswapon(const sparc32_charp name); }
86	STD		{ int compat_sparc32_getitimer(int which, sparc32_itimervalp_t itv); }
87	COMPAT_43	{ int compat_sparc32_ogethostname(sparc32_charp hostname, u_int len); }
88	COMPAT_43	{ int compat_sparc32_osethostname(sparc32_charp hostname, u_int len); }
89	COMPAT_43	{ int sys_getdtablesize(void); } ogetdtablesize
90	STD		{ int compat_sparc32_dup2(int from, int to); }
91	UNIMPL		getdopt
92	STD		{ int compat_sparc32_fcntl(int fd, int cmd, ... sparc32_voidp arg); }
93	STD		{ int compat_sparc32_select(int nd, sparc32_fd_setp_t in, sparc32_fd_setp_t ou, sparc32_fd_setp_t ex, sparc32_timevalp_t tv); }
94	UNIMPL		setdopt
95	STD		{ int compat_sparc32_fsync(int fd); }
96	STD		{ int compat_sparc32_setpriority(int which, int who, int prio); }
97	STD		{ int compat_sparc32_socket(int domain, int type, int protocol); }
98	STD		{ int compat_sparc32_connect(int s, const sparc32_sockaddrp_t name, int namelen); }
99	COMPAT_43	{ int compat_sparc32_oaccept(int s, sparc32_caddr_t name, sparc32_intp anamelen); }
100	STD		{ int compat_sparc32_getpriority(int which, int who); }
101	COMPAT_43	{ int compat_sparc32_osend(int s, sparc32_caddr_t buf, int len, int flags); }
102	COMPAT_43	{ int compat_sparc32_orecv(int s, sparc32_caddr_t buf, int len, int flags); }
103	STD		{ int compat_sparc32_sigreturn(sparc32_sigcontextp_t sigcntxp); }
104	STD		{ int compat_sparc32_bind(int s, const sparc32_sockaddrp_t name, int namelen); }
105	STD		{ int compat_sparc32_setsockopt(int s, int level, int name, const sparc32_voidp val, int valsize); }
106	STD		{ int compat_sparc32_listen(int s, int backlog); }
107	OBSOL		vtimes
108	COMPAT_43	{ int compat_sparc32_osigvec(int signum, sparc32_sigvecp_t nsv, sparc32_sigvecp_t osv); }
#ifdef COMPAT_43
109	COMPAT_43	{ int compat_sparc32_sigblock(int mask); }
110	COMPAT_43	{ int compat_sparc32_sigsetmask(int mask); }
#else
109	OBSOL		sigblock
110	OBSOL		sigsetmask
#endif
111	COMPAT_13	{ int compat_sparc32_sigsuspend(int mask); } sigsuspend13
112	COMPAT_43	{ int compat_sparc32_osigstack(sparc32_sigstackp_t nss, sparc32_sigstackp_t oss); }
113	COMPAT_43	{ int compat_sparc32_orecvmsg(int s, sparc32_omsghdrp_t msg, int flags); }
114	COMPAT_43	{ int compat_sparc32_osendmsg(int s, sparc32_caddr_t msg, int flags); }
#ifdef TRACE
115	STD		{ int compat_sparc32_vtrace(int request, int value); }
#else
115	OBSOL		vtrace
#endif
116	STD		{ int compat_sparc32_gettimeofday(sparc32_timevalp_t tp, sparc32_timezonep_t tzp); }
117	STD		{ int compat_sparc32_getrusage(int who, sparc32_rusagep_t rusage); }
118	STD		{ int compat_sparc32_getsockopt(int s, int level, int name, sparc32_voidp val, sparc32_intp avalsize); }
119	OBSOL		resuba
120	STD		{ sparc32_ssize_t compat_sparc32_readv(int fd, const sparc32_iovecp_t iovp, int iovcnt); }
121	STD		{ sparc32_ssize_t compat_sparc32_writev(int fd, const sparc32_iovecp_t iovp, int iovcnt); }
122	STD		{ int compat_sparc32_settimeofday(const sparc32_timevalp_t tv, const sparc32_timezonep_t tzp); }
123	STD		{ int compat_sparc32_fchown(int fd, uid_t uid, gid_t gid); }
124	STD		{ int compat_sparc32_fchmod(int fd, mode_t mode); }
125	COMPAT_43	{ int compat_sparc32_orecvfrom(int s, sparc32_caddr_t buf, sparc32_size_t len, int flags, sparc32_caddr_t from, sparc32_intp fromlenaddr); }
126	STD		{ int compat_sparc32_setreuid(uid_t ruid, uid_t euid); }
127	STD		{ int compat_sparc32_setregid(gid_t rgid, gid_t egid); }
128	STD		{ int compat_sparc32_rename(const sparc32_charp from, const sparc32_charp to); }
129	COMPAT_43	{ int compat_sparc32_otruncate(const sparc32_charp path, sparc32_long length); }
130	COMPAT_43	{ int compat_sparc32_oftruncate(int fd, sparc32_long length); }
131	STD		{ int compat_sparc32_flock(int fd, int how); }
132	STD		{ int compat_sparc32_mkfifo(const sparc32_charp path, mode_t mode); }
133	STD		{ sparc32_ssize_t compat_sparc32_sendto(int s, const sparc32_voidp buf, sparc32_size_t len, int flags, const sparc32_sockaddrp_t to, int tolen); }
134	STD		{ int compat_sparc32_shutdown(int s, int how); }
135	STD		{ int compat_sparc32_socketpair(int domain, int type, int protocol, sparc32_intp rsv); }
136	STD		{ int compat_sparc32_mkdir(const sparc32_charp path, mode_t mode); }
137	STD		{ int compat_sparc32_rmdir(const sparc32_charp path); }
138	STD		{ int compat_sparc32_utimes(const sparc32_charp path, const sparc32_timevalp_t tptr); }
139	OBSOL		4.2 sigreturn
140	STD		{ int compat_sparc32_adjtime(const sparc32_timevalp_t delta, sparc32_timevalp_t olddelta); }
141	COMPAT_43	{ int compat_sparc32_ogetpeername(int fdes, sparc32_caddr_t asa, sparc32_intp alen); }
142	COMPAT_43	{ int32_t sys_gethostid(void); } ogethostid
#ifdef COMPAT_43
143	COMPAT_43	{ int compat_sparc32_sethostid(int32_t hostid); }
#else
143	OBSOL		sethostid
#endif
144	COMPAT_43	{ int compat_sparc32_ogetrlimit(int which, sparc32_orlimitp_t rlp); }
145	COMPAT_43	{ int compat_sparc32_osetrlimit(int which, const sparc32_orlimitp_t rlp); }
#ifdef COMPAT_43
146	COMPAT_43	{ int compat_sparc32_killpg(int pgid, int signum); }
#else
146	OBSOL		killpg
#endif
147	NOARGS		{ int sys_setsid(void); }
148	STD		{ int compat_sparc32_quotactl(const sparc32_charp path, int cmd, int uid, sparc32_caddr_t arg); }
149	COMPAT_43	{ int sys_quota(void); } oquota
150	COMPAT_43	{ int compat_sparc32_ogetsockname(int fdec, sparc32_caddr_t asa, sparc32_intp alen); }

; Syscalls 151-180 inclusive are reserved for vendor-specific
; system calls.  (This includes various calls added for compatibity
; with other Unix variants.)
; Some of these calls are now supported by BSD...
151	UNIMPL
152	UNIMPL
153	UNIMPL
154	UNIMPL
#if defined(NFS) || defined(NFSSERVER)
155	STD		{ int compat_sparc32_nfssvc(int flag, sparc32_voidp argp); }
#else
155	UNIMPL
#endif
156	COMPAT_43	{ int compat_sparc32_ogetdirentries(int fd, sparc32_charp buf, u_int count, sparc32_longp basep); }
157	STD		{ int compat_sparc32_statfs(const sparc32_charp path, sparc32_statfsp_t buf); }
158	STD		{ int compat_sparc32_fstatfs(int fd, sparc32_statfsp_t buf); }
159	UNIMPL
160	UNIMPL
#if defined(NFS) || defined(NFSSERVER)
161	STD		{ int compat_sparc32_getfh(const sparc32_charp fname, sparc32_fhandlep_t fhp); }
#else
161	UNIMPL		compat_sparc32_getfh
#endif
162	COMPAT_09	{ int compat_sparc32_ogetdomainname(sparc32_charp domainname, int len); }
163	COMPAT_09	{ int compat_sparc32_osetdomainname(sparc32_charp domainname, int len); }
164	COMPAT_09	{ int compat_sparc32_uname(sparc32_outsnamep_t name); }
165	STD		{ int compat_sparc32_sysarch(int op, sparc32_voidp parms); }
166	UNIMPL
167	UNIMPL
168	UNIMPL
; XXX more generally, never on machines where sizeof(sparc32_voidp ) != sizeof(int)
#if defined(SYSVSEM) && !defined(alpha)
169	STD		{ int compat_sparc32_compat_10_sys_semsys(int which, int a2, int a3, int a4, int a5); } osemsys
#else
169	UNIMPL		1.0 semsys
#endif
; XXX more generally, never on machines where sizeof(sparc32_voidp ) != sizeof(int)
#if defined(SYSVMSG) && !defined(alpha)
170	STD		{ int compat_sparc32_compat_10_sys_msgsys(int which, int a2, int a3, int a4, int a5, int a6); } omsgsys
#else
170	UNIMPL		1.0 msgsys
#endif
; XXX more generally, never on machines where sizeof(sparc32_voidp ) != sizeof(int)
#if defined(SYSVSHM) && !defined(alpha)
171	STD		{ int compat_sparc32_compat_10_sys_shmsys(int which, int a2, int a3, int a4); } oshmsys
#else
171	UNIMPL		1.0 shmsys
#endif
172	UNIMPL
173	STD		{ sparc32_ssize_t compat_sparc32_pread(int fd, sparc32_voidp buf, sparc32_size_t nbyte, int pad, off_t offset); }
174	STD		{ sparc32_ssize_t compat_sparc32_pwrite(int fd, const sparc32_voidp buf, sparc32_size_t nbyte, int pad, off_t offset); }
#ifdef NTP
175	STD		{ int compat_sparc32_ntp_gettime(sparc32_ntptimevalp_t ntvp); }
176	STD		{ int compat_sparc32_ntp_adjtime(sparc32_timexp_t tp); }
#else
175	UNIMPL		compat_sparc32_ntp_gettime
176	UNIMPL		compat_sparc32_ntp_adjtime
#endif
177	UNIMPL
178	UNIMPL
179	UNIMPL
180	UNIMPL

; Syscalls 180-199 are used by/reserved for BSD
181	STD		{ int compat_sparc32_setgid(gid_t gid); }
182	STD		{ int compat_sparc32_setegid(gid_t egid); }
183	STD		{ int compat_sparc32_seteuid(uid_t euid); }
#ifdef LFS
184	STD		{ int compat_sparc32_lfs_bmapv(sparc32_fsid_tp_t fsidp, sparc32_block_infop_t blkiov, int blkcnt); }
185	STD		{ int compat_sparc32_lfs_markv(sparc32_fsid_tp_t fsidp, sparc32_block_infop_t blkiov, int blkcnt); }
186	STD		{ int compat_sparc32_lfs_segclean(sparc32_fsid_tp_t fsidp, sparc32_u_long segment); }
187	STD		{ int compat_sparc32_lfs_segwait(sparc32_fsid_tp_t fsidp, sparc32_timevalp_t tv); }
#else
184	UNIMPL
185	UNIMPL
186	UNIMPL
187	UNIMPL
#endif
188	COMPAT_12	{ int compat_sparc32_stat12(const sparc32_charp path, sparc32_stat12p_t ub); }
189	COMPAT_12	{ int compat_sparc32_fstat12(int fd, sparc32_stat12p_t sb); }
190	COMPAT_12	{ int compat_sparc32_lstat12(const sparc32_charp path, sparc32_stat12p_t ub); }
191	STD		{ sparc32_long compat_sparc32_pathconf(const sparc32_charp path, int name); }
192	STD		{ sparc32_long compat_sparc32_fpathconf(int fd, int name); }
193	UNIMPL
194	STD		{ int compat_sparc32_getrlimit(int which, sparc32_rlimitp_t rlp); }
195	STD		{ int compat_sparc32_setrlimit(int which, const sparc32_rlimitp_t rlp); }
196	COMPAT_12	{ int compat_sparc32_getdirentries(int fd, sparc32_charp buf, u_int count, sparc32_longp basep); }
197	STD		{ sparc32_voidp compat_sparc32_mmap(sparc32_voidp addr, sparc32_size_t len, int prot, int flags, int fd, sparc32_long pad, off_t pos); }
198	INDIR		{ quad_t sys___syscall(quad_t num, ...); }
199	STD		{ off_t compat_sparc32_lseek(int fd, int pad, off_t offset, int whence); }
200	STD		{ int compat_sparc32_truncate(const sparc32_charp path, int pad, off_t length); }
201	STD		{ int compat_sparc32_ftruncate(int fd, int pad, off_t length); }
202	STD		{ int compat_sparc32___sysctl(sparc32_intp name, u_int namelen, sparc32_voidp old, sparc32_size_tp oldlenp, sparc32_voidp new, sparc32_size_t newlen); }
203	STD		{ int compat_sparc32_mlock(const sparc32_voidp addr, sparc32_size_t len); }
204	STD		{ int compat_sparc32_munlock(const sparc32_voidp addr, sparc32_size_t len); }
205	STD		{ int compat_sparc32_undelete(const sparc32_charp path); }
206	STD		{ int compat_sparc32_futimes(int fd, const sparc32_timevalp_t tptr); }
207	STD		{ int compat_sparc32_getpgid(pid_t pid); }
208	STD		{ int compat_sparc32_reboot(int opt, sparc32_charp bootstr); }
209	STD		{ int compat_sparc32_poll(sparc32_pollfdp_t fds, u_int nfds, int timeout); }
;
; Syscalls 210-219 are reserved for dynamically loaded syscalls
;
#ifdef LKM
210	NODEF		{ int sys_lkmnosys(void); }
211	NODEF		{ int sys_lkmnosys(void); }
212	NODEF		{ int sys_lkmnosys(void); }
213	NODEF		{ int sys_lkmnosys(void); }
214	NODEF		{ int sys_lkmnosys(void); }
215	NODEF		{ int sys_lkmnosys(void); }
216	NODEF		{ int sys_lkmnosys(void); }
217	NODEF		{ int sys_lkmnosys(void); }
218	NODEF		{ int sys_lkmnosys(void); }
219	NODEF		{ int sys_lkmnosys(void); }
#else	/* !LKM */
210	UNIMPL
211	UNIMPL
212	UNIMPL
213	UNIMPL
214	UNIMPL
215	UNIMPL
216	UNIMPL
217	UNIMPL
218	UNIMPL
219	UNIMPL
#endif	/* !LKM */
; System calls 220-300 are reserved for use by NetBSD
#ifdef SYSVSEM
220	STD		{ int compat_sparc32___semctl(int semid, int semnum, int cmd, sparc32_semunu_t arg); }
221	STD		{ int compat_sparc32_semget(sparc32_key_t key, int nsems, int semflg); }
222	STD		{ int compat_sparc32_semop(int semid, sparc32_sembufp_t sops, sparc32_size_t nsops); }
223	STD		{ int compat_sparc32_semconfig(int flag); }
#else
220	UNIMPL		compat_sparc32_semctl
221	UNIMPL		compat_sparc32_semget
222	UNIMPL		compat_sparc32_semop
223	UNIMPL		compat_sparc32_semconfig
#endif
#ifdef SYSVMSG
224	STD		{ int compat_sparc32_msgctl(int msqid, int cmd, sparc32_msqid_dsp_t buf); }
225	STD		{ int compat_sparc32_msgget(sparc32_key_t key, int msgflg); }
226	STD		{ int compat_sparc32_msgsnd(int msqid, const sparc32_voidp msgp, sparc32_size_t msgsz, int msgflg); }
227	STD		{ sparc32_ssize_t compat_sparc32_msgrcv(int msqid, sparc32_voidp msgp, sparc32_size_t msgsz, sparc32_long msgtyp, int msgflg); }
#else
224	UNIMPL		compat_sparc32_msgctl
225	UNIMPL		compat_sparc32_msgget
226	UNIMPL		compat_sparc32_msgsnd
227	UNIMPL		compat_sparc32_msgrcv
#endif
#ifdef SYSVSHM
228	STD		{ sparc32_voidp compat_sparc32_shmat(int shmid, const sparc32_voidp shmaddr, int shmflg); }
229	STD		{ int compat_sparc32_shmctl(int shmid, int cmd, sparc32_shmid_dsp_t buf); }
230	STD		{ int compat_sparc32_shmdt(const sparc32_voidp shmaddr); }
231	STD		{ int compat_sparc32_shmget(sparc32_key_t key, sparc32_size_t size, int shmflg); }
#else
228	UNIMPL		compat_sparc32_shmat
229	UNIMPL		compat_sparc32_shmctl
230	UNIMPL		compat_sparc32_shmdt
231	UNIMPL		compat_sparc32_shmget
#endif
232	STD		{ int compat_sparc32_clock_gettime(sparc32_clockid_t clock_id, sparc32_timespecp_t tp); }
233	STD		{ int compat_sparc32_clock_settime(sparc32_clockid_t clock_id, const sparc32_timespecp_t tp); }
234	STD		{ int compat_sparc32_clock_getres(sparc32_clockid_t clock_id, sparc32_timespecp_t tp); }
235	UNIMPL		timer_create
236	UNIMPL		timer_delete
237	UNIMPL		timer_settime
238	UNIMPL		timer_gettime
239	UNIMPL		timer_getoverrun
;
; Syscalls 240-269 are reserved for other IEEE Std1003.1b syscalls
;
240	STD		{ int compat_sparc32_nanosleep(const sparc32_timespecp_t rqtp, sparc32_timespecp_t rmtp); }
241	STD		{ int compat_sparc32_fdatasync(int fd); }
242	UNIMPL
243	UNIMPL
244	UNIMPL
245	UNIMPL
246	UNIMPL
247	UNIMPL
248	UNIMPL
249	UNIMPL
250	UNIMPL
251	UNIMPL
252	UNIMPL
253	UNIMPL
254	UNIMPL
255	UNIMPL
256	UNIMPL
257	UNIMPL
258	UNIMPL
259	UNIMPL
260	UNIMPL
261	UNIMPL
262	UNIMPL
263	UNIMPL
264	UNIMPL
265	UNIMPL
266	UNIMPL
267	UNIMPL
268	UNIMPL
269	UNIMPL
270	STD		{ int compat_sparc32___posix_rename(const sparc32_charp from, const sparc32_charp to); }
271	STD		{ int compat_sparc32_swapctl(int cmd, const sparc32_voidp arg, int misc); }
272	STD		{ int compat_sparc32_getdents(int fd, sparc32_charp buf, sparc32_size_t count); }
273	STD		{ int compat_sparc32_minherit(sparc32_voidp addr, sparc32_size_t len, int inherit); }
274	STD		{ int compat_sparc32_lchmod(const sparc32_charp path, mode_t mode); }
275	STD		{ int compat_sparc32_lchown(const sparc32_charp path, uid_t uid, gid_t gid); }
276	STD		{ int compat_sparc32_lutimes(const sparc32_charp path, const sparc32_timevalp_t tptr); }
277	STD		{ int compat_sparc32___msync13(sparc32_voidp addr, sparc32_size_t len, int flags); }
278	STD		{ int compat_sparc32___stat13(const sparc32_charp path, sparc32_statp_t ub); }
279	STD		{ int compat_sparc32___fstat13(int fd, sparc32_statp_t sb); }
280	STD		{ int compat_sparc32___lstat13(const sparc32_charp path, sparc32_statp_t ub); }
281	STD		{ int compat_sparc32___sigaltstack14(const sparc32_sigaltstackp_t nss, sparc32_sigaltstackp_t oss); }
282	NOARGS		{ int sys___vfork14(void); }
283	STD		{ int compat_sparc32___posix_chown(const sparc32_charp path, uid_t uid, gid_t gid); }
284	STD		{ int compat_sparc32___posix_fchown(int fd, uid_t uid, gid_t gid); }
285	STD		{ int compat_sparc32___posix_lchown(const sparc32_charp path, uid_t uid, gid_t gid); }
286	STD		{ pid_t compat_sparc32_getsid(pid_t pid); }
287	UNIMPL
#ifdef KTRACE
288	STD		{ int compat_sparc32_fktrace(const int fd, int ops, int facs, int pid); }
#else
288	UNIMPL
#endif
289	STD		{ sparc32_ssize_t compat_sparc32_preadv(int fd, const sparc32_iovecp_t iovp, int iovcnt, int pad, off_t offset); }
290	STD		{ sparc32_ssize_t compat_sparc32_pwritev(int fd, const sparc32_iovecp_t iovp, int iovcnt, int pad, off_t offset); }
