	$NetBSD: syscalls.master,v 1.1 1995/02/13 21:39:10 cgd Exp $

; OSF/1 system call name/number "master" file.
; (See syscalls.conf to see what it is processed into.)
;
; Fields: number type [type-dependent ...]
;	number	system call number, must be in order
;	type	one of STD, OBSOL, UNIMPL, NODEF, NOARGS, or one of
;		the copatibility options defined in syscalls.conf.
;
; types:
;	STD	always included
;	OBSOL	obsolete, not included in system
;	UNIMP	unimplemented, not included in system
;	NODEF	included, but don't define the syscall number
;	NOARGS	included, but don't define the syscall args structure
;
; The compat options are defined in the syscalls.conf file, and the
; compat option name is prefixed to the syscall name.  Other than
; that, they're like NODEF (for 'compat' options), or STD (for
; 'libcompat' options).
;
; The type-dependent arguments are as follows:
; For STD, NODEF, NOARGS, and compat syscalls:
;	{ pseudo-proto } [alias]
; For other syscalls:
;	[comment]
;
; #ifdef's, etc. may be included, and are copied to the output files.
; #include's are copied to the syscall switch definition file only.

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/signal.h>
#include <sys/mount.h>
#include <sys/syscallargs.h>
#include <compat/osf1/osf1_syscallargs.h>

0	NOARGS		{ int nosys(void); } syscall
1	NOARGS		{ int exit(int rval); }
2	NOARGS		{ int fork(void); }
3	NOARGS		{ int read(int fd, char *buf, u_int nbyte); }
4	NOARGS		{ int write(int fd, char *buf, u_int nbyte); }
5	UNIMPL		old open
6	NOARGS		{ int close(int fd); }
7	NOARGS		{ int wait4(int pid, int *status, int options, \
			    struct rusage *rusage); }
8	UNIMPL		old creat
9	NOARGS		{ int link(char *path, char *link); }
10	NOARGS		{ int unlink(char *path); }
11	UNIMPL		execv
12	NOARGS		{ int chdir(char *path); }
13	NOARGS		{ int fchdir(int fd); }
14	STD		{ int osf1_mknod(char *path, int mode, int dev); }
15	NOARGS		{ int chmod(char *path, int mode); }
16	NOARGS		{ int chown(char *path, int uid, int gid); }
17	NOARGS		{ int obreak(char *nsize); }
18	STD		{ int osf1_getfsstat(struct osf1_statfs *buf, \
			    long bufsize, int flags); }
19	STD		{ off_t osf1_lseek(int fd, off_t offset, int whence); }
20	NOARGS		{ pid_t getpid(void); }
21	STD		{ int osf1_mount(int type, char *path, int flags, \
			    caddr_t data); }
22	STD		{ int osf1_unmount(char *path, int flags); }
23	STD		{ int osf1_setuid(uid_t uid); }
24	NOARGS		{ uid_t getuid(void); }
25	UNIMPL		exec_with_loader
26	UNIMPL		ptrace
27	UNIMPL		recvmsg
28	UNIMPL		sendmsg
29	UNIMPL		recvfrom
30	UNIMPL		accept
31	UNIMPL		getpeername
32	UNIMPL		getsockname
33	NOARGS		{ int access(char *path, int flags); }
34	UNIMPL		chflags
35	UNIMPL		fchflags
36	NOARGS		{ int sync(void); }
37	NOARGS		{ int kill(int pid, int signum); }
38	UNIMPL		old stat
39	NOARGS		{ int setpgid(int pid, int pgid); }
40	UNIMPL		old lstat
41	NOARGS		{ int dup(u_int fd); }
42	NOARGS		{ int pipe(void); }
43	UNIMPL		set_program_attributes
44	UNIMPL		profil
45	STD		{ int osf1_open(char *path, int flags, int mode); }
46	OBSOL		sigaction
47	NOARGS		{ gid_t getgid(void); }
48	NOARGS		{ int sigprocmask(int how, sigset_t mask); }
49	NOARGS		{ int getlogin(char *namebuf, u_int namelen); }
50	NOARGS		{ int setlogin(char *namebuf); }
51	NOARGS		{ int acct(char *path); }
52	UNIMPL		sigpending
53	UNIMPL
54	STD		{ int osf1_ioctl(int fd, int com, caddr_t data); }
55	STD		{ int osf1_reboot(int opt); }
56	NOARGS		{ int revoke(char *path); }
57	NOARGS		{ int symlink(char *path, char *link); }
58	NOARGS		{ int readlink(char *path, char *buf, int count); }
59	NOARGS		{ int execve(char *path, char **argp, \
			    char **envp); }
60	NOARGS		{ int umask(int newmask); }
61	NOARGS		{ int chroot(char *path); }
62	UNIMPL		old fstat
63	NOARGS		{ int getpgrp(void); }
64	NOARGS		{ int compat_43_getpagesize(void); }
65	UNIMPL		mremap
66	NOARGS		{ int vfork(void); }
67	STD		{ int osf1_stat(char *path, struct osf1_stat *ub); }
68	STD		{ int osf1_lstat(char *path, struct osf1_stat *ub); }
69	UNIMPL		sbrk
70	UNIMPL		sstk
71	STD		{ caddr_t osf1_mmap(caddr_t addr, size_t len, \
			    int prot, int flags, int fd, off_t pos); }
72	UNIMPL		ovadvise
73	NOARGS		{ int munmap(caddr_t addr, int len); }
74	UNIMPL		mprotect
; XXX
75	STD		{ int osf1_madvise(void); }
76	UNIMPL		old vhangup
77	UNIMPL		kmodcall
78	UNIMPL		mincore
79	NOARGS		{ int getgroups(u_int gidsetsize, gid_t *gidset); }
80	NOARGS		{ int setgroups(u_int gidsetsize, gid_t *gidset); }
81	UNIMPL		old getpgrp
; OSF/1 setpgrp(); identical in function to setpgid().  XXX
82	NOARGS		{ int setpgid(int pid, int pgid); } setpgrp
83	NOARGS		{ int setitimer(u_int which, struct itimerval *itv, \
			    struct itimerval *oitv); }
84	UNIMPL		old wait
85	UNIMPL		table
86	UNIMPL		getitimer
87	NOARGS		{ int compat_43_gethostname(char *hostname, \
			    u_int len); }
88	NOARGS		{ int compat_43_sethostname(char *hostname, \
			    u_int len); }
89	NOARGS		{ int compat_43_getdtablesize(void); }
90	NOARGS		{ int dup2(u_int from, u_int to); }
91	STD		{ int osf1_fstat(int fd, void *sb); }
92	STD		{ int osf1_fcntl(int fd, int cmd, void *arg); }
93	NOARGS		{ int select(u_int nd, fd_set *in, fd_set *ou, \
                            fd_set *ex, struct timeval *tv); }
94	UNIMPL		poll
95	NOARGS		{ int fsync(int fd); }
96	NOARGS		{ int setpriority(int which, int who, int prio); }
97	STD		{ int osf1_socket(int domain, int type, \
			    int protocol); }
98	NOARGS		{ int connect(int s, caddr_t name, int namelen); }
99	UNIMPL		old accept
100	NOARGS		{ int getpriority(int which, int who); }
101	NOARGS		{ int compat_43_send(int s, caddr_t buf, int len, \
			    int flags); }
102	NOARGS		{ int compat_43_recv(int s, caddr_t buf, int len, \
			    int flags); }
103	NOARGS		{ int sigreturn(struct sigcontext *sigcntxp); }
104	NOARGS		{ int bind(int s, caddr_t name, int namelen); }
105	NOARGS		{ int setsockopt(int s, int level, int name, \
                            caddr_t val, int valsize); }
106	UNIMPL		listen
107	UNIMPL		plock
108	UNIMPL		old sigvec
109	UNIMPL		old sigblock
110	UNIMPL		old sigsetmask
111	NOARGS		{ int sigsuspend(int mask); }
112	NOARGS		{ int compat_43_sigstack(struct sigstack *nss, \
			    struct sigstack *oss); }
113	UNIMPL		old recvmsg
114	UNIMPL		old sendmsg
115	UNIMPL		vtrace
116	NOARGS		{ int gettimeofday(struct timeval *tp, \
			    struct timezone *tzp); }
; XXX
117	STD		{ int osf1_getrusage(void); }
118	NOARGS		{ int getsockopt(int s, int level, int name, \
                            caddr_t val, int *avalsize); }
119	UNIMPL
120	STD		{ int osf1_readv(int fd, struct osf1_iovec *iovp, \
			    u_int iovcnt); }
121	STD		{ int osf1_writev(int fd, struct osf1_iovec *iovp, \
			    u_int iovcnt); }
122	NOARGS		{ int settimeofday(struct timeval *tv, \
			    struct timezone *tzp); }
123	NOARGS		{ int fchown(int fd, int uid, int gid); }
124	NOARGS		{ int fchmod(int fd, int mode); }
125	NOARGS		{ int compat_43_recvfrom(int s, caddr_t buf, \
			    size_t len, int flags, caddr_t from, \
			    int *fromlenaddr); }
126	UNIMPL		setreuid
127	UNIMPL		setregid
128	NOARGS		{ int rename(char *from, char *to); }
129	STD		{ int osf1_truncate(char *path, off_t length); }
130	STD		{ int osf1_ftruncate(int fd, off_t length); }
131	UNIMPL		flock
132	STD		{ int osf1_setgid(gid_t gid); }
133	STD		{ int osf1_sendto(int s, caddr_t buf, size_t len, \
			    int flags, caddr_t to, int tolen); }
134	NOARGS		{ int shutdown(int s, int how); }
135	UNIMPL		socketpair
136	NOARGS		{ int mkdir(char *path, int mode); }
137	NOARGS		{ int rmdir(char *path); }
138	NOARGS		{ int utimes(char *path, struct timeval *tptr); }
139	OBSOL		4.2 sigreturn
140	UNIMPL		adjtime
141	UNIMPL		old getpeername
142	NOARGS		{ int32_t compat_43_gethostid(void); }
143	NOARGS		{ int compat_43_sethostid(int32_t hostid); }
144	STD		{ int osf1_getrlimit(u_int which, struct rlimit *rlp); }
145	STD		{ int osf1_setrlimit(u_int which, struct rlimit *rlp); }
146	UNIMPL		old killpg
147	NOARGS		{ int setsid(void); }
148	UNIMPL		quotactl
149	NOARGS		{ int compat_43_quota(void); }
150	UNIMPL		old getsockname
151	UNIMPL
152	UNIMPL
153	UNIMPL
154	UNIMPL
155	UNIMPL
156	STD		{ int osf1_sigaction(int signum, \
			    struct sigaction *nsa, struct sigaction *osa); }
157	UNIMPL
158	UNIMPL
159	NOARGS		{ int compat_43_getdirentries(int fd, char *buf, \
			    u_int count, long *basep); }
160     STD             { int osf1_statfs(char *path, struct osf1_statfs *buf, \
			    int len); }
161     STD             { int osf1_fstatfs(int fd, struct osf1_statfs *buf, \
			    int len); }
162	UNIMPL
163	UNIMPL
164	UNIMPL
165	UNIMPL
166	UNIMPL
167	UNIMPL
168	UNIMPL
169	UNIMPL
170	UNIMPL
171	UNIMPL
172	UNIMPL
173	UNIMPL
174	UNIMPL
175	UNIMPL
176	UNIMPL
177	UNIMPL
178	UNIMPL
179	UNIMPL
180	UNIMPL
181	UNIMPL
182	UNIMPL
183	UNIMPL
184	UNIMPL
185	UNIMPL
186	UNIMPL
187	UNIMPL
188	UNIMPL
189	UNIMPL
190	UNIMPL
191	UNIMPL
192	UNIMPL
193	UNIMPL
194	UNIMPL
195	UNIMPL
196	UNIMPL
197	UNIMPL
198	UNIMPL
199	UNIMPL
200	UNIMPL
201	UNIMPL
202	UNIMPL
203	UNIMPL
204	UNIMPL
205	UNIMPL
206	UNIMPL
207	UNIMPL
208	UNIMPL		lchown
209	UNIMPL
210	UNIMPL
211	UNIMPL
212	UNIMPL
213	UNIMPL
214	UNIMPL
215	UNIMPL
216	UNIMPL
217	UNIMPL
218	UNIMPL
219	UNIMPL
220	UNIMPL
221	UNIMPL
222	UNIMPL
223	UNIMPL
224	UNIMPL
225	UNIMPL
226	UNIMPL
227	UNIMPL
228	UNIMPL
229	UNIMPL
230	UNIMPL
231	UNIMPL
232	UNIMPL
233	UNIMPL		getpgid
234	STD		{ pid_t osf1_getsid(pid_t pid); }
235	UNIMPL		sigaltstack
236	UNIMPL		waitid
237	UNIMPL		priocntlset
238	UNIMPL		sigsendset
239	UNIMPL
240	UNIMPL		msfs_syscall
241	UNIMPL		sysinfo
242	UNIMPL		uadmin
243	UNIMPL		fuser
244	UNIMPL
245	UNIMPL
246	UNIMPL
247	UNIMPL
248	UNIMPL		
249	UNIMPL
250	UNIMPL		uswitch
251	STD		{ int osf1_usleep_thread(struct timeval *sleep, \
			    struct timeval *slept); }
252	UNIMPL		audcntl
253	UNIMPL		audgen
254	UNIMPL		sysfs
255	UNIMPL
256	UNIMPL		getsysinfo
257	STD		{ int osf1_setsysinfo(u_long op, caddr_t buffer, \
			    u_long nbytes, caddr_t arg, u_long flag); }
258	UNIMPL		afs_syscall
259	UNIMPL		swapctl
260	UNIMPL		memcntl
