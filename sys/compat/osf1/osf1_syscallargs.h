/*
 * System call argument lists.
 *
 * DO NOT EDIT-- this file is automatically generated.
 * created from	NetBSD: syscalls.master,v 1.1 1995/02/13 21:39:10 cgd Exp 
 */

#define	syscallarg(x)	union { x datum; register_t pad; }

struct osf1_mknod_args {
	syscallarg(char *) path;
	syscallarg(int) mode;
	syscallarg(int) dev;
};

struct osf1_getfsstat_args {
	syscallarg(struct osf1_statfs *) buf;
	syscallarg(long) bufsize;
	syscallarg(int) flags;
};

struct osf1_lseek_args {
	syscallarg(int) fd;
	syscallarg(off_t) offset;
	syscallarg(int) whence;
};

struct osf1_mount_args {
	syscallarg(int) type;
	syscallarg(char *) path;
	syscallarg(int) flags;
	syscallarg(caddr_t) data;
};

struct osf1_unmount_args {
	syscallarg(char *) path;
	syscallarg(int) flags;
};

struct osf1_setuid_args {
	syscallarg(uid_t) uid;
};

struct osf1_open_args {
	syscallarg(char *) path;
	syscallarg(int) flags;
	syscallarg(int) mode;
};

struct osf1_ioctl_args {
	syscallarg(int) fd;
	syscallarg(int) com;
	syscallarg(caddr_t) data;
};

struct osf1_reboot_args {
	syscallarg(int) opt;
};

struct osf1_stat_args {
	syscallarg(char *) path;
	syscallarg(struct osf1_stat *) ub;
};

struct osf1_lstat_args {
	syscallarg(char *) path;
	syscallarg(struct osf1_stat *) ub;
};

struct osf1_mmap_args {
	syscallarg(caddr_t) addr;
	syscallarg(size_t) len;
	syscallarg(int) prot;
	syscallarg(int) flags;
	syscallarg(int) fd;
	syscallarg(off_t) pos;
};

struct osf1_fstat_args {
	syscallarg(int) fd;
	syscallarg(void *) sb;
};

struct osf1_fcntl_args {
	syscallarg(int) fd;
	syscallarg(int) cmd;
	syscallarg(void *) arg;
};

struct osf1_socket_args {
	syscallarg(int) domain;
	syscallarg(int) type;
	syscallarg(int) protocol;
};

struct osf1_readv_args {
	syscallarg(int) fd;
	syscallarg(struct osf1_iovec *) iovp;
	syscallarg(u_int) iovcnt;
};

struct osf1_writev_args {
	syscallarg(int) fd;
	syscallarg(struct osf1_iovec *) iovp;
	syscallarg(u_int) iovcnt;
};

struct osf1_truncate_args {
	syscallarg(char *) path;
	syscallarg(off_t) length;
};

struct osf1_ftruncate_args {
	syscallarg(int) fd;
	syscallarg(off_t) length;
};

struct osf1_setgid_args {
	syscallarg(gid_t) gid;
};

struct osf1_sendto_args {
	syscallarg(int) s;
	syscallarg(caddr_t) buf;
	syscallarg(size_t) len;
	syscallarg(int) flags;
	syscallarg(caddr_t) to;
	syscallarg(int) tolen;
};

struct osf1_getrlimit_args {
	syscallarg(u_int) which;
	syscallarg(struct rlimit *) rlp;
};

struct osf1_setrlimit_args {
	syscallarg(u_int) which;
	syscallarg(struct rlimit *) rlp;
};

struct osf1_sigaction_args {
	syscallarg(int) signum;
	syscallarg(struct sigaction *) nsa;
	syscallarg(struct sigaction *) osa;
};

struct osf1_statfs_args {
	syscallarg(char *) path;
	syscallarg(struct osf1_statfs *) buf;
	syscallarg(int) len;
};

struct osf1_fstatfs_args {
	syscallarg(int) fd;
	syscallarg(struct osf1_statfs *) buf;
	syscallarg(int) len;
};

struct osf1_getsid_args {
	syscallarg(pid_t) pid;
};

struct osf1_usleep_thread_args {
	syscallarg(struct timeval *) sleep;
	syscallarg(struct timeval *) slept;
};

struct osf1_setsysinfo_args {
	syscallarg(u_long) op;
	syscallarg(caddr_t) buffer;
	syscallarg(u_long) nbytes;
	syscallarg(caddr_t) arg;
	syscallarg(u_long) flag;
};

#undef	syscallarg

/*
 * System call prototypes.
 */

int	nosys	__P((struct proc *, void *, register_t *));
int	exit	__P((struct proc *, void *, register_t *));
int	fork	__P((struct proc *, void *, register_t *));
int	read	__P((struct proc *, void *, register_t *));
int	write	__P((struct proc *, void *, register_t *));
int	close	__P((struct proc *, void *, register_t *));
int	wait4	__P((struct proc *, void *, register_t *));
int	link	__P((struct proc *, void *, register_t *));
int	unlink	__P((struct proc *, void *, register_t *));
int	chdir	__P((struct proc *, void *, register_t *));
int	fchdir	__P((struct proc *, void *, register_t *));
int	osf1_mknod	__P((struct proc *, void *, register_t *));
int	chmod	__P((struct proc *, void *, register_t *));
int	chown	__P((struct proc *, void *, register_t *));
int	obreak	__P((struct proc *, void *, register_t *));
int	osf1_getfsstat	__P((struct proc *, void *, register_t *));
int	osf1_lseek	__P((struct proc *, void *, register_t *));
int	getpid	__P((struct proc *, void *, register_t *));
int	osf1_mount	__P((struct proc *, void *, register_t *));
int	osf1_unmount	__P((struct proc *, void *, register_t *));
int	osf1_setuid	__P((struct proc *, void *, register_t *));
int	getuid	__P((struct proc *, void *, register_t *));
int	access	__P((struct proc *, void *, register_t *));
int	sync	__P((struct proc *, void *, register_t *));
int	kill	__P((struct proc *, void *, register_t *));
int	setpgid	__P((struct proc *, void *, register_t *));
int	dup	__P((struct proc *, void *, register_t *));
int	pipe	__P((struct proc *, void *, register_t *));
int	osf1_open	__P((struct proc *, void *, register_t *));
int	getgid	__P((struct proc *, void *, register_t *));
int	sigprocmask	__P((struct proc *, void *, register_t *));
int	getlogin	__P((struct proc *, void *, register_t *));
int	setlogin	__P((struct proc *, void *, register_t *));
int	acct	__P((struct proc *, void *, register_t *));
int	osf1_ioctl	__P((struct proc *, void *, register_t *));
int	osf1_reboot	__P((struct proc *, void *, register_t *));
int	revoke	__P((struct proc *, void *, register_t *));
int	symlink	__P((struct proc *, void *, register_t *));
int	readlink	__P((struct proc *, void *, register_t *));
int	execve	__P((struct proc *, void *, register_t *));
int	umask	__P((struct proc *, void *, register_t *));
int	chroot	__P((struct proc *, void *, register_t *));
int	getpgrp	__P((struct proc *, void *, register_t *));
int	compat_43_getpagesize	__P((struct proc *, void *, register_t *));
int	vfork	__P((struct proc *, void *, register_t *));
int	osf1_stat	__P((struct proc *, void *, register_t *));
int	osf1_lstat	__P((struct proc *, void *, register_t *));
int	osf1_mmap	__P((struct proc *, void *, register_t *));
int	munmap	__P((struct proc *, void *, register_t *));
int	osf1_madvise	__P((struct proc *, void *, register_t *));
int	getgroups	__P((struct proc *, void *, register_t *));
int	setgroups	__P((struct proc *, void *, register_t *));
int	setpgid	__P((struct proc *, void *, register_t *));
int	setitimer	__P((struct proc *, void *, register_t *));
int	compat_43_gethostname	__P((struct proc *, void *, register_t *));
int	compat_43_sethostname	__P((struct proc *, void *, register_t *));
int	compat_43_getdtablesize	__P((struct proc *, void *, register_t *));
int	dup2	__P((struct proc *, void *, register_t *));
int	osf1_fstat	__P((struct proc *, void *, register_t *));
int	osf1_fcntl	__P((struct proc *, void *, register_t *));
int	select	__P((struct proc *, void *, register_t *));
int	fsync	__P((struct proc *, void *, register_t *));
int	setpriority	__P((struct proc *, void *, register_t *));
int	osf1_socket	__P((struct proc *, void *, register_t *));
int	connect	__P((struct proc *, void *, register_t *));
int	getpriority	__P((struct proc *, void *, register_t *));
int	compat_43_send	__P((struct proc *, void *, register_t *));
int	compat_43_recv	__P((struct proc *, void *, register_t *));
int	sigreturn	__P((struct proc *, void *, register_t *));
int	bind	__P((struct proc *, void *, register_t *));
int	setsockopt	__P((struct proc *, void *, register_t *));
int	sigsuspend	__P((struct proc *, void *, register_t *));
int	compat_43_sigstack	__P((struct proc *, void *, register_t *));
int	gettimeofday	__P((struct proc *, void *, register_t *));
int	osf1_getrusage	__P((struct proc *, void *, register_t *));
int	getsockopt	__P((struct proc *, void *, register_t *));
int	osf1_readv	__P((struct proc *, void *, register_t *));
int	osf1_writev	__P((struct proc *, void *, register_t *));
int	settimeofday	__P((struct proc *, void *, register_t *));
int	fchown	__P((struct proc *, void *, register_t *));
int	fchmod	__P((struct proc *, void *, register_t *));
int	compat_43_recvfrom	__P((struct proc *, void *, register_t *));
int	rename	__P((struct proc *, void *, register_t *));
int	osf1_truncate	__P((struct proc *, void *, register_t *));
int	osf1_ftruncate	__P((struct proc *, void *, register_t *));
int	osf1_setgid	__P((struct proc *, void *, register_t *));
int	osf1_sendto	__P((struct proc *, void *, register_t *));
int	shutdown	__P((struct proc *, void *, register_t *));
int	mkdir	__P((struct proc *, void *, register_t *));
int	rmdir	__P((struct proc *, void *, register_t *));
int	utimes	__P((struct proc *, void *, register_t *));
int	compat_43_gethostid	__P((struct proc *, void *, register_t *));
int	compat_43_sethostid	__P((struct proc *, void *, register_t *));
int	osf1_getrlimit	__P((struct proc *, void *, register_t *));
int	osf1_setrlimit	__P((struct proc *, void *, register_t *));
int	setsid	__P((struct proc *, void *, register_t *));
int	compat_43_quota	__P((struct proc *, void *, register_t *));
int	osf1_sigaction	__P((struct proc *, void *, register_t *));
int	compat_43_getdirentries	__P((struct proc *, void *, register_t *));
int	osf1_statfs	__P((struct proc *, void *, register_t *));
int	osf1_fstatfs	__P((struct proc *, void *, register_t *));
int	osf1_getsid	__P((struct proc *, void *, register_t *));
int	osf1_usleep_thread	__P((struct proc *, void *, register_t *));
int	osf1_setsysinfo	__P((struct proc *, void *, register_t *));
