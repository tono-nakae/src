/*
 * System call argument lists.
 *
 * DO NOT EDIT-- this file is automatically generated.
 * created from	NetBSD: syscalls.master,v 1.12 1995/09/07 21:49:02 fvdl Exp 
 */

#define	syscallarg(x)	union { x datum; register_t pad; }

struct linux_open_args {
	syscallarg(char *) path;
	syscallarg(int) flags;
	syscallarg(int) mode;
};

struct linux_waitpid_args {
	syscallarg(int) pid;
	syscallarg(int *) status;
	syscallarg(int) options;
};

struct linux_creat_args {
	syscallarg(char *) path;
	syscallarg(int) mode;
};

struct linux_unlink_args {
	syscallarg(char *) path;
};

struct linux_execve_args {
	syscallarg(char *) path;
	syscallarg(char **) argp;
	syscallarg(char **) envp;
};

struct linux_chdir_args {
	syscallarg(char *) path;
};

struct linux_time_args {
	syscallarg(linux_time_t *) t;
};

struct linux_mknod_args {
	syscallarg(char *) path;
	syscallarg(int) mode;
	syscallarg(int) dev;
};

struct linux_chmod_args {
	syscallarg(char *) path;
	syscallarg(int) mode;
};

struct linux_chown_args {
	syscallarg(char *) path;
	syscallarg(int) uid;
	syscallarg(int) gid;
};

struct linux_break_args {
	syscallarg(char *) nsize;
};

struct linux_alarm_args {
	syscallarg(unsigned int) secs;
};

struct linux_utime_args {
	syscallarg(char *) path;
	syscallarg(struct linux_utimbuf *) times;
};

struct linux_access_args {
	syscallarg(char *) path;
	syscallarg(int) flags;
};

struct linux_kill_args {
	syscallarg(int) pid;
	syscallarg(int) signum;
};

struct linux_rename_args {
	syscallarg(char *) from;
	syscallarg(char *) to;
};

struct linux_mkdir_args {
	syscallarg(char *) path;
	syscallarg(int) mode;
};

struct linux_rmdir_args {
	syscallarg(char *) path;
};

struct linux_pipe_args {
	syscallarg(int *) pfds;
};

struct linux_times_args {
	syscallarg(struct times *) tms;
};

struct linux_brk_args {
	syscallarg(char *) nsize;
};

struct linux_signal_args {
	syscallarg(int) sig;
	syscallarg(linux_handler_t) handler;
};

struct linux_ioctl_args {
	syscallarg(int) fd;
	syscallarg(u_long) com;
	syscallarg(caddr_t) data;
};

struct linux_fcntl_args {
	syscallarg(int) fd;
	syscallarg(int) cmd;
	syscallarg(void *) arg;
};

struct linux_oldolduname_args {
	syscallarg(struct linux_oldold_utsname *) up;
};

struct linux_sigaction_args {
	syscallarg(int) signum;
	syscallarg(struct linux_sigaction *) nsa;
	syscallarg(struct linux_sigaction *) osa;
};

struct linux_sigsetmask_args {
	syscallarg(linux_sigset_t) mask;
};

struct linux_setreuid_args {
	syscallarg(int) ruid;
	syscallarg(int) euid;
};

struct linux_setregid_args {
	syscallarg(int) rgid;
	syscallarg(int) egid;
};

struct linux_sigsuspend_args {
	syscallarg(caddr_t) restart;
	syscallarg(int) oldmask;
	syscallarg(int) mask;
};

struct linux_sigpending_args {
	syscallarg(linux_sigset_t *) mask;
};

struct linux_oldselect_args {
	syscallarg(struct linux_select *) lsp;
};

struct linux_symlink_args {
	syscallarg(char *) path;
	syscallarg(char *) to;
};

struct linux_readlink_args {
	syscallarg(char *) name;
	syscallarg(char *) buf;
	syscallarg(int) count;
};

struct linux_uselib_args {
	syscallarg(char *) path;
};

struct linux_readdir_args {
	syscallarg(int) fd;
	syscallarg(struct linux_dirent *) dent;
	syscallarg(unsigned int) count;
};

struct linux_mmap_args {
	syscallarg(struct linux_mmap *) lmp;
};

struct linux_truncate_args {
	syscallarg(char *) path;
	syscallarg(long) length;
};

struct linux_fchown_args {
	syscallarg(int) fd;
	syscallarg(int) uid;
	syscallarg(int) gid;
};

struct linux_statfs_args {
	syscallarg(char *) path;
	syscallarg(struct linux_statfs *) sp;
};

struct linux_fstatfs_args {
	syscallarg(int) fd;
	syscallarg(struct linux_statfs *) sp;
};

struct linux_ioperm_args {
	syscallarg(unsigned int) lo;
	syscallarg(unsigned int) hi;
	syscallarg(int) val;
};

struct linux_socketcall_args {
	syscallarg(int) what;
	syscallarg(void *) args;
};

struct linux_stat_args {
	syscallarg(char *) path;
	syscallarg(struct linux_stat *) sp;
};

struct linux_lstat_args {
	syscallarg(char *) path;
	syscallarg(struct linux_stat *) sp;
};

struct linux_fstat_args {
	syscallarg(int) fd;
	syscallarg(struct linux_stat *) sp;
};

struct linux_olduname_args {
	syscallarg(struct linux_old_utsname *) up;
};

struct linux_iopl_args {
	syscallarg(int) level;
};

struct linux_wait4_args {
	syscallarg(int) pid;
	syscallarg(int *) status;
	syscallarg(int) options;
	syscallarg(struct rusage *) rusage;
};

struct linux_ipc_args {
	syscallarg(int) what;
	syscallarg(int) a1;
	syscallarg(int) a2;
	syscallarg(int) a3;
	syscallarg(caddr_t) ptr;
};

struct linux_sigreturn_args {
	syscallarg(struct linux_sigcontext *) scp;
};

struct linux_uname_args {
	syscallarg(struct linux_utsname *) up;
};

struct linux_modify_ldt_args {
	syscallarg(int) func;
	syscallarg(void *) ptr;
	syscallarg(size_t) bytecount;
};

struct linux_sigprocmask_args {
	syscallarg(int) how;
	syscallarg(linux_sigset_t *) set;
	syscallarg(linux_sigset_t *) oset;
};

struct linux_getpgid_args {
	syscallarg(int) pid;
};

struct linux_personality_args {
	syscallarg(int) per;
};

struct linux_llseek_args {
	syscallarg(int) fd;
	syscallarg(u_int32_t) ohigh;
	syscallarg(u_int32_t) olow;
	syscallarg(caddr_t) res;
	syscallarg(int) whence;
};

struct linux_getdents_args {
	syscallarg(int) fd;
	syscallarg(void *) dirent;
	syscallarg(unsigned) count;
};

struct linux_select_args {
	syscallarg(int) nfds;
	syscallarg(fd_set *) readfds;
	syscallarg(fd_set *) writefds;
	syscallarg(fd_set *) exceptfds;
	syscallarg(struct timeval *) timeout;
};

#undef	syscallarg

/*
 * System call prototypes.
 */

int	nosys	__P((struct proc *, void *, register_t *));
int	exit	__P((struct proc *, void *, register_t *));
int	linux_fork	__P((struct proc *, void *, register_t *));
int	read	__P((struct proc *, void *, register_t *));
int	write	__P((struct proc *, void *, register_t *));
int	linux_open	__P((struct proc *, void *, register_t *));
int	close	__P((struct proc *, void *, register_t *));
int	linux_waitpid	__P((struct proc *, void *, register_t *));
int	linux_creat	__P((struct proc *, void *, register_t *));
int	link	__P((struct proc *, void *, register_t *));
int	linux_unlink	__P((struct proc *, void *, register_t *));
int	linux_execve	__P((struct proc *, void *, register_t *));
int	linux_chdir	__P((struct proc *, void *, register_t *));
int	linux_time	__P((struct proc *, void *, register_t *));
int	linux_mknod	__P((struct proc *, void *, register_t *));
int	linux_chmod	__P((struct proc *, void *, register_t *));
int	linux_chown	__P((struct proc *, void *, register_t *));
int	linux_break	__P((struct proc *, void *, register_t *));
int	compat_43_lseek	__P((struct proc *, void *, register_t *));
int	getpid	__P((struct proc *, void *, register_t *));
int	setuid	__P((struct proc *, void *, register_t *));
int	getuid	__P((struct proc *, void *, register_t *));
int	linux_alarm	__P((struct proc *, void *, register_t *));
int	linux_pause	__P((struct proc *, void *, register_t *));
int	linux_utime	__P((struct proc *, void *, register_t *));
int	linux_access	__P((struct proc *, void *, register_t *));
int	sync	__P((struct proc *, void *, register_t *));
int	linux_kill	__P((struct proc *, void *, register_t *));
int	linux_rename	__P((struct proc *, void *, register_t *));
int	linux_mkdir	__P((struct proc *, void *, register_t *));
int	linux_rmdir	__P((struct proc *, void *, register_t *));
int	dup	__P((struct proc *, void *, register_t *));
int	linux_pipe	__P((struct proc *, void *, register_t *));
int	linux_times	__P((struct proc *, void *, register_t *));
int	linux_brk	__P((struct proc *, void *, register_t *));
int	setgid	__P((struct proc *, void *, register_t *));
int	getgid	__P((struct proc *, void *, register_t *));
int	linux_signal	__P((struct proc *, void *, register_t *));
int	geteuid	__P((struct proc *, void *, register_t *));
int	getegid	__P((struct proc *, void *, register_t *));
int	acct	__P((struct proc *, void *, register_t *));
int	linux_ioctl	__P((struct proc *, void *, register_t *));
int	linux_fcntl	__P((struct proc *, void *, register_t *));
int	setpgid	__P((struct proc *, void *, register_t *));
int	linux_oldolduname	__P((struct proc *, void *, register_t *));
int	umask	__P((struct proc *, void *, register_t *));
int	chroot	__P((struct proc *, void *, register_t *));
int	dup2	__P((struct proc *, void *, register_t *));
int	getppid	__P((struct proc *, void *, register_t *));
int	getpgrp	__P((struct proc *, void *, register_t *));
int	setsid	__P((struct proc *, void *, register_t *));
int	linux_sigaction	__P((struct proc *, void *, register_t *));
int	linux_siggetmask	__P((struct proc *, void *, register_t *));
int	linux_sigsetmask	__P((struct proc *, void *, register_t *));
int	linux_setreuid	__P((struct proc *, void *, register_t *));
int	linux_setregid	__P((struct proc *, void *, register_t *));
int	linux_sigsuspend	__P((struct proc *, void *, register_t *));
int	linux_sigpending	__P((struct proc *, void *, register_t *));
int	compat_43_sethostname	__P((struct proc *, void *, register_t *));
int	compat_43_setrlimit	__P((struct proc *, void *, register_t *));
int	compat_43_getrlimit	__P((struct proc *, void *, register_t *));
int	getrusage	__P((struct proc *, void *, register_t *));
int	gettimeofday	__P((struct proc *, void *, register_t *));
int	settimeofday	__P((struct proc *, void *, register_t *));
int	getgroups	__P((struct proc *, void *, register_t *));
int	setgroups	__P((struct proc *, void *, register_t *));
int	linux_oldselect	__P((struct proc *, void *, register_t *));
int	linux_symlink	__P((struct proc *, void *, register_t *));
int	compat_43_lstat	__P((struct proc *, void *, register_t *));
int	linux_readlink	__P((struct proc *, void *, register_t *));
int	linux_uselib	__P((struct proc *, void *, register_t *));
int	swapon	__P((struct proc *, void *, register_t *));
int	reboot	__P((struct proc *, void *, register_t *));
int	linux_readdir	__P((struct proc *, void *, register_t *));
int	linux_mmap	__P((struct proc *, void *, register_t *));
int	munmap	__P((struct proc *, void *, register_t *));
int	linux_truncate	__P((struct proc *, void *, register_t *));
int	compat_43_ftruncate	__P((struct proc *, void *, register_t *));
int	fchmod	__P((struct proc *, void *, register_t *));
int	linux_fchown	__P((struct proc *, void *, register_t *));
int	getpriority	__P((struct proc *, void *, register_t *));
int	setpriority	__P((struct proc *, void *, register_t *));
int	profil	__P((struct proc *, void *, register_t *));
int	linux_statfs	__P((struct proc *, void *, register_t *));
int	linux_fstatfs	__P((struct proc *, void *, register_t *));
#ifdef __i386__
int	linux_ioperm	__P((struct proc *, void *, register_t *));
#else
#endif
int	linux_socketcall	__P((struct proc *, void *, register_t *));
int	setitimer	__P((struct proc *, void *, register_t *));
int	getitimer	__P((struct proc *, void *, register_t *));
int	linux_stat	__P((struct proc *, void *, register_t *));
int	linux_lstat	__P((struct proc *, void *, register_t *));
int	linux_fstat	__P((struct proc *, void *, register_t *));
int	linux_olduname	__P((struct proc *, void *, register_t *));
#ifdef __i386__
int	linux_iopl	__P((struct proc *, void *, register_t *));
#else
#endif
int	linux_wait4	__P((struct proc *, void *, register_t *));
int	linux_ipc	__P((struct proc *, void *, register_t *));
int	fsync	__P((struct proc *, void *, register_t *));
int	linux_sigreturn	__P((struct proc *, void *, register_t *));
int	compat_09_setdomainname	__P((struct proc *, void *, register_t *));
int	linux_uname	__P((struct proc *, void *, register_t *));
#ifdef __i386__
int	linux_modify_ldt	__P((struct proc *, void *, register_t *));
#else
#endif
int	mprotect	__P((struct proc *, void *, register_t *));
int	linux_sigprocmask	__P((struct proc *, void *, register_t *));
int	linux_getpgid	__P((struct proc *, void *, register_t *));
int	fchdir	__P((struct proc *, void *, register_t *));
int	linux_personality	__P((struct proc *, void *, register_t *));
int	linux_llseek	__P((struct proc *, void *, register_t *));
int	linux_getdents	__P((struct proc *, void *, register_t *));
int	linux_select	__P((struct proc *, void *, register_t *));
int	flock	__P((struct proc *, void *, register_t *));
