$NetBSD: UPDATING,v 1.13 2001/01/26 01:31:38 dogcow Exp $

This file is intended to be a brief introduction to the build
process and a reference on what to do if something doesn't work.

For a more detailed description see Makefile.

Recent changes:
^^^^^^^^^^^^^^^

20010114:
	introduce .if commands(target) in make(1). You need to
	bring everything up-to-date first, then without installing
	anything make and install in /usr/bin/make, then proceed
	with make build.

20010101:
	bsd.subdir.mk committed 20001230 had a bug which caused
	afterinstall targets to run too soon; update again.

20001230:
	New share/mk files needed to support .WAIT in SUBDIR variables.
	If you get make errors, 
		(cd share/mk; make install)
	Also, PRINTOBJDIR has changed and is now used more heavily.

20001019:
	The `ca' device driver has been replaced by `ld'; although the
	major and minor numbers haven't changed, you should update your /dev
	directory.

20000929:
	The following make directives are obsoleted.
	MKCRYPTO_RSA NOCRYPTO_RSA NOCRYPTO_RC5 NOCRYPTO_IDEA 
	By default, RSA is built into libcrypto.  IDEA and RC5 will not be
	bulit into libcrypto.  By using MKCRYPTO_{RC5,IDEA}, you can build
	additional library libcrypto_{idea,rc5}.

20000623:
	MKCRYPTO and friends added to share/mk/bsd.own.mk.
	'cd share/mk ; make install' needed before make build.


Hints for a more successful build:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    Build a new kernel first:
	This makes sure that any new system calls or features
	   expected by the new userland will be present.  This
	   helps to avoid critical errors when upgrading.
    Use object directories:
	This helps to keep stale object
	   files from polluting the build if a Makefile "forgets"
	   about one.  It also makes it easier to clean up after
	   a build.  It's also necessary if you want to use the
	   same source tree for multiple machines.
	   To use object directories:
	    a) cd /usr/src ; make cleandir
	    b) Add "OBJMACHINE=yes" to /etc/mk.conf
	    c) Add "MKOBJDIRS=yes" to /etc/mk.conf
	    d) cd /usr/src ; make build
	   Note that running "make obj" in a directory will create
	   in obj.$MACHINE directory.
    Build to a DESTDIR:
	This helps to keep old
	   installed files (especially libraries) from interfering
	   with the new build.
	   To build to a DESTDIR, set the DESTDIR environment
	   variable before running make build.  It should be set to
	   the pathname of an initially empty directory.
	   Problems: you might need to update critical utilities
		without using DESTDIR since nothing is executed
		from what is installed in DESTDIR.
		(See critical utils, below)
    Build often:
	This keeps critical utilities current enough to not choke
	on any other part of the source tree that depends on up to
	date functionality.
 
What to do if things don't work:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
When things don't work there is usually a few things that commonly
should be done.
    1)	make includes
	This should be done automatically by make build.
    2)  cd share/mk && make install
	Again, automatically done by make build.

Failsafe rebuild of a small part of the tree:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
To make sure you rebuild something correctly you want to do
something like the following:
    1)  Make sure the includes and .mk files are up to date.
    2)  Make sure any program used to build the particular
	utility is up to date.  (yacc, lex, etc...)
    3)  cd ...path/to/util...
	make cleandir
	rm ...all obj directories...
	make cleandir			# yes, again
	make obj
	make depend && make

Failsafe rebuild of the entire tree:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
If you really want to make sure the source tree is clean and
ready for a build try the following.  Note that sourcing /etc/mk.conf
(a make(1) Makefile) in this manner is not right, and will not work
for anyone who uses any make(1) features in /etc/mk.conf.

---cut here---
#!/bin/sh
. /etc/mk.conf

if [ -z $BSDSRCDIR ] ; then
    BSDSRCDIR=/usr/src
fi
if [ \! -d $BSDSRCDIR ] ; then
    echo Unable to find sources
    exit 1
fi
find $BSDSRCDIR -name \*.o -o -name obj.\* -o -name obj -exec rm \{\} \;

if [ -z $BSDOBJDIR ] ; then
    BSDOBJDIR=/usr/obj
fi
if [ -d $BSDOBJDIR ] ; then
    rm -rf $BSDOBJDIR
fi

cd $BSDSRCDIR && make cleandir

---cut here---

Critical utilities:
^^^^^^^^^^^^^^^^^^^
	gnu/usr.bin/egcs
	usr.bin/compile_et
	usr.bin/make
	usr.bin/yacc
	usr.bin/lex
	usr.bin/xlint
	usr.sbin/config

Other problems and possibly solutions:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Symptom:Unreasonable compiler errors.
Fix:	Rebuild gnu/usr.bin/egcs

Symptom:Complaints involving a Makefile.
Fix:	Make sure .mk files are up to date.
	cd share/mk && make install
Fix:	Rebuild usr.bin/make

Symptom:Kernel `config' fails to configure any kernel, including GENERIC.
Fix:	Rebuild usr.sbin/config

Symptom:
Fix:	Rebuild usr.bin/yacc

Symptom:
Fix:	Rebuild usr.bin/lex

Symptom:
Fix:	rm /usr/lib/libbfd.a

Symptom:Obsolete intermediate files are used during compilation
Fix:	Try the following sequence of commands in the directory in question.
	make cleandir; rm `make print-objdir`; make cleandir; make obj
	(If you built the tree without "make obj" in the past, obsolete files
	may remain.  The command tries to clean everything up)

Symptom:.../sysinst/run.c:xx: warning: initialization from incompatible pointer type
Fix:	Rebuild and install usr.bin/menuc

Symptom:mklocale not found during build in share/locale/ctype
Fix:	Build and install usr.bin/mklocale

Symptom:undefined reference to `__assert13'
Fix:    Rebuild and install lib/libc


