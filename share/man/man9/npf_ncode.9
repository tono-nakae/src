.\"	$NetBSD: npf_ncode.9,v 1.1 2010/08/22 18:56:20 rmind Exp $
.\"
.\" Copyright (c) 2009-2010 The NetBSD Foundation, Inc.
.\" All rights reserved.
.\"
.\" This material is based upon work partially supported by The
.\" NetBSD Foundation under a contract with Mindaugas Rasiukevicius.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
.\" ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
.\" TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
.\" PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
.\" BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
.\" CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
.\" SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
.\" INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
.\" CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
.\" ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
.\" POSSIBILITY OF SUCH DAMAGE.
.\"
.Dd August 22, 2010
.Dt NPF_NCODE 9
.Os
.Sh NAME
.Nm npf_ncode
.Nd NPF n-code processor
.Sh SYNOPSIS
.In net/npf_ncode.h
.Ft int
.Fn npf_ncode_process \
"npf_cache_t *npc" "const void *ncode" "nbuf_t *nbuf" "int layer"
.Ft int
.Fn npf_ncode_validate "const void *ncode" "size_t sz" "int *errat"
.\" -----
.Sh DESCRIPTION
The NPF n-code processor is a general purpose engine to inspect network
packets, which are abstracted as chained buffers.
.Pp
.Sh FUNCTIONS
.Fn npf_ncode_process
performs n-code processing using data of the specified packet.
.Fa ncode
is address to a validated n-code memory block.
N-code memory address should be 32 bit word aligned.
.Fa nbuf
is an opaque network buffer on which n-code processor will operate.
.Fa layer
specifies at which network layer buffer is passed, it can be either
NPF_LAYER_L2 or NPF_LAYER_L3.
This value is initally set in R0 register and can be checked by the
n-code.
Contents of other registers are unspecified.
.Pp
Function returns a value from the n-code.
.Pp
.Fn npf_ncode_validate
performs n-code validation.
.Fa ncode
is address to a n-code memory block.
.Fa sz
is the size of memory block.
.Fa errat
is the word number in the n-code where error is detected.
If no error, this value is undefined.
.Pp
On successful validation, function returns 0.
Otherwise, may return one of the following error codes:
.Bl -tag -width [NPF_ERR_OPCODE]
.It Bq Er NPF_ERR_OPCODE
Invalid instruction (unknown opcode).
.It Bq Er NPF_ERR_JUMP
Invalid jump, e.g. not to the instruction or out of range.
.It Bq Er NPF_ERR_REG
Invalid register, i.e. incorrect index number.
.It Bq Er NPF_ERR_INVAL
Invalid argument value.
.It Bq Er NPF_ERR_RANGE
Processing out of range, e.g. missing return path.
.El
.Pp
Any untrusted n-code, for example generated by userspace, should be
validated (once) before allowing to process it.
.Pp
.\" -----
.Sh PROCESSING
There are two instruction sets: RISC-like and CISC-like.
Processing is done in words, therefore both instructions (their codes) and
arguments are always 32 bit long words.
.Pp
There are four general purpose registers: R0, R1, R2, R3.
Each can store 32 bit long words.
Registers are mainly to store values for operations using RISC-like
instructions.
CISC-like instructions, however, use them to store return values.
.Pp
Processing begins from the first word until it reaches
NPF_OPCODE_RET
instruction with a return value.
Instruction pointer can be changed using jump operations, which always
take relative address, in words.
Result of last comparison is tracked internally and jump operations should
be performed immediately after comparison or certain CISC-like instructions.
.Pp
CISC-like instructions and
NPF_OPCODE_LOAD
can be used to load data from network buffer.
They operate at current network buffer offset, which is initially at
the beginning of network buffer.
NPF_OPCODE_ADVR
instruction can be used to advance the current network buffer offset.
.Pp
.\" -----
.Sh CACHING
Various packet data is cached during execution of CISC-like instructions
and further instruction calls may retrieve information from the cache.
If n-code changes the packet data, information in the cache might no
longer reflect the changes.
In such case, it is n-code's responsibility to invalidate the cache
(if necessary) by executing
NPF_OPCODE_INVL
instruction.
.\" -----
.Sh INSTRUCTIONS
Return, advance, jump and tag operations.
.Bl -tag -width indent
.It Sy 0x00 NPF_OPCODE_RET <return value>
Finish processing and return passed value.
.It Sy 0x01 NPF_OPCODE_ADVR <register>
Advance current network buffer offset by a value,
passed in the specified register.
Value represents bytes and cannot be negative or zero.
.It Sy 0x02 NPF_OPCODE_J <relative address>
Jump processor to a relative address (from this instruction).
Address value is the amount of words forwards or backwards.
It can point only to a valid instruction, at valid boundary.
.It Sy 0x03 NPF_OPCODE_INVL
Invalidate all data in the packet cache.
.It Sy 0x04 NPF_OPCODE_TAG <key> <value>
Add a tag with specified key and value to the primary network buffer (nbuf).
.El
.Pp
.\" ---
Set and load operations.
.Bl -tag -width indent
.It Sy 0x10 NPF_OPCODE_MOV <value>, <register>
Set the specified value to a register.
.It Sy 0x11 NPF_OPCODE_LOAD <length>, <register>
Load secified length of packet data into the register.
Data is read starting from the current network buffer offset.
Operation does not advance the offset after read, however.
Value of
.Fa length
represents bytes and must be in the range from 1 to 4.
Returned data is in network byte order.
.El
.Pp
.\" ---
Compare and jump operations.
.Bl -tag -width indent
.It Sy 0x21 NPF_OPCODE_CMP <value>, <register>
Compare the specified value and value in a register.
Result is stored internally and can be tested by jump instructions.
.It Sy 0x22 NPF_OPCODE_CMPR <register>, <register>
Compare values of two registers.
Result is stored internally and can be tested by jump instructions.
.It Sy 0x23 NPF_OPCODE_BEQ <relative address>
Jump if result of last comparison was "equal".
Otherwise, continue processing of next instruction.
.It Sy 0x24 NPF_OPCODE_BNE <relative address>
Jump if result of last comparison was "not equal".
Otherwise, continue processing of next instruction.
.It Sy 0x25 NPF_OPCODE_BGT <relative address>
Jump if result of last comparison was "greater than".
Otherwise, continue processing of next instruction.
.It Sy 0x26 NPF_OPCODE_BLT <relative address>
Jump if result of last comparison was "less than".
Otherwise, continue processing of next instruction.
.El
.Pp
.\" ---
Bitwise operations.
.Bl -tag -width indent
.It Sy 0x30 NPF_OPCODE_AND <value>, <register>
Perform bitwise AND with a specified value and value in the register.
Result is stored in the register.
.El
.Pp
.\" -----
CISC-like n-code instructions.
.Bl -tag -width indent
.It Sy 0x80 NPF_OPCODE_ETHER <s/d>, <_reserved>, <ether type>
Read Ethernet type in the frame, handle possible VLAN and match with
the value passed in the argument.
Return value to advance to layer 3 header in R3.
.\" -
.It Sy 0x90 NPF_OPCODE_IP4MASK <s/d>, <network address>, <subnet mask>
Match passed network address with subnet mask against source or destination
address in the IPv4 header.
Address and mask should be in network byte order.
Value of first argument indicates whether source (if 0x1) or destination
(if 0x0) address should be matched.
.It Sy 0x91 NPF_OPCODE_IP4TABLE <s/d>, <table id>
Match the source or destination address with NPF table contents
specified by table ID.
Value of the first argument indicates whether source (if 0x1) or
destination (if 0x0) address should be matched.
.\" -
.It Sy 0x92 NPF_OPCODE_ICMP4 <type> <code>
Match ICMP type and code of the packet, unless a value of ~0 (all bits set)
is passed, which indicates that comparison should not be performed.
.\" -
.It Sy 0xa0 NPF_OPCODE_TCP_PORT	<s/d>, <port range>
Match the source or destination port with a specified port range.
Higher 16 bits of second argument represent "from" and lower 16 bits
represent "to" values of range.
The 32 bit port range value is host byte order, however the actual
"from" and "to" values should be in the network byte order.
Value of the first argument indicates whether source (if 0x1) or
destination (if 0x0) port should be matched.
.\" -
.It Sy 0xa1 NPF_OPCODE_UDP_PORT <s/d>, <port range>
Match the source or destination port with a specified port range.
Higher 16 bits of second argument represent "from" and lower 16 bits
represent "to" values of range.
The 32 bit port range value is host byte order, however the actual
"from" and "to" values should be in the network byte order.
Value of the first argument indicates whether source (if 0x1) or
destination (if 0x0) port should be matched.
.El
.\" -----
.Sh CODE REFERENCES
This section describes places within the
.Nx
source tree where actual code implementing the
.Nm
subsystem
can be found.
All pathnames are relative to
.Pa /usr/src .
.Pp
The
.Nm
is implemented within the file
.Pa sys/net/npf/npf_processor.c .
.Sh SEE ALSO
.Xr npf.conf 8 ,
.Xr npfctl 8
.Sh HISTORY
The NPF n-code processor first appeared in
.Nx 6.0 .
