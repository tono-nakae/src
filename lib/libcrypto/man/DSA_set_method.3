.rn '' }`
''' $RCSfile: DSA_set_method.3,v $$Revision: 1.1 $$Date: 2000/10/04 05:41:28 $
'''
''' $Log: DSA_set_method.3,v $
''' Revision 1.1  2000/10/04 05:41:28  itojun
''' add manpages generated by pod2man.  need fixes here and there.
'''
'''
.de Sh
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp
.if t .sp .5v
.if n .sp
..
.de Ip
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb
.ft CW
.nf
.ne \\$1
..
.de Ve
.ft R

.fi
..
'''
'''
'''     Set up \*(-- to give an unbreakable dash;
'''     string Tr holds user defined translation string.
'''     Bell System Logo is used as a dummy character.
'''
.tr \(*W-|\(bv\*(Tr
.ie n \{\
.ds -- \(*W-
.ds PI pi
.if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\" diablo 12 pitch
.ds L" ""
.ds R" ""
'''   \*(M", \*(S", \*(N" and \*(T" are the equivalent of
'''   \*(L" and \*(R", except that they are used on ".xx" lines,
'''   such as .IP and .SH, which do another additional levels of
'''   double-quote interpretation
.ds M" """
.ds S" """
.ds N" """""
.ds T" """""
.ds L' '
.ds R' '
.ds M' '
.ds S' '
.ds N' '
.ds T' '
'br\}
.el\{\
.ds -- \(em\|
.tr \*(Tr
.ds L" ``
.ds R" ''
.ds M" ``
.ds S" ''
.ds N" ``
.ds T" ''
.ds L' `
.ds R' '
.ds M' `
.ds S' '
.ds N' `
.ds T' '
.ds PI \(*p
'br\}
.\"	If the F register is turned on, we'll generate
.\"	index entries out stderr for the following things:
.\"		TH	Title 
.\"		SH	Header
.\"		Sh	Subsection 
.\"		Ip	Item
.\"		X<>	Xref  (embedded
.\"	Of course, you have to process the output yourself
.\"	in some meaninful fashion.
.if \nF \{
.de IX
.tm Index:\\$1\t\\n%\t"\\$2"
..
.nr % 0
.rr F
.\}
.TH DSA_set_method 3 "0.9.5a" "22/Jul/100" "OpenSSL"
.UC
.if n .hy 0
.if n .na
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.de CQ          \" put $1 in typewriter font
.ft CW
'if n "\c
'if t \\&\\$1\c
'if n \\&\\$1\c
'if n \&"
\\&\\$2 \\$3 \\$4 \\$5 \\$6 \\$7
'.ft R
..
.\" @(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2
.	\" AM - accent mark definitions
.bd B 3
.	\" fudge factors for nroff and troff
.if n \{\
.	ds #H 0
.	ds #V .8m
.	ds #F .3m
.	ds #[ \f1
.	ds #] \fP
.\}
.if t \{\
.	ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.	ds #V .6m
.	ds #F 0
.	ds #[ \&
.	ds #] \&
.\}
.	\" simple accents for nroff and troff
.if n \{\
.	ds ' \&
.	ds ` \&
.	ds ^ \&
.	ds , \&
.	ds ~ ~
.	ds ? ?
.	ds ! !
.	ds /
.	ds q
.\}
.if t \{\
.	ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.	ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.	ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.	ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.	ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.	ds ? \s-2c\h'-\w'c'u*7/10'\u\h'\*(#H'\zi\d\s+2\h'\w'c'u*8/10'
.	ds ! \s-2\(or\s+2\h'-\w'\(or'u'\v'-.8m'.\v'.8m'
.	ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.	ds q o\h'-\w'o'u*8/10'\s-4\v'.4m'\z\(*i\v'-.4m'\s+4\h'\w'o'u*8/10'
.\}
.	\" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds v \\k:\h'-(\\n(.wu*9/10-\*(#H)'\v'-\*(#V'\*(#[\s-4v\s0\v'\*(#V'\h'|\\n:u'\*(#]
.ds _ \\k:\h'-(\\n(.wu*9/10-\*(#H+(\*(#F*2/3))'\v'-.4m'\z\(hy\v'.4m'\h'|\\n:u'
.ds . \\k:\h'-(\\n(.wu*8/10)'\v'\*(#V*4/10'\z.\v'-\*(#V*4/10'\h'|\\n:u'
.ds 3 \*(#[\v'.2m'\s-2\&3\s0\v'-.2m'\*(#]
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.ds oe o\h'-(\w'o'u*4/10)'e
.ds Oe O\h'-(\w'O'u*4/10)'E
.	\" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.	\" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.	ds : e
.	ds 8 ss
.	ds v \h'-1'\o'\(aa\(ga'
.	ds _ \h'-1'^
.	ds . \h'-1'.
.	ds 3 3
.	ds o a
.	ds d- d\h'-1'\(ga
.	ds D- D\h'-1'\(hy
.	ds th \o'bp'
.	ds Th \o'LP'
.	ds ae ae
.	ds Ae AE
.	ds oe oe
.	ds Oe OE
.\}
.rm #[ #] #H #V #F C
.SH "NAME"
DSA_set_default_method, DSA_get_default_method, DSA_set_method,
DSA_new_method, DSA_OpenSSL \- select RSA method
.SH "LIBRARY"
libcrypto, -lcrypto
.SH "SYNOPSIS"
.PP
.Vb 1
\& #include <openssl/DSA.h>
.Ve
.Vb 1
\& void DSA_set_default_method(DSA_METHOD *meth);
.Ve
.Vb 1
\& DSA_METHOD *DSA_get_default_method(void);
.Ve
.Vb 1
\& DSA_METHOD *DSA_set_method(DSA *dsa, DSA_METHOD *meth);
.Ve
.Vb 1
\& DSA *DSA_new_method(DSA_METHOD *meth);
.Ve
.Vb 1
\& DSA_METHOD *DSA_OpenSSL(void);
.Ve
.SH "DESCRIPTION"
A \fBDSA_METHOD\fR specifies the functions that OpenSSL uses for DSA
operations. By modifying the method, alternative implementations
such as hardware accelerators may be used.
.PP
Initially, the default is to use the OpenSSL internal implementation.
\fIDSA_OpenSSL()\fR returns a pointer to that method.
.PP
\fIDSA_set_default_method()\fR makes \fBmeth\fR the default method for all \fBDSA\fR
structures created later.
.PP
\fIDSA_get_default_method()\fR returns a pointer to the current default
method.
.PP
\fIDSA_set_method()\fR selects \fBmeth\fR for all operations using the structure \fBDSA\fR.
.PP
\fIDSA_get_method()\fR returns a pointer to the method currently selected
for \fBDSA\fR.
.PP
\fIDSA_new_method()\fR allocates and initializes a \fBDSA\fR structure so that
\fBmethod\fR will be used for the DSA operations. If \fBmethod\fR is \fBNULL\fR,
the default method is used.
.SH "THE DSA_METHOD STRUCTURE"
struct
 {
     /* name of the implementation */
        const char *name;
.PP
.Vb 3
\&     /* sign */
\&        DSA_SIG *(*dsa_do_sign)(const unsigned char *dgst, int dlen,
\&                                 DSA *dsa);
.Ve
.Vb 3
\&     /* pre-compute k^-1 and r */
\&        int (*dsa_sign_setup)(DSA *dsa, BN_CTX *ctx_in, BIGNUM **kinvp,
\&                                 BIGNUM **rp);
.Ve
.Vb 3
\&     /* verify */
\&        int (*dsa_do_verify)(const unsigned char *dgst, int dgst_len,
\&                                 DSA_SIG *sig, DSA *dsa);
.Ve
.Vb 5
\&     /* compute rr = a1^p1 * a2^p2 mod m (May be NULL for some
\&                                          implementations) */
\&        int (*dsa_mod_exp)(DSA *dsa, BIGNUM *rr, BIGNUM *a1, BIGNUM *p1,
\&                                 BIGNUM *a2, BIGNUM *p2, BIGNUM *m,
\&                                 BN_CTX *ctx, BN_MONT_CTX *in_mont);
.Ve
.Vb 4
\&     /* compute r = a ^ p mod m (May be NULL for some implementations) */
\&        int (*bn_mod_exp)(DSA *dsa, BIGNUM *r, BIGNUM *a,
\&                                 const BIGNUM *p, const BIGNUM *m,
\&                                 BN_CTX *ctx, BN_MONT_CTX *m_ctx);
.Ve
.Vb 2
\&     /* called at DSA_new */
\&        int (*init)(DSA *DSA);
.Ve
.Vb 2
\&     /* called at DSA_free */
\&        int (*finish)(DSA *DSA);
.Ve
.Vb 1
\&        int flags;
.Ve
.Vb 1
\&        char *app_data; /* ?? */
.Ve
.Vb 1
\& } DSA_METHOD;
.Ve
.SH "RETURN VALUES"
\fIDSA_OpenSSL()\fR, \fIDSA_get_default_method()\fR and \fIDSA_get_method()\fR return
pointers to the respective \fBDSA_METHOD\fRs.
.PP
\fIDSA_set_default_method()\fR returns no value.
.PP
\fIDSA_set_method()\fR returns a pointer to the \fBDSA_METHOD\fR previously
associated with \fBdsa\fR.
.PP
\fIDSA_new_method()\fR returns \fBNULL\fR and sets an error code that can be
obtained by the \fIERR_get_error(3)|ERR_get_error(3)\fR manpage if the allocation
fails. Otherwise it returns a pointer to the newly allocated
structure.
.SH "SEE ALSO"
the \fIdsa(3)|dsa(3)\fR manpage, the \fIDSA_new(3)|DSA_new(3)\fR manpage
.SH "HISTORY"
\fIDSA_set_default_method()\fR, \fIDSA_get_default_method()\fR, \fIDSA_set_method()\fR,
\fIDSA_new_method()\fR and \fIDSA_OpenSSL()\fR were added in OpenSSL 0.9.4.

.rn }` ''
.IX Title "DSA_set_method 3"
.IX Name "DSA_set_default_method, DSA_get_default_method, DSA_set_method,
DSA_new_method, DSA_OpenSSL - select RSA method"

.IX Header "NAME"

.IX Header "SYNOPSIS"

.IX Header "DESCRIPTION"

.IX Header "THE DSA_METHOD STRUCTURE"

.IX Header "RETURN VALUES"

.IX Header "SEE ALSO"

.IX Header "HISTORY"

